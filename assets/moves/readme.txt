each folder is a player animation

"convert_sprites.py" script reads each folder and the "info.json" file in it

each .json file has been generated by the "process_images.py" script from captured images at level 2
(with the yellow level). This script is changed for each frame (x/y), because some frames
were captured at some other level.

one it's generated, generally it can be used as is, but in some cases it must be
reworked manually.

Most moves came out okay, but some needed rework (jumping side kick...) and most
fall/death moves

The messy part:

A non-intuitive part is that the number of deltas are 1 more than the total number
of moves. For instance, a fall/death move starts with 0,0,0 but needs 3 frames.
The "deltas" list is generated by process_images. Images are sorted
numerically.

triplet: number of frames, delta x (from start), delta y (from start)

If number of frames is "-1" the animation is stuck there until player changes
the movement (example: front kick). Of course it cannot be set on a jump!!

Also, the number of frames used (and generated) is the number of the next triplet. Which explains why
one more triplet is needed at the end.
If there aren't enough images, the script re-uses the last one (which is then discarded anyway)

hit_mask is an optimization. Default is true but if false, it means that no hit mask
or collision mask is needed. For example frames when the player is hit don't need those.

example
{"name": "back_blow","hit_mask": false, "deltas": [[0, 0, 0], 
[8, -12, 0], [24, -16, 0], [-1, -16, 0]]}

I hope I don't have to complexify it anymore because it's already a friggin' mess.
