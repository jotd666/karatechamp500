
*
* 68k transcode by JOTD in 2023 using (https://github.com/jotd666/amiga68ktools)
  
* register conventions (imposed by z80268k mostly) are as follows:
*
* A: D0
* B: D1
* C: D2
* BC: manual
* D: D3
* E: D4
* DE: A1 or D3
* H: D5
* L: D6
* HL: A0 or D6 (video addresses)
* carry: manual, using D7 (push/pop af has no portable equivalent as SR is privileged on 68020+)
*
*
* Karate Champ VS 2. Reverse-engineering attempt by JOTD, focusing on 2 points:
* - CPU A.I.
* - animations
*
* CF02: time when entering highscore (BCD)
*
* current level info is propagated at 3 locations which mean different things:
*
* C0DC: number (1ST, 2ND...)
* C900: map index (picture, girl)
* C910: skill level (see below)
* background_and_state_bits_C911: background+state bits

* C028: attack flags (red player/red cpu), can be 08,09,0A TODO figure out when????

* nb_credits_minus_one_C024: 0 when no credit, then if coin is inserted, set to 1, then
* immediately decreased, while showing "press 1P button" screen

* C910: skill level / speed of computer
* 0: slow => 12: super fast. $10 seems a threshold
* aggressivity is also increased
* increasing skill level dynamically works: computer goes super ninja)
*
* C556-59: 4 bytes looks like counters. When move is completed all 4 values are 8

* C02D
* players_type_human_or_cpu_flags_C02D: 05 1 player vs CPU, 0F 2 players. Changing dynamically works too!

* note: there are 4 structures C200, C220, C240, C260... there are copies of data for instance C229/C22A are copied
* to C269/C26A. Not sure of everything that's written below in terms of addresses...
* C200/C240: player 1 structures
* C220/C260: player 1 structures


* C220: another structure, A.I. related, probably sharing both parties characteristics
* TODO: figure out more values from that structure, specially:
* +07/+08: frame id/pointer on frame structure of own player, used as input of check_hl_in_ix_list_B009 by A.I
*  so the CPU can recognize the moves
* +09 white player x ($20 min $DF max)
* +0A: current move index (at least during practice)
* +0B/+0C: frame id, like 07/08 for opponent player. Note: bit 8 of C22C set: opponent facing right, maybe
*     only important for frame display
* +0D opponent player x
* +0E oppnent move index
* +0F ($C20F): player logical distance, often addressed as  bit  7,(iy+$0f)
* distance seems to be computed from the backs of the players
* bit 7 set => means current player is turning his back to opponent)
* then
* 0: back 2 back distance > 0x70
* 1-4: opponent faces current player (which can turn its back to opponent, see bit 7)
* 1: back 2 back distance > 0x58
* 2: back 2 back distance > 0x40
* 3: back 2 back distance > 0x28
* 4: back 2 back distance > 0x10
* 5-7: opponent turns back to current player (which can turn its back to opponent, see bit 7)
* 5: back 2 back distance > 0x60
* 6: back 2 back distance > 0x30
* 7: back 2 back distance > 0x18
* 8: smaller distance (<= 0x10/0x18) (at least one player must turn his back)
*
* there's a $10 (8 ?) offset depending on facing

* C240: player 1 structure
* +2: 0 when not animated, else number of ticks to stay in the current animation frame
* +7,8: animation related. Bit 7 of C248: facing direction
* C249 (+$9): player 1 x coord. Ranges $20 (32 top left) to $DF (223 right), starts at 0x30
* C24A (+$A): player 1 y coord. $E0 when fighting. Practice:
* C24B (+$B): player 1 current move: codes below
* C24C (+$C): rough distance 0-4
* 0: far
* 1: intermediate, facing other player  (regardless of other player facing direction)
* 2: very close, facing other player   ("")
* 3: intermediate, turning back to other player  ("")
* 4: very close, turning back to other player    ("")
*
*
* C260: player 2 structure
* C269 (+$9): x coord. starts at 0xD0
* C26A (+$A): y coord. $E0 when fighting. Practice: $90
* C26B: player 2 current move (see codes below). Also set during "practice"
* C26C: player 2 rough distance to player 1 0 (same as C24C for second player)
*
* for instance if white is on the left (facing right) and red is on the right, close (facing right)
* the value of
* C24C is: 02
* C26C is: 04
*
* changing C249 immediately reflects on player 1 (white) moving x wise
* changing C269 immediately reflects on player 2 (red) moving x wise
* players can't be exactly at the same position. At least $10 distance is required
* (setting values too close to each other results in game correcting them, same for min/max)
*

* the codes don't match exact moves, but rather the attack type
* there is often only one attack type (back kick) but sometimes there are
* several: example with front kick and weak reverse punch, that only differ
* by attack distance
*
* values marked with "**" trigger the relevant moves only when injecting
* them by setting a at AB56. Injecting 07 doesn't make CPU turn around, but
* does something else.
*
* also attacks can be triggered in other places

* 0x00: not moving, guard
* 0x01: moving back
* 0x02: moving forward
* 0x03: pre-jump (jump to avoid low blow?)
* 0x04: crouch
* 0x05: back kick
* 0x06: ** back kick
* 0x07: turn around (only CPU can do that without using an aborted back jump/round kick)
* 0x08: jumping back kick
* 0x09: foot sweep (back)
* 0x0A: front kick (can also be small reverse punch at short range apparently)
* 0x0B: back round kick
* 0x0C: lunge punch (medium 200-400 forward+forward)
* 0x0D: jumping side kick
* 0x0E: ** foot sweep (front)
* 0x0F: round kick
* 0x10: lunge punch (high 300-600 rear+up)
* 0x11: lunge punch (high 500-1000 forward+up)
* 0x12: rear sommersault
* 0x13: reverse punch (crouch 400-800)
* 0x14: low kick
* 0x15: ** low kick
* 0x16: ** low kick
* 0x17: front sommersault
* 0x18: foot sweep (front)

* difficulty level only has an effect before "CMP" level number 16
* in CMP (champ) level and stage 16 (brige CMP if I'm not mistaken),
* difficulty dip switches are ignored, game is just super fast
* and super hard
*
*A.I: how computer maintains its moves ?
*
* - attack moves: once the attack went through (and failed), depending
*   on the skill level, computer waits a while with the move frozen
*   (including jumping moves, which looks a bit weird). In champion level
*   from level 16, there is no wait at all.
* - blocking moves: maintaned as long as the opponent is performing
*   an attack move with a matching attack height

* I should get more info about current_task_index_C028 what does the values mean (09,0A...)
* probably related to animation frames not to A.I. so less interesting

* VS Version Info:
* ---------------
* Memory Map:
* Main CPU
* 0000-bfff ROM (encrypted)
* c000-cfff RAM
* d000-d3ff char videoram
* d400-d7ff color videoram
* d800-d8ff sprites
* e000-ffff ROM (encrypted)

* IO Ports:
* Main CPU
* INPUT  00 = Player 1 Controls - ( ACTIVE LOW )
* INPUT  40 = Player 2 Controls - ( ACTIVE LOW )
* INPUT  80 = Coins and Start Buttons - ( ACTIVE LOW )
* INPUT  C0 = Dip Switches - ( ACTIVE LOW )
* OUTPUT 00 = Screen Flip
* OUTPUT 01 = CPU Control
*                 bit 0 = external nmi enable
* OUTPUT 02 = Sound Reset
* OUTPUT 40 = Sound latch write
*
* Sound CPU
* INPUT  01 = Sound latch read
* OUTPUT 00 = AY8910 #1 data write
* OUTPUT 01 = AY8910 #1 control write
* OUTPUT 02 = AY8910 #2 data write
* OUTPUT 03 = AY8910 #2 control write
* OUTPUT 04 = MSM5205 write
* OUTPUT 05 = CPU Control
*                 bit 0 = MSM5205 trigger
*                 bit 1 = external nmi enable


    .global karate_champ_irq
    .global karate_champ_reset

	.include	"karate_champ.inc"
	.ifdef	__amiga__
	.include "karate_champ_ram.68k"
	.align	2
	.endif

* utility routines, code repeated a lot, and needs the same adaptation
* allows to store a pointer into game structures and stay within 16 bit boundary
* this forces us to keep a copy of ROM
	.macro STORE_AX_IN_AY_STRUCTURE_ZZ_ADDRESS   ax,ay,zz
store_\ax\()_in_\ay\()_structure_\zz\()_address:
	move.l	\ax,d7
	sub.l	#game_mem,d7
	* store as little endian
	move.b	d7,(0x\zz,\ay)                    	| [$5a90: ld   (ix+$02),l]
	lsr.w	#8,d7
	move.b	d7,(0x\zz+1,\ay)                    	| [$5a93: ld   (ix+$03),h]
	rts
	.endm
	
	.macro LOAD_AX_FROM_AY_STRUCTURE_ZZ_ADDRESS   ax,ay,zz
load_\ax\()_from_\ay\()_structure_\zz\()_address:
	moveq	#0,d7
	* load as little endian
	move.b	(0x\zz+1,\ay),d7                    	| [$5a93: ld   (ix+$03),h]
	lsl.w	#8,d7
	move.b	(0x\zz,\ay),d7                    	| [$5a90: ld   (ix+$02),l]
	add.l	#game_mem,d7
	move.l	d7,\ax
	rts
	.endm
	
	.macro LOAD_AX_FROM_AY_STRUCTURE_ZZ_ADDRESS_MASK   ax,ay,zz
load_\ax\()_from_\ay\()_structure_\zz\()_address_mask:
	moveq	#0,d7
	* load as little endian
	move.b	(0x\zz+1,\ay),d7                    	| [$5a93: ld   (ix+$03),h]
	bclr	#7,d7				| [res 7,h]
	lsl.w	#8,d7
	move.b	(0x\zz,\ay),d7                    	| [$5a90: ld   (ix+$02),l]
	add.l	#game_mem,d7
	move.l	d7,\ax
	rts
	.endm
	
	.macro	SWAP_WORD	reg
	rol.w	#8,\reg
	.endm

	STORE_AX_IN_AY_STRUCTURE_ZZ_ADDRESS	a0,a3,02
	STORE_AX_IN_AY_STRUCTURE_ZZ_ADDRESS	a0,a2,02
	STORE_AX_IN_AY_STRUCTURE_ZZ_ADDRESS	a0,a3,1b
	STORE_AX_IN_AY_STRUCTURE_ZZ_ADDRESS	a1,a3,1b
	STORE_AX_IN_AY_STRUCTURE_ZZ_ADDRESS	a0,a3,07

	LOAD_AX_FROM_AY_STRUCTURE_ZZ_ADDRESS a0,a2,00
	LOAD_AX_FROM_AY_STRUCTURE_ZZ_ADDRESS a0,a3,00
	LOAD_AX_FROM_AY_STRUCTURE_ZZ_ADDRESS a0,a3,1b
	LOAD_AX_FROM_AY_STRUCTURE_ZZ_ADDRESS a0,a2,02
	LOAD_AX_FROM_AY_STRUCTURE_ZZ_ADDRESS a0,a2,06
	
	LOAD_AX_FROM_AY_STRUCTURE_ZZ_ADDRESS_MASK	a0,a3,07
	LOAD_AX_FROM_AY_STRUCTURE_ZZ_ADDRESS_MASK	a1,a2,07
	LOAD_AX_FROM_AY_STRUCTURE_ZZ_ADDRESS_MASK	a1,a3,07
	LOAD_AX_FROM_AY_STRUCTURE_ZZ_ADDRESS_MASK	a2,a3,0b
	

load_address_of_current_player_move_byte_CF04:
	moveq	#0,d7
	move.w	address_of_current_player_move_byte_CF04,d7
	lea		current_move_C24B,a0
	add.l	d7,a0
	rts
	
store_address_of_current_player_move_byte_CF04:
	move.l	a0,d7
	sub.l	#current_move_C24B,d7
	beq.b	0f
	cmp.w	#0x20,d7
	beq.b	0f
	* sanity, can't be anything else
	jbsr	osd_break
	illegal
	illegal
0:
	move.w	d7,address_of_current_player_move_byte_CF04	
	rts
	
load_a1_from_a0:
	moveq.l	#0,d5
	move.b	(1,a0),d5
	lsl.w	#8,d5
	move.b	(a0),d5
	add.l	#game_mem,d5
	move.l	d5,a1
	rts

change_d5_w_to_a0:
	swap	d5
	clr.w	d5
	swap	d5
	move.l	d5,a0	| move.w gives negative address!
	add.l	#game_mem,a0
	rts
	
change_d5_d6_to_a0:
	bsr		change_d5_d6_to_d5_16
	lea		game_mem,a0
	add.l	d5,a0
	rts
	
change_d3_d4_to_a1:
	bsr		change_d3_d4_to_d3_16
	lea		game_mem,a1
	add.l	d3,a1
	rts

change_d5_d6_to_d5_16:
	swap	d5
	clr.w	d5
	swap	d5
	lsl.w	#8,d5
	move.b	d6,d5
	rts
change_d3_d4_to_d3_16:
	swap	d3
	clr.w	d3
	swap	d3
	lsl.w	#8,d3
	move.b	d4,d3
	rts
change_d1_d2_to_d1_16:
	swap	d1
	clr.w	d1
	swap	d1
	lsl.w	#8,d1
	move.b	d2,d1
	rts
	
karate_champ_irq:
	bra		on_periodic_interrupt_B72F
	
karate_champ_reset:
	* default: 1 update/irq call
	* we need 60 updates / second so on amiga PAL
	* we need to set this variable to 2 once out of 5 calls
	move.b	#1,vb_ticks_count
	lea		stack_top_CF00,sp
l_0000:
	lea		active_task_bit_table_C000,a0
	jra	startup_B045                       	| [jp   startup_B045]
l_0003:
	jra	display_player_sprite_4153                             	| [$0003: jp   $4153]
	
	
	

* routines called by the main scheduler at B502
task_address_table_0020:
	.long	0x5250,task_5250                           	|  $0020
	.long	0x53d2,task_53d2                           	|  $0022
	.long	0x544f,task_544f                           	|  $0024
	.long	0x6491,task_6491                           	|  $0026
	.long	0x6529,task_6529                           	|  $0028
	.long	0x7c5d,task_7c5d                           	|  $002a
	.long	0x6f89,task_6f89                           	|  $002c
	.long	0x6622,task_6622                           	|  $002e
	.long	0x755b,task_755b                           	|  $0030
	.long	0x7657,task_7657                           	|  $0032
	.long	0x3a9c,task_3a9c                           	|  $0034
	.long	0x3a9c,task_3a9c                           	|  $0036
	.long	0x0000,task_illegal
	.long	0x0000,task_illegal
	.long	0x0000,task_illegal
	.long	0x6d5e,task_6d5e                           	|  $003e
	.long	0x47d6,task_47d6                           	|  $0040
	.long	0x47d6,task_47d6                           	|  $0042
	.long	0x47d6,task_47d6                           	|  $0044
	.long	0x47d6,task_47d6                           	|  $0046
	.long	0x50f2,task_50f2                           	|  $0048
	.long	0xb099,task_b099                           	|  $004a
	.long	0xb09c,task_b09c                           	|  $004c
	.long	0xb09f,task_b09f                           	|  $004e

	
* stubs
task_illegal:
	jbsr		osd_break
	illegal
	nop
	

.macro		entrypoint_16	offset
	cmp.w	#0x\offset,d5
	bne.b	0f
	lea		l_\offset(pc),a0
0:
	.endm
.macro		taskstub	offset
l_\offset:
task_\offset:
	move.w	#0x\offset,d0
	jbsr		osd_break
	trap	#0
	.endm


	taskstub	b078	
	taskstub	5bf4
	taskstub	b08d
	taskstub	5836
	taskstub	56f8
	taskstub	5f09


	  
  
	taskstub	47d6   
	taskstub	50f2   
 
* one task per player
task_3a9c:
	jbsr	load_iy_with_player_structure_B04B	| [$3a9c: call load_iy_with_player_structure_B04B]
	jbsr	clear_player_structure_partial_b012	| [$3a9f: call clear_player_structure_partial_b012]
	jbsr	l_3c41                            	| [$3aa2: call $3C41]
l_3aa5:
	jbsr	init_title_screen_3cb0                            	| [$3aa5: call $3CB0]
	jbsr	l_40b3                            	| [$3aa8: call $40B3]
	* initial display of white/red CPU player
	jbsr	display_player_sprite_4153                            	| [$3aab: call $4153]
	move.b	background_and_state_bits_C911,d0	| [$3aae: ld   a,(background_and_state_bits_C911)]
	and.b	#0x70,d0                         	| [$3ab1: and  $70]
	cmp.b	#0x20,d0                         	| [$3ab3: cp   $20]
	jeq	l_3c3e                             	| [$3ab5: jp   z,$3C3E]
	move.b	background_and_state_bits_C911,d0	| [$3ab8: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$3abb: res  7,a]
	cmp.b	#0x10,d0                         	| [$3abd: cp   $10]
	jcc	l_3ad4                             	| [$3abf: jp   nc,$3AD4]
	clr.b	d0                               	| [$3ac2: xor  a]

	move.l	a3,-(sp)                        	| [$3ac3: push iy]
	jbsr	suspend_this_task_B05A            	| [$3ac5: call suspend_this_task_B05A]
	move.l	(sp)+,a3                        	| [$3ac8: pop  iy]
	cmp.b	#0x08,d0                         	| [$3aca: cp   $08]
	jeq	l_3bf8                             	| [$3acc: jp   z,$3BF8]
	cmp.b	#0x0A,d0                         	| [$3acf: cp   $0A]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3ad1: call nz,display_error_text_B075]
0:
l_3ad4:

	move.l	a3,-(sp)                        	| [$3ad4: push iy]
	move.b	#0x0C,d1                        	| [$3ad6: ld   b,$0C]
	move.b	current_task_index_C028,d0   	| [$3ad8: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$3adb: cp   $0A]
	jeq	l_3ae4                             	| [$3adf: jp   z,$3AE4]
	move.b	#0x09,d0                        	| [$3ae2: ld   a,$09]
	bra.b	0f
l_3ae4:
	move.b	#0x08,d0                        	| [$3add: ld   a,$08]
0:
	jbsr	task_manipulation_B05D            	| [$3ae4: call task_manipulation_B05D]
	tst.b	d0                               	| [$3ae7: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3ae8: call nz,display_error_text_B075]
0:
	clr.b	d0                               	| [$3aeb: xor  a]
	jbsr	suspend_this_task_B05A            	| [$3aec: call suspend_this_task_B05A]
	move.l	(sp)+,a3                        	| [$3aef: pop  iy]
	cmp.b	#0x03,d0                         	| [$3af1: cp   $03]
	jeq	l_3bec                             	| [$3af3: jp   z,$3BEC]
	cmp.b	#0x04,d0                         	| [$3af6: cp   $04]
	jeq	l_3bec                             	| [$3af8: jp   z,$3BEC]
	cmp.b	#0x05,d0                         	| [$3afb: cp   $05]
	jeq	l_3bec                             	| [$3afd: jp   z,$3BEC]
	cmp.b	#0x08,d0                         	| [$3b00: cp   $08]
	jeq	l_3bf8                             	| [$3b02: jp   z,$3BF8]
	cmp.b	#0x10,d0                         	| [$3b05: cp   $10]
	jeq	l_3bec                             	| [$3b07: jp   z,$3BEC]
	cmp.b	#0x11,d0                         	| [$3b0a: cp   $11]
	jeq	l_3bf2                             	| [$3b0c: jp   z,$3BF2]
	cmp.b	#0x0D,d0                         	| [$3b0f: cp   $0D]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3b11: call nz,display_error_text_B075]
0:
	jbsr	handle_player_movement_3ea7                            	| [$3b14: call $3EA7]
	jbsr	l_479a                            	| [$3b17: call $479A]
	jbsr	l_4663                            	| [$3b1a: call $4663]
	jbsr	check_if_move_warrants_a_kiai_409d                            	| [$3b1d: call $409D]
	jbsr	l_40b3                            	| [$3b20: call $40B3]
	* subsequent displays of white/red CPU player
	jbsr	display_player_sprite_4153                            	| [$3b23: call $4153]
	jbsr	test_player_hits_4256                            	| [$3b26: call $4256]
	tst.b	d0                               	| [$3b29: and  a]
	jeq	l_3bc7                             	| [$3b2a: jp   z,$3BC7]

	* this part is only activated when a player is hit
	
	move.l	a3,-(sp)                        	| [$3b2d: push iy]

	move.l	a0,-(sp)                        	| [$3b2f: push hl]
	move.w	d0,-(sp)                        	| [$3b30: push af]
	move.b	#0x03,d0                        	| [$3b31: ld   a,$03]
	move.b	#0x09,d1                        	| [$3b33: ld   b,$09]
	jbsr	task_manipulation_B05D            	| [$3b35: call task_manipulation_B05D]
	tst.b	d0                               	| [$3b38: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3b39: call nz,display_error_text_B075]
0:
	move.w	(sp)+,d0                        	| [$3b3c: pop  af]
	move.l	(sp)+,a0                        	| [$3b3d: pop  hl]
	move.l	(sp)+,a3                        	| [$3b3e: pop  iy]
	move.b	d0,d1                           	| [$3b40: ld   b,a]
	move.b	current_task_index_C028,d0   	| [$3b41: ld   a,(current_task_index_C028)]
	* switch 0xA and 0xB (players)
	cmp.b	#0x0A,d0                         	| [$3b44: cp   $0A]
	jeq	l_3b4d                             	| [$3b48: jp   z,$3B4D]
	move.b	#0x0A,d0                        	| [$3b4b: ld   a,$0A]
	bra.b	0f
l_3b4d:
	move.b	#0x0B,d0                        	| [$3b46: ld   a,$0B]
0:
	move.l	a0,-(sp)                        	| [$3b4d: push hl]
	movem.w	d1/d2,-(sp)                    	| [$3b4e: push bc]

	move.l	a3,-(sp)                        	| [$3b4f: push iy]
	jbsr	task_manipulation_B05D            	| [$3b51: call task_manipulation_B05D]
	tst.b	d0                               	| [$3b54: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3b55: call nz,display_error_text_B075]
0:
	move.b	#0x08,d0                        	| [$3b58: ld   a,$08]
	move.b	#0x09,d1                        	| [$3b5a: ld   b,$09]
	jbsr	task_manipulation_B05D            	| [$3b5c: call task_manipulation_B05D]
	tst.b	d0                               	| [$3b5f: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3b60: call nz,display_error_text_B075]
0:
	move.b	#0x09,d0                        	| [$3b63: ld   a,$09]
	move.b	#0x09,d1                        	| [$3b65: ld   b,$09]
	jbsr	task_manipulation_B05D            	| [$3b67: call task_manipulation_B05D]
	tst.b	d0                               	| [$3b6a: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3b6b: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$3b6e: pop  iy]
	move.b	(0x07,a3),d0                    	| [$3b70: ld   a,(iy+$07)]
	move.b	d0,unknown_C1E7                 	| [$3b73: ld   (unknown_C1E7),a]
	move.b	(0x08,a3),d0                    	| [$3b76: ld   a,(iy+$08)]
	move.b	d0,unknown_C1E8                 	| [$3b79: ld   (unknown_C1E8),a]
	jbsr	l_4487                            	| [$3b7c: call $4487]
	movem.w	(sp)+,d1/d2                    	| [$3b7f: pop  bc]
	move.b	#0x07,d0                        	| [$3b80: ld   a,$07]

	move.l	a3,-(sp)                        	| [$3b82: push iy]
	jbsr	task_manipulation_B05D            	| [$3b84: call task_manipulation_B05D]
	tst.b	d0                               	| [$3b87: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3b88: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$3b8b: pop  iy]
	move.l	(sp)+,a0                        	| [$3b8d: pop  hl]
	lea	players_type_human_or_cpu_flags_C02D,a2	| [$3b8e: ld   ix,players_type_human_or_cpu_flags_C02D]
	move.b	current_task_index_C028,d0   	| [$3b92: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$3b95: cp   $0A]
	jne	l_3ba4                             	| [$3b97: jp   nz,$3BA4]
	btst.b	#2,(0x00,a2)                    	| [$3b9a: bit  2,(ix+$00)]
	jeq	l_3c15                             	| [$3b9e: jp   z,$3C15]
	jra	l_3bb0                             	| [$3ba1: jp   $3BB0]
l_3ba4:
	cmp.b	#0x0B,d0                         	| [$3ba4: cp   $0B]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3ba6: call nz,display_error_text_B075]
0:
	btst.b	#3,(0x00,a2)                    	| [$3ba9: bit  3,(ix+$00)]
	jeq	l_3c15                             	| [$3bad: jp   z,$3C15]
l_3bb0:
	* PROBLEM HERE A0 -> D5, we'll see later
	jbsr	osd_break
	move.b	d5,d1                           	| [$3bb0: ld   b,h]
	move.b	#0x04,d0                        	| [$3bb1: ld   a,$04]
	movem.w	d1/d2,-(sp)                    	| [$3bb3: push bc]

	move.l	a3,-(sp)                        	| [$3bb4: push iy]
	jbsr	task_manipulation_B05D            	| [$3bb6: call task_manipulation_B05D]
	tst.b	d0                               	| [$3bb9: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3bba: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$3bbd: pop  iy]
	movem.w	(sp)+,d1/d2                    	| [$3bbf: pop  bc]
	move.b	d1,d0                           	| [$3bc0: ld   a,b]
	jbsr	l_b018                            	| [$3bc1: call $B018]
	jra	l_3c15                             	| [$3bc4: jp   $3C15]
l_3bc7:
	jbsr	player_management_routine_46FD    	| [$3bc7: call player_management_routine_46FD]
	tst.b	d0                               	| [$3bca: and  a]
	jeq	l_3ad4                             	| [$3bcb: jp   z,$3AD4]
	cmp.b	#0x03,d0                         	| [$3bce: cp   $03]
	jeq	l_3bec                             	| [$3bd0: jp   z,$3BEC]
	cmp.b	#0x04,d0                         	| [$3bd3: cp   $04]
	jeq	l_3bec                             	| [$3bd5: jp   z,$3BEC]
	cmp.b	#0x05,d0                         	| [$3bd8: cp   $05]
	jeq	l_3bec                             	| [$3bda: jp   z,$3BEC]
	cmp.b	#0x08,d0                         	| [$3bdd: cp   $08]
	jeq	l_3bf8                             	| [$3bdf: jp   z,$3BF8]
	cmp.b	#0x11,d0                         	| [$3be2: cp   $11]
	jeq	l_3bf2                             	| [$3be4: jp   z,$3BF2]
	cmp.b	#0x10,d0                         	| [$3be7: cp   $10]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3be9: call nz,display_error_text_B075]
0:
l_3bec:
	jbsr	l_4405                            	| [$3bec: call $4405]
	jra	l_3c15                             	| [$3bef: jp   $3C15]
l_3bf2:
	jbsr	l_4487                            	| [$3bf2: call $4487]
	jra	l_3c30                             	| [$3bf5: jp   $3C30]
l_3bf8:
	jbsr	l_4487                            	| [$3bf8: call $4487]

	move.l	a3,-(sp)                        	| [$3bfb: push iy]
	move.b	#0x09,d0                        	| [$3bfd: ld   a,$09]
	move.b	#0x09,d1                        	| [$3bff: ld   b,$09]
	jbsr	task_manipulation_B05D            	| [$3c01: call task_manipulation_B05D]
	tst.b	d0                               	| [$3c04: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3c05: call nz,display_error_text_B075]
0:
	move.b	#0x08,d0                        	| [$3c08: ld   a,$08]
	move.b	#0x09,d1                        	| [$3c0a: ld   b,$09]
	jbsr	task_manipulation_B05D            	| [$3c0c: call task_manipulation_B05D]
	tst.b	d0                               	| [$3c0f: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3c10: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$3c13: pop  iy]
l_3c15:
	clr.b	d0                               	| [$3c15: xor  a]

	move.l	a3,-(sp)                        	| [$3c16: push iy]
	jbsr	suspend_this_task_B05A            	| [$3c18: call suspend_this_task_B05A]
	move.l	(sp)+,a3                        	| [$3c1b: pop  iy]
	cmp.b	#0x0D,d0                         	| [$3c1d: cp   $0D]
	jeq	l_3c15                             	| [$3c1f: jp   z,$3C15]
	tst.b	d0                               	| [$3c22: and  a]
	jeq	l_3aa5                             	| [$3c23: jp   z,$3AA5]
	cmp.b	#0x13,d0                         	| [$3c26: cp   $13]
	jeq	l_3c3b                             	| [$3c28: jp   z,$3C3B]
	cmp.b	#0x12,d0                         	| [$3c2b: cp   $12]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3c2d: call nz,display_error_text_B075]
0:
l_3c30:
	move.b	#0x01,d0                        	| [$3c30: ld   a,$01]
	jbsr	play_sound_B072                   	| [$3c32: call play_sound_B072]
	jbsr	l_44b9                            	| [$3c35: call $44B9]
	jra	l_3c3e                             	| [$3c38: jp   $3C3E]
l_3c3b:
	jbsr	l_451d                            	| [$3c3b: call $451D]
l_3c3e:
	jbsr	task_yield_B051                   	| [$3c3e: call task_yield_B051]
l_3c41:
	rts                                    	| [$3c41: ret]
	move.b	background_and_state_bits_C911,d0	| [$3c42: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$3c45: res  7,a]
	cmp.b	#0x01,d0                         	| [$3c47: cp   $01]
	jne	l_3ca7                             	| [$3c49: jp   nz,$3CA7]
	lea	game_mem+0x3CA8,a2                  	| [$3c4c: ld   ix,table_3CA8]
	move.b	current_task_index_C028,d0   	| [$3c50: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$3c53: cp   $0A]
	jeq	l_3c5d                             	| [$3c55: jp   z,$3C5D]
	move.w	#0x0004,d3                      	| [$3c58: ld   de,$0004] 4
	add.w	d3,a2                            	| [$3c5b: add  ix,de]
l_3c5d:

	move.l	a3,a1                        	| [$3c5d: push iy]
	                        	| [$3c5f: pop  de]
	move.w	#0x0007,a0                      	| [$3c60: ld   hl,$0007] 7
	add.l	a1,a0                            	| [$3c63: add  hl,de]
	exg	a1,a0                              	| [$3c64: ex   de,hl]

	move.l	a2,a0                        	| [$3c65: push ix]
											| [$3c67: pop  hl]
	move.w	#0x0004,d1                      	| [$3c68: ld   bc,$0004] 4
	jbsr	ldir                              	| [$3c6b: ldir]
	jbsr	l_40b3                            	| [$3c6d: call $40B3]
	jbsr	display_player_sprite_4153                            	| [$3c70: call $4153]
	jbsr	player_management_routine_46FD    	| [$3c73: call player_management_routine_46FD]
l_3c76:
	jbsr	handle_player_movement_3ea7                            	| [$3c76: call $3EA7]
	jbsr	check_if_move_warrants_a_kiai_409d                            	| [$3c79: call $409D]
	jbsr	l_40b3                            	| [$3c7c: call $40B3]
	jbsr	display_player_sprite_4153                            	| [$3c7f: call $4153]
	jbsr	player_management_routine_46FD    	| [$3c82: call player_management_routine_46FD]
	tst.b	d0                               	| [$3c85: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3c86: call nz,display_error_text_B075]
0:
	move.b	(0x08,a3),d5                    	| [$3c8c: ld   h,(iy+$08)]
	bclr.b	#7,d5                           	| [$3c8f: res  7,h]
	lsl.w	#8,d5
	move.b	(0x07,a3),d5                    	| [$3c89: ld   l,(iy+$07)]
	move.w	#0x1BB1,d3                      	| [$3c91: ld   de,$1BB1] immediate value
	                               	| [$3c94: and  a]
	cmp.w	d3,d5					| [sbc  hl,de]
	jne	l_3c76                             	| [$3c97: jp   nz,$3C76]

	move.l	a3,-(sp)                        	| [$3c9a: push iy]
	move.b	#0x08,d0                        	| [$3c9c: ld   a,$08]
	jbsr	suspend_this_task_B05A            	| [$3c9e: call suspend_this_task_B05A]
	tst.b	d0                               	| [$3ca1: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3ca2: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$3ca5: pop  iy]
l_3ca7:
	rts                                    	| [$3ca7: ret]
	
init_title_screen_3cb0:
	move.b	background_and_state_bits_C911,d0	| [$3cb0: ld   a,(background_and_state_bits_C911)]
	and.b	#0x7F,d0                         	| [$3cb3: and  $7F]
	cmp.b	#0x50,d0                         	| [$3cb5: cp   $50]
	jcs	l_3cd7                             	| [$3cb7: jp   c,$3CD7]
	sub.b	#0x50,d0                         	| [$3cba: sub  $50]
* demo fight (blue title screen) There's a table but there is probably only
* one title screen remaining. Others are leftovers from first version where
* there were more demos in attract mode.
	lea	game_mem+0x3D17,a0                  	| [$3cbc: ld   hl,table_3D17]
	move.b	current_task_index_C028,d0   	| [$3cbf: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$3cc2: cp   $0A]
	jeq	l_3cca                             	| [$3cc4: jp   z,$3CCA]
	lea	game_mem+0x3D27,a0                  	| [$3cc7: ld   hl,table_3D27]
l_3cca:
	move.b	background_and_state_bits_C911,d0	| [$3cca: ld   a,(background_and_state_bits_C911)]
	and.b	#0x7F,d0                         	| [$3ccd: and  $7F]
	sub.b	#0x50,d0                         	| [$3ccf: sub  $50]
	jbsr	init_player_data_3D00             	| [$3cd1: call init_player_data_3D00]
	jra	l_3cfd                             	| [$3cd4: jp   $3CFD]
* normal init
l_3cd7:
	lea	game_mem+0x3D37,a0                  	| [$3cd7: ld   hl,table_3D37]
	cmp.b	#0x30,d0                         	| [$3cda: cp   $30]
	bcs.b	0f
	jbsr	display_error_text_B075           	| [$3cdc: call nc,display_error_text_B075]
0:
	cmp.b	#0x20,d0                         	| [$3cdf: cp   $20]
	jcs	l_3ce6                             	| [$3ce1: jp   c,$3CE6]
	sub.b	#0x20,d0                         	| [$3ce4: sub  $20]
* init player X with $30 coord (+$10)
l_3ce6:
	jbsr	init_player_data_3D00             	| [$3ce6: call init_player_data_3D00]
	move.b	current_task_index_C028,d0   	| [$3ce9: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$3cec: cp   $0A]
	jeq	l_3cfd                             	| [$3cee: jp   z,$3CFD]
* player 2: symmetrize
	bset.b	#7,(0x08,a3)                    	| [$3cf1: set  7,(iy+$08)] set direction facing left
	move.b	(0x09,a3),d0                    	| [$3cf5: ld   a,(iy+$09)]
	neg.b	d0                               	| [$3cf8: neg] negate 255-x or something
	move.b	d0,(0x09,a3)                    	| [$3cfa: ld   (iy+$09),a]
l_3cfd:
	rts                                    	| [$3cfd: ret]
	
* init player x,y whatever
* < a: background image / level index
* < hl: table to pick
* < iy: player struct to initialize (C240, C220)
init_player_data_3D00:
	add.b	d0,d0                            	| [$3d00: add  a,a]
	add.b	d0,d0                            	| [$3d01: add  a,a]
	clr.w	d1                               	| [$3d03: ld   b,$00]
	move.b	d0,d1                           	| [$3d02: ld   c,a]
	add.w	d1,a0                            	| [$3d05: add  hl,bc]
	move.l	a3,a2                        	| [$3d06: push iy]
	                        	| [$3d08: pop  ix]
	move.b	#0x07,d1                        	| [$3d0a: ld   c,$07]
	add.w	d1,a2                            	| [$3d0c: add  ix,bc]

	move.l	a2,a1                        	| [$3d0e: push ix]
											| [$3d10: pop  de]
	move.w	#0x0004,d1                      	| [$3d11: ld   bc,$0004] 4
* copy 4 values from for ex 3D53 to C247
	jbsr	ldir                              	| [$3d14: ldir]
	rts                                    	| [$3d16: ret]
	
* probably move related, but not A.I. related (player movement)
l_3db7:
	jbsr	load_iy_with_player_structure_B04B	| [$3db7: call load_iy_with_player_structure_B04B]
	move.b	current_task_index_C028,d0   	| [$3dba: ld   a,(current_task_index_C028)]
	cmp.b	#0x08,d0                         	| [$3dbd: cp   $08]
	jne	l_3dc8                             	| [$3dbf: jp   nz,$3DC8]
	jbsr	read_p1_controls_B0B7             	| [$3dc2: call read_p1_controls_B0B7]
	jra	l_3dd0                             	| [$3dc5: jp   $3DD0]
l_3dc8:
	cmp.b	#0x09,d0                         	| [$3dc8: cp   $09]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3dca: call nz,display_error_text_B075]
0:
	jbsr	read_p2_controls_B0BA             	| [$3dcd: call read_p2_controls_B0BA]
l_3dd0:
	* look for joystick combination in move table
	move.b	#0x19,d1                        	| [$3dd0: ld   b,$19]
	lea	joy_combo_table_3DF8(pc),a0                  	| [$3dd2: ld   hl,joy_combo_table_3DF8]
	move.w	#0x0003,d3                      	| [$3dd5: ld   de,$0003] 3
l_3dd8:
	cmp.b	(a0),d0                          	| [$3dd8: cp   (hl)]
	jeq	l_3de3                             	| [$3dd9: jp   z,$3DE3]
	add.w	d3,a0                            	| [$3ddc: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3dd8                             	| [$3ddd: djnz $3DD8]
	clr.b	d0                               	| [$3ddf: xor  a]
	jra	l_3df7                             	| [$3de0: jp   $3DF7]
l_3de3:
	move.b	d0,d1                           	| [$3de3: ld   b,a]
	addq.w	#1,a0                           	| [$3de4: inc  hl]

	movem.l	a3,-(sp)                        	| [$3de5: push iy]
	move.w	#0x0040,d3                      	| [$3de7: ld   de,$0040] 64
	add.w	d3,a3                            	| [$3dea: add  iy,de]
	btst.b	#7,(0x08,a3)                    	| [$3dec: bit  7,(iy+$08)]
	movem.l	(sp)+,a3                        	| [$3df0: pop  iy]
	jeq	l_3df6                             	| [$3df2: jp   z,$3DF6]
	addq.w	#1,a0                           	| [$3df5: inc  hl]
l_3df6:
	move.b	(a0),d0                         	| [$3df6: ld   a,(hl)]
l_3df7:
	rts                                    	| [$3df7: ret]

joy_combo_table_3DF8:
	dc.b	0x00,0x00,0x00,0x20,0x01,0x02,0x10,0x02 | joy_combo_table_3DF8
	dc.b	0x01,0x40,0x03,0x03,0x80,0x04,0x04,0x02 | $3e00
	dc.b	0x05,0x0a,0x22,0x06,0x0c,0x12,0x07,0x0b | $3e08
	dc.b	0x42,0x08,0x0d,0x82,0x09,0x0e,0x01,0x0a | $3e10
	dc.b	0x05,0x21,0x0b,0x07,0x11,0x0c,0x06,0x41 | $3e18
	dc.b	0x0d,0x08,0x81,0x0e,0x09,0x04,0x0f,0x0f | $3e20
	dc.b	0x24,0x10,0x11,0x14,0x11,0x10,0x44,0x12 | $3e28
	dc.b	0x12,0x84,0x13,0x13,0x08,0x14,0x14,0x28 | $3e30
	dc.b	0x15,0x16,0x18,0x16,0x15,0x48,0x17,0x17 | $3e38
	dc.b	0x88,0x18,0x18 | $3e40
	.align	2

handle_player_hit_sequence_3e43:
	* check if current player move (falling when struck
	* from a blow) is in a table
	lea	game_mem+0x3E97,a2                  	| [$3e43: ld   ix,table_3E97]
	*bsr		load_a0_from_a3_structure_07_address_mask: here we don't care about pointer
	move.b	(0x07,a3),d6                    	| [$3e47: ld   l,(iy+$07)]
	move.b	(0x08,a3),d5                    	| [$3e4a: ld   h,(iy+$08)]
	bclr.b	#7,d5                           	| [$3e4d: res  7,h]

	jbsr	check_hl_in_ix_list_B009          	| [$3e4f: call check_hl_in_ix_list_B009]
	tst.b	d0                               	| [$3e52: and  a]
	jeq	l_3e7d                             	| [$3e53: jp   z,$3E7D]
	* it's in the table
	lea	game_mem+0x3D37,a2                  	| [$3e56: ld   ix,table_3D37]
	move.b	background_and_state_bits_C911,d0	| [$3e5a: ld   a,(background_and_state_bits_C911)]
	and.b	#0x7F,d0                         	| [$3e5d: and  $7F]
	cmp.b	#0x20,d0                         	| [$3e5f: cp   $20]
	bcs.b	0f
	jbsr	display_error_text_B075           	| [$3e61: call nc,display_error_text_B075]
0:
	add.b	d0,d0                            	| [$3e64: add  a,a]
	add.b	d0,d0                            	| [$3e65: add  a,a]
	clr.w	d1                               	| [$3e67: ld   b,$00]
	move.b	d0,d1                           	| [$3e66: ld   c,a]
	add.w	d1,a2                            	| [$3e69: add  ix,bc]
	move.b	(0x0a,a3),d0                    	| [$3e6b: ld   a,(iy+$0a)]
	cmp.b	(0x03,a2),d0                     	| [$3e6e: cp   (ix+$03)]
	jeq	l_3e7d                             	| [$3e71: jp   z,$3E7D]
	jcs	l_3e86                             	| [$3e74: jp   c,$3E86]
	move.b	(0x03,a2),d0                    	| [$3e77: ld   a,(ix+$03)]
	move.b	d0,(0x0a,a3)                    	| [$3e7a: ld   (iy+$0a),a]
l_3e7d:
	clr.b	(0x14,a3)                        	| [$3e7d: ld   (iy+$14),$00]
	clr.b	d0                               	| [$3e81: ld   a,$00]
	jra	l_3e94                             	| [$3e83: jp   $3E94]
l_3e86:
	move.b	(0x0a,a3),d0                    	| [$3e86: ld   a,(iy+$0a)]
	addq.b	#0x02,d0                        	| [$3e89: add  a,$02]
	move.b	d0,(0x0a,a3)                    	| [$3e8b: ld   (iy+$0a),a]
	move.b	#0xFF,(0x14,a3)                 	| [$3e8e: ld   (iy+$14),$FF]
	st.b	d0                                	| [$3e92: ld   a,$FF]
l_3e94:
	rts                                    	| [$3e94: ret]

handle_player_movement_3ea7:
	jbsr	handle_player_hit_sequence_3e43                            	| [$3ea7: call $3E43]
	tst.b	d0                               	| [$3eaa: and  a]
	jne	l_3f92                             	| [$3eab: jp   nz,$3F92]
	* load current move pointer/structure
	bsr		load_a0_from_a3_structure_07_address_mask   	| [$3eae: ld   l,(iy+$07)]
															| [$3eb1: ld   h,(iy+$08)]
												| [$3eb4: res  7,h]

	move.l	a0,a2                        	| [$3eb6: push hl]
											| [$3eb7: pop  ix]
	bsr		load_a0_from_a2_structure_06_address
										| [$3eb9: ld   l,(ix+$06)]
										| [$3ebc: ld   h,(ix+$07)]
	move.w	#0x0007,d3                      	| [$3ebf: ld   de,$0007] 7
	* read current attack/move
	move.b	(0x0b,a3),d0                    	| [$3ec2: ld   a,(iy+$0b)]
	move.b	d0,d1                           	| [$3ec5: ld   b,a]
l_3ec6:
	move.b	(a0),d0                         	| [$3ec6: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$3ec7: cp   $FF]
	jeq	l_3ed4                             	| [$3ec9: jp   z,$3ED4]
	cmp.b	d1,d0                            	| [$3ecc: cp   b]
	jeq	l_3ed4                             	| [$3ecd: jp   z,$3ED4]
	add.w	d3,a0                            	| [$3ed0: add  hl,de]
	jra	l_3ec6                             	| [$3ed1: jp   $3EC6]
l_3ed4:

	movem.l	a0,-(sp)                        	| [$3ed4: push hl]
	lea	walk_frames_list_AA3B(pc),a2       	| [$3ed5: ld   ix,walk_frames_list_AA3B]
	*bsr		load_a0_from_a3_structure_07_address_mask           	| we don't need the pointer
	move.b	(0x07,a3),d6                    	| [$3ed9: ld   l,(iy+$07)]
	move.b	(0x08,a3),d5                    	| [$3edc: ld   h,(iy+$08)]
	bclr.b	#7,d5                           	| [$3edf: res  7,h]
	jbsr	check_hl_in_ix_list_B009          	| [$3ee1: call check_hl_in_ix_list_B009]
	movem.l	(sp)+,a0                        	| [$3ee4: pop  hl]
	tst.b	d0                               	| [$3ee5: and  a]
	jeq	l_3f34                             	| [$3ee6: jp   z,$3F34]
	bsr		load_a1_from_a3_structure_07_address_mask
											| [$3ee9: ld   e,(iy+$07)]
											| [$3eec: ld   d,(iy+$08)]
											| [$3eef: res  7,d]
	move.l	a1,a2                        	| [$3ef1: push de]
											| [$3ef2: pop  ix]
	move.b	(0x08,a2),d0                    	| [$3ef4: ld   a,(ix+$08)]
	cmp.b	#0x20,d0                         	| [$3ef7: cp   $20]
	jeq	l_3f34                             	| [$3ef9: jp   z,$3F34]
* check attack distance (0,1,2 at C26C for player 2)
	move.b	(0x0c,a3),d0                    	| [$3efc: ld   a,(iy+$0c)]
	cmp.b	#0x02,d0                         	| [$3eff: cp   $02]
	jne	l_3f34                             	| [$3f01: jp   nz,$3F34]
* player are close enough for long range attacks
* (probably unrelated to A.I. more for front kick / reverse punch variation)
	move.b	(0x0b,a3),d1                    	| [$3f04: ld   b,(iy+$0b)]
	subq.b	#1,d1                           	| [$3f07: dec  b]
	jne	l_3f34                             	| [$3f08: jp   nz,$3F34]
	lea	player_1_struct_C240,a2        	| [$3f0b: ld   ix,player_1_struct_C240]
	move.b	current_task_index_C028,d0   	| [$3f0f: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$3f12: cp   $0A]
	jne	l_3f1b                             	| [$3f14: jp   nz,$3F1B]
	lea	player_2_struct_C260,a2        	| [$3f17: ld   ix,player_2_struct_C260]
l_3f1b:
	bsr		load_a1_from_a2_structure_07_address_mask   	| [$3f1b: ld   e,(ix+$07)]
	                 	| [$3f1e: ld   d,(ix+$08)]
	                 	| [$3f21: res  7,d]
	move.l	a1,a2                        	| [$3f23: push de]
	                        	| [$3f24: pop  ix]
	move.b	(0x08,a2),d2                    	| [$3f26: ld   c,(ix+$08)]
	btst.b	#7,d2                           	| [$3f29: bit  7,c]
	jeq	l_3f34                             	| [$3f2b: jp   z,$3F34]
	jbsr	l_3f93                            	| [$3f2e: call $3F93]
	jra	l_3f92                             	| [$3f31: jp   $3F92]

l_3f34:
	move.b	(0x0c,a3),d0                    	| [$3f34: ld   a,(iy+$0c)]
	addq.w	#1,a0                           	| [$3f37: inc  hl]
	tst.b	d0                               	| [$3f38: and  a]
	jeq	l_3f4a                             	| [$3f39: jp   z,$3F4A]
	cmp.b	#0x03,d0                         	| [$3f3c: cp   $03]
	jcc	l_3f4a                             	| [$3f3e: jp   nc,$3F4A]
	addq.w	#2,a0                           	| [$3f41: inc  hl] * 2
	cmp.b	#0x01,d0                         	| [$3f43: cp   $01]
	jeq	l_3f4a                             	| [$3f45: jp   z,$3F4A]
	addq.w	#2,a0                           	| [$3f48: inc  hl] * 2
l_3f4a:
	move.b	(a0)+,d4                         	| [$3f4a: ld   e,(hl)]
	                           	| [$3f4b: inc  hl]
	move.b	(a0),d3                         	| [$3f4c: ld   d,(hl)]
	bclr.b	#7,d3                           	| [$3f4f: res  7,h]
	move.w	d3,-(sp)
	bsr		change_d3_d4_to_d3_16
	move.l	d3,a1
	move.w	(sp)+,d3
	add.l	#game_mem,a1
	move.l	a1,a0                        	| [$3f4d: push de]
	                        	| [$3f4e: pop  hl]

	move.l	a0,a2                        	| [$3f51: push hl]
	                        	| [$3f52: pop  ix]
	move.b	(0x08,a3),d0                    	| [$3f54: ld   a,(iy+$08)]
	eor.b	d3,d0                            	| [$3f57: xor  d]
	jmi	l_3f76                             	| [$3f58: jp   m,$3F76]
	* new movement is computed, store it
	bsr		store_a0_in_a3_structure_07_address      	| [$3f5b: ld   (iy+$07),l]
										| [$3f5e: ld   (iy+$08),h]
	move.b	(0x09,a3),d0                    	| [$3f61: ld   a,(iy+$09)]
	add.b	(0x02,a2),d0                     	| [$3f64: add  a,(ix+$02)]
* write current x position
	move.b	d0,(0x09,a3)                    	| [$3f67: ld   (iy+$09),a]
	move.b	(0x0a,a3),d0                    	| [$3f6a: ld   a,(iy+$0a)]
	add.b	(0x03,a2),d0                     	| [$3f6d: add  a,(ix+$03)]
	move.b	d0,(0x0a,a3)                    	| [$3f70: ld   (iy+$0a),a]
	jra	l_3f92                             	| [$3f73: jp   $3F92]
l_3f76:
	move.b	d4,(0x07,a3)                    	| [$3f76: ld   (iy+$07),e]
	bset.b	#7,d3                           	| [$3f79: set  7,d]
	move.b	d3,(0x08,a3)                    	| [$3f7b: ld   (iy+$08),d]
	move.b	(0x02,a2),d0                    	| [$3f7e: ld   a,(ix+$02)]
	neg.b	d0                               	| [$3f81: neg]
	add.b	(0x09,a3),d0                     	| [$3f83: add  a,(iy+$09)]
	move.b	d0,(0x09,a3)                    	| [$3f86: ld   (iy+$09),a]
	move.b	(0x0a,a3),d0                    	| [$3f89: ld   a,(iy+$0a)]
	add.b	(0x03,a2),d0                     	| [$3f8c: add  a,(ix+$03)]
	move.b	d0,(0x0a,a3)                    	| [$3f8f: ld   (iy+$0a),a]
l_3f92:
	rts                                    	| [$3f92: ret]
l_3f93:
	lea	temp_numeric_buffer_CF00,a2    	| [$3f93: ld   ix,temp_numeric_buffer_CF00]
	bclr.b	#7,d2                           	| [$3f97: res  7,c]
	move.b	(0x07,a3),d0                    	| [$3f99: ld   a,(iy+$07)]
	move.b	d0,(0x00,a2)                    	| [$3f9c: ld   (ix+$00),a]
	move.b	(0x08,a3),d0                    	| [$3f9f: ld   a,(iy+$08)]
	move.b	d0,(0x01,a2)                    	| [$3fa2: ld   (ix+$01),a]
	move.b	(0x09,a3),d0                    	| [$3fa5: ld   a,(iy+$09)]
	move.b	d0,(0x02,a2)                    	| [$3fa8: ld   (ix+$02),a]
	move.b	(0x0a,a3),d0                    	| [$3fab: ld   a,(iy+$0a)]
	move.b	d0,(0x03,a2)                    	| [$3fae: ld   (ix+$03),a]
	bsr		load_a0_from_a3_structure_07_address_mask
												| [$3fb1: ld   l,(iy+$07)]
												| [$3fb4: ld   h,(iy+$08)]
												| [$3fb7: res  7,h]
	move.b	(a0)+,d0                         	| [$3fb9: ld   a,(hl)]
	move.b	d0,(0x04,a2)                    	| [$3fba: ld   (ix+$04),a]
												| [$3fbd: inc  hl]
	move.b	(a0),d0                         	| [$3fbe: ld   a,(hl)]
	move.b	d0,(0x05,a2)                    	| [$3fbf: ld   (ix+$05),a]

	move.l	a2,-(sp)                        	| [$3fc2: push ix]
	lea	game_mem+0x4019,a2                  	| [$3fc4: ld   ix,table_4019]
	clr.w	d1                               	| [$3fc8: ld   b,$00]
	move.b	d2,d0                           	| [$3fca: ld   a,c]
	add.b	d0,d0                            	| [$3fcb: add  a,a]
	move.b	d0,d1                           	| [$3fcc: ld   c,a]
	add.w	d1,a2                            	| [$3fcd: add  ix,bc]
	move.b	(0x00,a2),d6                    	| [$3fcf: ld   l,(ix+$00)]
	move.b	(0x01,a2),d5                    	| [$3fd2: ld   h,(ix+$01)]
	move.b	d6,d0                           	| [$3fd5: ld   a,l]
	or.b	d5,d0                             	| [$3fd6: or   h]
	bne.b	0f
	jbsr	display_error_text_B075           	| [$3fd7: call z,display_error_text_B075]
0:
	move.b	d6,(0x07,a3)                    	| [$3fda: ld   (iy+$07),l]
	move.b	d5,(0x08,a3)                    	| [$3fdd: ld   (iy+$08),h]
	move.l	(sp)+,a2                        	| [$3fe0: pop  ix]
	move.b	(0x04,a2),d4                    	| [$3fe2: ld   e,(ix+$04)]
	move.b	(0x05,a2),d3                    	| [$3fe5: ld   d,(ix+$05)]

	move.l	a2,-(sp)                        	| [$3fe8: push ix]
	bsr		change_d5_d6_to_a0
	addq.w	#2,a0                           	| [$3fea: inc  hl] * 2
	move.b	(a0)+,d2                         	| [$3fec: ld   c,(hl)]
												| [$3fed: inc  hl]
	move.b	(a0),d1                         	| [$3fee: ld   b,(hl)]
	bsr		change_d1_d2_to_d1_16
	move.l	d1,a2                    	| [$3fef: push bc]
	add.l	#game_mem,a2                        	| [$3ff0: pop  ix]
	jbsr	key_value_linear_search_B00C      	| [$3ff2: call key_value_linear_search_B00C]
	tst.b	d0                               	| [$3ff5: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$3ff6: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a2                        	| [$3ff9: pop  ix]
	* D5.16 => D5/D6
	move.b	d5,d6
	lsr.w	#8,d5
	btst.b	#7,(0x01,a2)                    	| [$3ffb: bit  7,(ix+$01)]
	jeq	l_400a                             	| [$3fff: jp   z,$400A]
l_4002:
	bset.b	#7,(0x08,a3)                    	| [$4002: set  7,(iy+$08)]
	move.b	d6,d0                           	| [$4006: ld   a,l]
	neg.b	d0                               	| [$4007: neg]
	move.b	d0,d6                           	| [$4009: ld   l,a]
l_400a:
	move.b	d6,d0                           	| [$400a: ld   a,l]
	add.b	(0x02,a2),d0                     	| [$400b: add  a,(ix+$02)]
	move.b	d0,(0x09,a3)                    	| [$400e: ld   (iy+$09),a]
	move.b	d5,d0                           	| [$4011: ld   a,h]
	add.b	(0x03,a2),d0                     	| [$4012: add  a,(ix+$03)]
	move.b	d0,(0x0a,a3)                    	| [$4015: ld   (iy+$0a),a]
	rts                                    	| [$4018: ret]

check_if_move_warrants_a_kiai_409d:
	bsr		load_a0_from_a3_structure_07_address_mask	| [$409d: ld   l,(iy+$07)]
	                	| [$40a0: ld   h,(iy+$08)]
	                	| [$40a3: res  7,h]
									| [$40a5: ld   de,$0004] 4
	addq.w	#4,a0                            	| [$40a8: add  hl,de]
 	move.b	(a0),d0                         	| [$40a9: ld   a,(hl)]
	and.b	#0x7F,d0                         	| [$40aa: and  $7F]
	jeq	l_40b2                             	| [$40ac: jp   z,$40B2]
	jbsr	play_sound_B072                   	| [$40af: call play_sound_B072]
l_40b2:
	rts                                    	| [$40b2: ret]
	
* > A0:
l_40b3:
	move.b	background_and_state_bits_C911,d0	| [$40b3: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$40b6: res  7,a]
	cmp.b	#0x50,d0                         	| [$40b8: cp   $50]
	jeq	l_40dc                             	| [$40ba: jp   z,$40DC]
	cmp.b	#0x10,d0                         	| [$40bd: cp   $10]
	jcs	l_40dc                             	| [$40bf: jp   c,$40DC]
	lea	unknown_C71C,a2                	| [$40c2: ld   ix,unknown_C71C]
	and.b	#0xF0,d0                         	| [$40c6: and  $F0]
	cmp.b	#0x10,d0                         	| [$40c8: cp   $10]
	jeq	l_4146                             	| [$40ca: jp   z,$4146]
	move.b	current_task_index_C028,d0   	| [$40cd: ld   a,(current_task_index_C028)]
	cmp.b	#0x0B,d0                         	| [$40d0: cp   $0B]
	jeq	l_4146                             	| [$40d2: jp   z,$4146]
	lea	unknown_C74C,a2                	| [$40d5: ld   ix,unknown_C74C]
	jra	l_4146                             	| [$40d9: jp   $4146]
l_40dc:
	lea	unknown_C74C,a2                	| [$40dc: ld   ix,unknown_C74C]
	move.b	current_task_index_C028,d0   	| [$40e0: ld   a,(current_task_index_C028)]
	cmp.b	#0x0B,d0                         	| [$40e3: cp   $0B]
	jeq	l_4146                             	| [$40e5: jp   z,$4146]
	lea	unknown_C71C,a2                	| [$40e8: ld   ix,unknown_C71C]

	move.l	a3,-(sp)                        	| [$40ec: push iy]
	lea	player_2_struct_C260,a3        	| [$40ee: ld   iy,player_2_struct_C260]
	bsr		load_a0_from_a3_structure_07_address_mask                    	| [$40f2: ld   l,(iy+$07)]
												| [$40f5: ld   h,(iy+$08)]
												| [$40f8: res  7,h]
	move.w	#0x0008,d3                      	| [$40fa: ld   de,$0008] 8
	add.w	d3,a0                            	| [$40fd: add  hl,de]
	move.b	(a0),d0                         	| [$40fe: ld   a,(hl)]
	bclr.b	#7,d0                           	| [$40ff: res  7,a]
	move.l	(sp)+,a3                        	| [$4101: pop  iy]
	cmp.b	#0x20,d0                         	| [$4103: cp   $20]
	jeq	l_4132                             	| [$4105: jp   z,$4132]
	cmp.b	#0x02,d0                         	| [$4108: cp   $02]
	jeq	l_4132                             	| [$410a: jp   z,$4132]
	cmp.b	#0x09,d0                         	| [$410d: cp   $09]
	jeq	l_4132                             	| [$410f: jp   z,$4132]
	cmp.b	#0x0A,d0                         	| [$4112: cp   $0A]
	jeq	l_4132                             	| [$4114: jp   z,$4132]
	cmp.b	#0x0E,d0                         	| [$4117: cp   $0E]
	jeq	l_4132                             	| [$4119: jp   z,$4132]
	bsr		load_a0_from_a3_structure_07_address_mask  | [$411c: ld   l,(iy+$07)]
												| [$411f: ld   h,(iy+$08)]
												| [$4122: res  7,h]
	move.w	#0x0004,d3                      	| [$4124: ld   de,$0004] 4
	add.w	d3,a0                            	| [$4127: add  hl,de]
	move.b	(a0),d0                         	| [$4128: ld   a,(hl)]
	btst.b	#7,d0                           	| [$4129: bit  7,a]
	jne	l_4132                             	| [$412b: jp   nz,$4132]
	lea	unknown_C77C,a2                	| [$412e: ld   ix,unknown_C77C]
l_4132:

	move.l	a2,-(sp)                        	| [$4132: push ix]
	lea	unknown_C71C,a2                	| [$4134: ld   ix,unknown_C71C]
	clr.b	d0                               	| [$4138: xor  a]
	jbsr	l_4249                            	| [$4139: call $4249]
	lea	unknown_C77C,a2                	| [$413c: ld   ix,unknown_C77C]
	clr.b	d0                               	| [$4140: xor  a]
	jbsr	l_4249                            	| [$4141: call $4249]
	move.l	(sp)+,a2                        	| [$4144: pop  ix]
l_4146:
	move.b	#0x01,d2                        	| [$4146: ld   c,$01]
	move.b	current_task_index_C028,d0   	| [$4148: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$414b: cp   $0A]
	jeq	l_4152                             	| [$414d: jp   z,$4152]
	move.b	#0x02,d2                        	| [$4150: ld   c,$02]
l_4152:
	rts                                    	| [$4152: ret]

* < A3: C240 or C260 depending on player

display_player_sprite_4153:
	* given player struct in A3, return D5/D6 current frame
	jbsr	get_current_frame_contents_478D   	| [$4153: call get_current_frame_contents_478D]

	movem.w	d5/d6,-(sp)                        	| [$4156: push hl]
	                      	| [$4157: ld   de,$0200]
											| [$415a: and  a]
	sub.w	#2,d5								| [sbc  hl,de]  MSB
	move.b	#0x0D,d3                        	| [$415d: ld   d,$0D]
	jbsr	divide_hl_by_d_b003                            	| [$415f: call $B003]
	tst.b	d0                               	| [$4162: and  a]
	beq.b	0f
	* error if there's a remainder in the division!
	jbsr	display_error_text_B075           	| [$4163: call nz,display_error_text_B075]
0:
	bsr		change_d5_d6_to_d5_16
	* D5 times 4
	add.w	d5,d5		                     	| [$4166: add  hl,hl]
	add.w	d5,d5                           	| [$4167: add  hl,hl]
	move.w	#0x088D,d3                      	| [$4168: ld   de,$088D] offset
	add.w	d3,d5                            	| [$416b: add  hl,de]
	* convert d5 to real pointer
	bsr		change_d5_w_to_a0
	
	move.b	(a0),d0                         	| [$416c: ld   a,(hl)]
	btst.b	#7,(0x08,a3)                    	| [$416d: bit  7,(iy+$08)]
	jeq	l_4176                             	| [$4171: jp   z,$4176]
	neg.b	d0                               	| [$4174: neg]
l_4176:
	add.b	(0x09,a3),d0                     	| [$4176: add  a,(iy+$09)]
	sub.b	#0x20,d0                         	| [$4179: sub  $20]
	move.b	d0,(0x00,a2)                    	| [$417b: ld   (ix+$00),a]
	move.b	d0,(0x10,a2)                    	| [$417e: ld   (ix+$10),a]
	move.b	d0,(0x20,a2)                    	| [$4181: ld   (ix+$20),a]
	add.b	#0x10,d0                         	| [$4184: add  a,$10]
	move.b	d0,(0x04,a2)                    	| [$4186: ld   (ix+$04),a]
	move.b	d0,(0x14,a2)                    	| [$4189: ld   (ix+$14),a]
	move.b	d0,(0x24,a2)                    	| [$418c: ld   (ix+$24),a]
	add.b	#0x10,d0                         	| [$418f: add  a,$10]
	move.b	d0,(0x08,a2)                    	| [$4191: ld   (ix+$08),a]
	move.b	d0,(0x18,a2)                    	| [$4194: ld   (ix+$18),a]
	move.b	d0,(0x28,a2)                    	| [$4197: ld   (ix+$28),a]
	add.b	#0x10,d0                         	| [$419a: add  a,$10]
	move.b	d0,(0x0c,a2)                    	| [$419c: ld   (ix+$0c),a]
	move.b	d0,(0x1c,a2)                    	| [$419f: ld   (ix+$1c),a]
	move.b	d0,(0x2c,a2)                    	| [$41a2: ld   (ix+$2c),a]
	move.b	(0x0a,a3),d0                    	| [$41a5: ld   a,(iy+$0a)]
	sub.b	#0x30,d0                         	| [$41a8: sub  $30]
	move.b	d0,(0x03,a2)                    	| [$41aa: ld   (ix+$03),a]
	move.b	d0,(0x07,a2)                    	| [$41ad: ld   (ix+$07),a]
	move.b	d0,(0x0b,a2)                    	| [$41b0: ld   (ix+$0b),a]
	move.b	d0,(0x0f,a2)                    	| [$41b3: ld   (ix+$0f),a]
	add.b	#0x10,d0                         	| [$41b6: add  a,$10]
	move.b	d0,(0x13,a2)                    	| [$41b8: ld   (ix+$13),a]
	move.b	d0,(0x17,a2)                    	| [$41bb: ld   (ix+$17),a]
	move.b	d0,(0x1b,a2)                    	| [$41be: ld   (ix+$1b),a]
	move.b	d0,(0x1f,a2)                    	| [$41c1: ld   (ix+$1f),a]
	add.b	#0x10,d0                         	| [$41c4: add  a,$10]
	move.b	d0,(0x23,a2)                    	| [$41c6: ld   (ix+$23),a]
	move.b	d0,(0x27,a2)                    	| [$41c9: ld   (ix+$27),a]
	move.b	d0,(0x2b,a2)                    	| [$41cc: ld   (ix+$2b),a]
	move.b	d0,(0x2f,a2)                    	| [$41cf: ld   (ix+$2f),a]
	movem.w	(sp)+,d5/d6                        	| [$41d2: pop  hl]
	clr.b	d1                               	| [$41d3: ld   b,$00]
	bsr		change_d5_d6_to_a0
	move.b	(a0),d0                         	| [$41d5: ld   a,(hl)]
	rol.b	#2,d0                            	| [$41d6: rlca] * 2
	roxr.b	#1,d1                           	| [$41d8: rr   b]
	rol.b	#2,d0                            	| [$41da: rlca] * 2
	and.b	#0x70,d0                         	| [$41dc: and  $70]
	or.b	d1,d0                             	| [$41de: or   b]
	or.b	d2,d0                             	| [$41df: or   c]
	btst.b	#7,(0x08,a3)                    	| [$41e0: bit  7,(iy+$08)]
	jeq	l_41e9                             	| [$41e4: jp   z,$41E9]
	* flip sprites
	eor.b	#0x80,d0                         	| [$41e7: xor  $80]
l_41e9:
	move.l	a2,-(sp)                        	| [$41e9: push ix]
	addq.w	#2,a2                           	| [$41eb: inc  ix] * 2
	jbsr	l_4249                            	| [$41ef: call $4249]
	move.l	(sp)+,a2                        	| [$41f2: pop  ix]
	addq.w	#1,a0                           	| [$41f4: inc  hl]
	btst.b	#7,(0x08,a3)                    	| [$41f5: bit  7,(iy+$08)]
	jne	l_420d                             	| [$41f9: jp   nz,$420D]
	move.b	#0x0C,d1                        	| [$41fc: ld   b,$0C]
	move.w	#0x0004,d3                      	| [$41fe: ld   de,$0004] 4
l_4201:
	move.b	(a0)+,d0                         	| [$4201: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$4202: ld   (ix+$01),a]
	                           	| [$4205: inc  hl]
	add.w	d3,a2                            	| [$4206: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_4201                             	| [$4208: djnz $4201]
	jra	l_4248                             	| [$420a: jp   $4248]
l_420d:
	move.b	(a0)+,d3                         	| [$420d: ld   d,(hl)]
	move.b	d3,(0x0d,a2)                    	| [$420e: ld   (ix+$0d),d]
	                           	| [$4211: inc  hl]
	move.b	(a0)+,d3                         	| [$4212: ld   d,(hl)]
	move.b	d3,(0x09,a2)                    	| [$4213: ld   (ix+$09),d]
	                           	| [$4216: inc  hl]
	move.b	(a0)+,d3                         	| [$4217: ld   d,(hl)]
	move.b	d3,(0x05,a2)                    	| [$4218: ld   (ix+$05),d]
	                           	| [$421b: inc  hl]
	move.b	(a0)+,d3                         	| [$421c: ld   d,(hl)]
	move.b	d3,(0x01,a2)                    	| [$421d: ld   (ix+$01),d]
	                           	| [$4220: inc  hl]
	move.b	(a0)+,d3                         	| [$4221: ld   d,(hl)]
	move.b	d3,(0x1d,a2)                    	| [$4222: ld   (ix+$1d),d]
	                           	| [$4225: inc  hl]
	move.b	(a0)+,d3                         	| [$4226: ld   d,(hl)]
	move.b	d3,(0x19,a2)                    	| [$4227: ld   (ix+$19),d]
	                           	| [$422a: inc  hl]
	move.b	(a0)+,d3                         	| [$422b: ld   d,(hl)]
	move.b	d3,(0x15,a2)                    	| [$422c: ld   (ix+$15),d]
	                           	| [$422f: inc  hl]
	move.b	(a0)+,d3                         	| [$4230: ld   d,(hl)]
	move.b	d3,(0x11,a2)                    	| [$4231: ld   (ix+$11),d]
	                           	| [$4234: inc  hl]
	move.b	(a0)+,d3                         	| [$4235: ld   d,(hl)]
	move.b	d3,(0x2d,a2)                    	| [$4236: ld   (ix+$2d),d]
	                           	| [$4239: inc  hl]
	move.b	(a0)+,d3                         	| [$423a: ld   d,(hl)]
	move.b	d3,(0x29,a2)                    	| [$423b: ld   (ix+$29),d]
	                           	| [$423e: inc  hl]
	move.b	(a0)+,d3                         	| [$423f: ld   d,(hl)]
	move.b	d3,(0x25,a2)                    	| [$4240: ld   (ix+$25),d]
	                           	| [$4243: inc  hl]
	move.b	(a0),d3                         	| [$4244: ld   d,(hl)]
	move.b	d3,(0x21,a2)                    	| [$4245: ld   (ix+$21),d]
l_4248:
	rts                                    	| [$4248: ret]

l_4249:
	move.b	#0x0C,d1                        	| [$4249: ld   b,$0C]
	move.w	#0x0004,d3                      	| [$424b: ld   de,$0004] 4
l_424e:
	move.b	d0,(0x00,a2)                    	| [$424e: ld   (ix+$00),a]
	add.w	d3,a2                            	| [$4251: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_424e                             	| [$4253: djnz $424E]
	rts                                    	| [$4255: ret]
	

test_player_hits_4256:
	move.b	background_and_state_bits_C911,d0	| [$4256: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$4259: res  7,a]
	cmp.b	#0x10,d0                         	| [$425b: cp   $10]
	jcs	l_4264                             	| [$425d: jp   c,$4264]
	* we're in demo mode: no collision test
	clr.b	d0                               	| [$4260: xor  a]
	jra	l_43b6                             	| [$4261: jp   $43B6]
l_4264:
	lea	game_mem+0x43C7,a2                  	| [$4264: ld   ix,table_43C7]
	* we don't need A1 we need d3/d4 for search
	move.b	(0x07,a3),d4                    	| [$4268: ld   e,(iy+$07)]
	move.b	(0x08,a3),d3                    	| [$426b: ld   d,(iy+$08)]
	bclr.b	#7,d3                           	| [$426e: res  7,d]
	jbsr	key_value_linear_search_B00C      	| [$4270: call key_value_linear_search_B00C]
	tst.b	d0                               	| [$4273: and  a]
	jeq	l_427b                             	| [$4274: jp   z,$427B]
	clr.b	d0                               	| [$4277: xor  a]
	jra	l_43b6                             	| [$4278: jp   $43B6]
l_427b:

	move.l	a0,-(sp)                        	| [$427b: push hl]
	lea	game_mem+0x4C3F,a2                  	| [$427c: ld   ix,table_4C3F]
	* we don't need A1 we need d3/d4 for search
	move.b	(0x07,a3),d4                    	| [$4280: ld   e,(iy+$07)]
	move.b	(0x08,a3),d3                    	| [$4283: ld   d,(iy+$08)]
	bclr.b	#7,d3                           	| [$4286: res  7,d]
	jbsr	key_value_linear_search_B00C      	| [$4288: call key_value_linear_search_B00C]
	tst.b	d0                               	| [$428b: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$428c: call nz,display_error_text_B075]
0:
	move.b	(0x0a,a3),d0                    	| [$428f: ld   a,(iy+$0a)]
	add.b	d5,d0                            	| [$4292: add  a,h]
	move.b	d0,d4                           	| [$4293: ld   e,a]
	move.b	(0x09,a3),d0                    	| [$4294: ld   a,(iy+$09)]
	btst.b	#7,(0x08,a3)                    	| [$4297: bit  7,(iy+$08)]
	jne	l_42a2                             	| [$429b: jp   nz,$42A2]
	add.b	d6,d0                            	| [$429e: add  a,l]
	jra	l_42a3                             	| [$429f: jp   $42A3]
l_42a2:
	sub.b	d6,d0                            	| [$42a2: sub  l]
l_42a3:
	move.b	d0,d3                           	| [$42a3: ld   d,a]
	move.l	(sp)+,a0                        	| [$42a4: pop  hl]

	move.l	a3,-(sp)                        	| [$42a5: push iy]
	movem.w	d3-d6,-(sp)                    	| [$42a7: push de]
	move.l	a1,-(sp)                        	| [$42a7: push de]
	move.l	a0,-(sp)                        	| [$42a8: push hl]
	* backup in temp buffer for later
	move.l	a3,unknown_CF08                 	| [$42a9: ld   (unknown_CF08),iy]
	lea	player_2_struct_C260,a3        	| [$42ad: ld   iy,player_2_struct_C260]
	move.b	current_task_index_C028,d0   	| [$42b1: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$42b4: cp   $0A]
	jeq	l_42bd                             	| [$42b6: jp   z,$42BD]
	lea	player_1_struct_C240,a3        	| [$42b9: ld   iy,player_1_struct_C240]
l_42bd:
	jbsr	get_current_frame_contents_478D   	| [$42bd: call get_current_frame_contents_478D]
	lea	temp_numeric_buffer_CF00,a2    	| [$42c0: ld   ix,temp_numeric_buffer_CF00]
	sub.b	#2,d5   | msb 0x200 => 2
	            	| [$42c4: ld   de,$0200]
	              	| [$42c7: and  a]
					| [sbc  hl,de]
	move.b	#0x0D,d3                        	| [$42ca: ld   d,$0D]
	jbsr	divide_hl_by_d_b003                            	| [$42cc: call $B003]
	tst.b	d0                               	| [$42cf: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$42d0: call nz,display_error_text_B075]
0:
	bsr		change_d5_d6_to_d5_16
	add.w	d5,d5                            	| [$42d3: add  hl,hl]
	add.w	d5,d5                            	| [$42d4: add  hl,hl]
	add.l	#game_mem,d5
	move.l	d5,a0
												| [$42d5: ld   de,$088D] offset
	add.w	#0x88D,a0                            	| [$42d8: add  hl,de]
	addq.w	#3,a0                           	| [$42d9: inc  hl] * 3
	move.b	(0x0a,a3),d0                    	| [$42dc: ld   a,(iy+$0a)]
	add.b	(a0),d0                          	| [$42df: add  a,(hl)]
	move.b	d0,(0x02,a2)                    	| [$42e0: ld   (ix+$02),a]
	move.b	d0,(0x06,a2)                    	| [$42e3: ld   (ix+$06),a]
	move.b	(a0),d0                         	| [$42e6: ld   a,(hl)]
	neg.b	d0                               	| [$42e7: neg]
	move.b	d0,(0x03,a2)                    	| [$42e9: ld   (ix+$03),a]
	move.b	d0,(0x07,a2)                    	| [$42ec: ld   (ix+$07),a]
	lea	game_mem+0x43C5,a0                  	| [$42ef: ld   hl,table_43C5]
	move.b	(0x09,a3),d0                    	| [$42f2: ld   a,(iy+$09)]
	sub.b	(a0),d0                          	| [$42f5: sub  (hl)]
	move.b	d0,(0x00,a2)                    	| [$42f6: ld   (ix+$00),a]
	move.b	(a0),d0                         	| [$42f9: ld   a,(hl)]
	add.b	d0,d0                            	| [$42fa: add  a,a]
	move.b	d0,(0x01,a2)                    	| [$42fb: ld   (ix+$01),a]
	addq.w	#1,a0                           	| [$42fe: inc  hl]
	move.b	(0x09,a3),d0                    	| [$42ff: ld   a,(iy+$09)]
	sub.b	(a0),d0                          	| [$4302: sub  (hl)]
	move.b	d0,(0x04,a2)                    	| [$4303: ld   (ix+$04),a]
	move.b	(a0),d0                         	| [$4306: ld   a,(hl)]
	add.b	d0,d0                            	| [$4307: add  a,a]
	move.b	d0,(0x05,a2)                    	| [$4308: ld   (ix+$05),a]

	move.l	a3,-(sp)                        	| [$430b: push iy]
*	jra	l_4343                             	| [$430d: jp   $4343]
*	* retrieve backuped value, this seems not reached
*	move.l	unknown_CF08,a3             	| [$4310: ld   iy,(unknown_CF08)]
*	move.b	(0x0b,a3),d0                    	| [$4314: ld   a,(iy+$0b)]
*	cmp.b	(0x12,a3),d0                     	| [$4317: cp   (iy+$12)]
*	jeq	l_432f                             	| [$431a: jp   z,$432F]
*	move.b	(0x07,a3),d0                    	| [$431d: ld   a,(iy+$07)]
*	cmp.b	(0x10,a3),d0                     	| [$4320: cp   (iy+$10)]
*	jne	l_4343                             	| [$4323: jp   nz,$4343]
*	move.b	(0x08,a3),d0                    	| [$4326: ld   a,(iy+$08)]
*	cmp.b	(0x11,a3),d0                     	| [$4329: cp   (iy+$11)]
*	jne	l_4343                             	| [$432c: jp   nz,$4343]
*l_432f:
*	move.b	(0x00,a2),d0                    	| [$432f: ld   a,(ix+$00)]
*	addq.b	#0x03,d0                        	| [$4332: add  a,$03]
*	move.b	d0,(0x00,a2)                    	| [$4334: ld   (ix+$00),a]
*	move.b	#0x03,(0x01,a2)                 	| [$4337: ld   (ix+$01),$03]
*	subq.b	#1,d0                           	| [$433b: dec  a]
*	move.b	d0,(0x04,a2)                    	| [$433c: ld   (ix+$04),a]
*	move.b	#0x05,(0x05,a2)                 	| [$433f: ld   (ix+$05),$05]
l_4343:
	move.l	(sp)+,a3                        	| [$4343: pop  iy]
	move.l	(sp)+,a0                        	| [$4345: pop  hl]
	move.l	(sp)+,a1                        	| [$4346: pop  de]
	movem.w	(sp)+,d3-d6                    	| [$4346: pop  de]
	jbsr	is_point_in_rectangle_B042        	| [$4347: call is_point_in_rectangle_B042]
	tst.b	d0                               	| [$434a: and  a]
	jeq	l_435c                             	| [$434b: jp   z,$435C]
	move.b	#0x04,d1                        	| [$434e: ld   b,$04]
	move.b	d5,d0                           	| [$4350: ld   a,h]
	cmp.b	#0x05,d0                         	| [$4351: cp   $05]
	jcc	l_4358                             	| [$4353: jp   nc,$4358]
	move.b	#0x05,d1                        	| [$4356: ld   b,$05]
l_4358:
	move.b	d1,d0                           	| [$4358: ld   a,b]
	jra	l_436c                             	| [$4359: jp   $436C]
l_435c:
	move.w	#0x0004,d1                      	| [$435c: ld   bc,$0004] 4
	add.w	d1,a2                            	| [$435f: add  ix,bc]
	jbsr	is_point_in_rectangle_B042        	| [$4361: call is_point_in_rectangle_B042]
	tst.b	d0                               	| [$4364: and  a]
	jeq	l_436c                             	| [$4365: jp   z,$436C]
	move.b	#0x05,d0                        	| [$4368: ld   a,$05]
	ror.b	#1,d5                            	| [$436a: rrc  h]
l_436c:
	tst.b	d0                               	| [$436c: and  a]
	jeq	l_43b4                             	| [$436d: jp   z,$43B4]
	move.w	d0,-(sp)                        	| [$4370: push af]

	move.l	a0,-(sp)                        	| [$4371: push hl]
	lea	game_mem+0x43B7,a2                  	| [$4372: ld   ix,table_43B7]
	* we don't need A1 but D3/D4
	move.b	(0x07,a3),d4                    	| [$4376: ld   e,(iy+$07)]
	move.b	(0x08,a3),d3                    	| [$4379: ld   d,(iy+$08)]
	bclr.b	#7,d3                           	| [$437c: res  7,d]
	jbsr	key_value_linear_search_B00C      	| [$437e: call key_value_linear_search_B00C]
	move.l	(sp)+,a1                        	| [$4381: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$4381: pop  de]
	movem.w	(sp)+,d1/d2                    	| [$4382: pop  bc]
	tst.b	d0                               	| [$4383: and  a]
	jne	l_4393                             	| [$4384: jp   nz,$4393]
	move.b	d6,d0                           	| [$4387: ld   a,l]
	cmp.b	d4,d0                            	| [$4388: cp   e]
	jne	l_4393                             	| [$4389: jp   nz,$4393]
	clr.b	d0                               	| [$438c: xor  a]
	move.w	#0x0000,d5                      	| [$438d: ld   hl,$0000] 0
	jra	l_43b4                             	| [$4390: jp   $43B4]
l_4393:
	exg	a1,a0                              	| [$4393: ex   de,hl]
	move.b	d1,d0                           	| [$4394: ld   a,b]
	move.l	unknown_CF08,a3             	| [$4395: ld   iy,(unknown_CF08)]
	move.b	(0x07,a3),d2                    	| [$4399: ld   c,(iy+$07)]
	move.b	(0x08,a3),d1                    	| [$439c: ld   b,(iy+$08)]
	move.b	d2,(0x10,a3)                    	| [$439f: ld   (iy+$10),c]
	move.b	d1,(0x11,a3)                    	| [$43a2: ld   (iy+$11),b]
	bsr		change_d1_d2_to_d1_16
	move.l	d1,a2
	add.l	#game_mem,a2
	
												| [$43a5: push bc]
												| [$43a6: pop  ix]
	move.b	(0x08,a2),d1                    	| [$43a8: ld   b,(ix+$08)]
	move.b	d1,(0x13,a3)                    	| [$43ab: ld   (iy+$13),b]
	move.b	(0x0b,a3),d1                    	| [$43ae: ld   b,(iy+$0b)]
	move.b	d1,(0x12,a3)                    	| [$43b1: ld   (iy+$12),b]
l_43b4:
	move.l	(sp)+,a3                        	| [$43b4: pop  iy]
l_43b6:
	rts                                    	| [$43b6: ret]
	
l_4405:

	move.l	a3,-(sp)                        	| [$4405: push iy]
	lea	player_1_struct_C240,a3        	| [$4407: ld   iy,player_1_struct_C240]
	move.b	current_task_index_C028,d0   	| [$440b: ld   a,(current_task_index_C028)]
	cmp.b	#0x0B,d0                         	| [$440e: cp   $0B]
	jeq	l_4417                             	| [$4410: jp   z,$4417]
	lea	player_2_struct_C260,a3        	| [$4413: ld   iy,player_2_struct_C260]
l_4417:
	jbsr	get_current_frame_contents_478D   	| [$4417: call get_current_frame_contents_478D]
	move.l	(sp)+,a3                        	| [$441a: pop  iy]
	move.b	d6,(0x0d,a3)                    	| [$441c: ld   (iy+$0d),l]
	move.b	d5,(0x0e,a3)                    	| [$441f: ld   (iy+$0e),h]
l_4422:
	move.b	#0x04,d0                        	| [$4422: ld   a,$04]

	move.l	a3,-(sp)                        	| [$4424: push iy]
	jbsr	suspend_this_task_B05A            	| [$4426: call suspend_this_task_B05A]
	move.l	(sp)+,a3                        	| [$4429: pop  iy]
	cmp.b	#0x0D,d0                         	| [$442b: cp   $0D]
	jeq	l_4422                             	| [$442d: jp   z,$4422]
	tst.b	d0                               	| [$4430: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$4431: call nz,display_error_text_B075]
0:
	move.b	d1,d0                           	| [$4434: ld   a,b]
	cmp.b	#0x0C,d0                         	| [$4435: cp   $0C]
	jcs	l_4440                             	| [$4437: jp   c,$4440]
	jbsr	l_45d0                            	| [$443a: call $45D0]
	jra	l_4443                             	| [$443d: jp   $4443]
l_4440:
	jbsr	l_4536                            	| [$4440: call $4536]
l_4443:
	jbsr	check_if_move_warrants_a_kiai_409d                            	| [$4443: call $409D]
	jbsr	l_40b3                            	| [$4446: call $40B3]
	jbsr	display_player_sprite_4153                            	| [$4449: call $4153]
l_444c:
	jbsr	player_management_routine_46FD    	| [$444c: call player_management_routine_46FD]
	cmp.b	#0x0D,d0                         	| [$444f: cp   $0D]
	jeq	l_444c                             	| [$4451: jp   z,$444C]
	cmp.b	#0x08,d0                         	| [$4454: cp   $08]
	jeq	l_445d                             	| [$4456: jp   z,$445D]
	tst.b	d0                               	| [$4459: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$445a: call nz,display_error_text_B075]
0:
l_445d:
	jbsr	handle_player_movement_3ea7                            	| [$445d: call $3EA7]
	jbsr	l_4663                            	| [$4460: call $4663]
	jbsr	check_if_move_warrants_a_kiai_409d                            	| [$4463: call $409D]
	jbsr	l_40b3                            	| [$4466: call $40B3]
	jbsr	display_player_sprite_4153                            	| [$4469: call $4153]
l_446c:
	jbsr	player_management_routine_46FD    	| [$446c: call player_management_routine_46FD]
	cmp.b	#0x0D,d0                         	| [$446f: cp   $0D]
	jeq	l_446c                             	| [$4471: jp   z,$446C]
	tst.b	d0                               	| [$4474: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$4475: call nz,display_error_text_B075]
0:
	jbsr	get_current_frame_contents_478D   	| [$4478: call get_current_frame_contents_478D]
	lea	game_mem+0x461A,a2                  	| [$447b: ld   ix,table_461A]
	jbsr	check_hl_in_ix_list_B009          	| [$447f: call check_hl_in_ix_list_B009]
	tst.b	d0                               	| [$4482: and  a]
	jeq	l_445d                             	| [$4483: jp   z,$445D]
	rts                                    	| [$4486: ret]
l_4487:
	jbsr	player_management_routine_46FD    	| [$4487: call player_management_routine_46FD]
	tst.b	d0                               	| [$448a: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$448b: call nz,display_error_text_B075]
0:
* reached when player is hit, same c42B (technique index)
* value written with 2 now...
	move.b	#0x02,(0x0b,a3)                 	| [$448e: ld   (iy+$0b),$02]
	move.w	#0x0A89,d1                      	| [$4492: ld   bc,$0A89]
l_4495:
	movem.w	d1/d2,-(sp)                    	| [$4495: push bc]
	jbsr	handle_player_movement_3ea7                            	| [$4496: call $3EA7]
	jbsr	l_4663                            	| [$4499: call $4663]
	jbsr	l_40b3                            	| [$449c: call $40B3]
	jbsr	display_player_sprite_4153                            	| [$449f: call $4153]
	jbsr	player_management_routine_46FD    	| [$44a2: call player_management_routine_46FD]
	tst.b	d0                               	| [$44a5: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$44a6: call nz,display_error_text_B075]
0:
	movem.w	(sp)+,d1/d2                    	| [$44a9: pop  bc]
	move.b	(0x07,a3),d6                    	| [$44aa: ld   l,(iy+$07)]
	move.b	(0x08,a3),d5                    	| [$44ad: ld   h,(iy+$08)]
	bclr.b	#7,d5                           	| [$44b0: res  7,h]
	bsr		change_d5_d6_to_d5_16                               	| [$44b2: and  a]
	cmp.w	d1,d5							| [sbc  hl,bc]
	jne	l_4495                             	| [$44b5: jp   nz,$4495]
	rts                                    	| [$44b8: ret]
l_44b9:

	move.l	a3,-(sp)                        	| [$44b9: push iy]
	move.b	#0x3C,d0                        	| [$44bb: ld   a,$3C]
	jbsr	suspend_this_task_B05A            	| [$44bd: call suspend_this_task_B05A]
	move.l	(sp)+,a3                        	| [$44c0: pop  iy]
	jbsr	l_40b3                            	| [$44c2: call $40B3]

	move.l	a2,-(sp)                        	| [$44c5: push ix]
	clr.b	d0                               	| [$44c7: xor  a]
	jbsr	l_4249                            	| [$44c8: call $4249]
	move.l	(sp)+,a2                        	| [$44cb: pop  ix]
	move.b	#0x05,d1                        	| [$44cd: ld   b,$05]
	move.b	(0x09,a3),d0                    	| [$44cf: ld   a,(iy+$09)]
	sub.b	#0x08,d0                         	| [$44d2: sub  $08]
	move.b	d0,d5                           	| [$44d4: ld   h,a]
	move.b	(0x0a,a3),d0                    	| [$44d5: ld   a,(iy+$0a)]
	sub.b	#0x40,d0                         	| [$44d8: sub  $40]
	move.b	d0,d6                           	| [$44da: ld   l,a]

	move.l	a3,-(sp)                        	| [$44db: push iy]
l_44dd:
	movem.w	d1/d2,-(sp)                    	| [$44dd: push bc]

	move.l	a0,-(sp)                        	| [$44de: push hl]
	move.l	a2,-(sp)                        	| [$44df: push ix]
	move.b	d6,d0                           	| [$44e1: ld   a,l]
	sub.b	d1,d0                            	| [$44e2: sub  b]
	move.b	d0,d6                           	| [$44e3: ld   l,a]
	move.b	#0x16,d1                        	| [$44e4: ld   b,$16]
	move.b	current_task_index_C028,d0   	| [$44e6: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$44e9: cp   $0A]
	jeq	l_44f0                             	| [$44eb: jp   z,$44F0]
	move.b	#0x18,d1                        	| [$44ee: ld   b,$18]
l_44f0:
	move.b	d1,d0                           	| [$44f0: ld   a,b]
	jbsr	l_b0a2                            	| [$44f1: call $B0A2]
	move.b	#0x10,d0                        	| [$44f4: ld   a,$10]
	jbsr	suspend_this_task_B05A            	| [$44f6: call suspend_this_task_B05A]
	move.l	(sp),a2                        	| [$44f9: pop  ix]
	move.l	(sp),a0                        	| [$44fb: pop  hl]

												| [$44fc: push hl]
												| [$44fd: push ix]
	move.b	#0x17,d1                        	| [$44ff: ld   b,$17]
	move.b	current_task_index_C028,d0   	| [$4501: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$4504: cp   $0A]
	jeq	l_450b                             	| [$4506: jp   z,$450B]
	move.b	#0x19,d1                        	| [$4509: ld   b,$19]
l_450b:
	move.b	d1,d0                           	| [$450b: ld   a,b]
	jbsr	l_b0a2                            	| [$450c: call $B0A2]
	move.b	#0x10,d0                        	| [$450f: ld   a,$10]
	jbsr	suspend_this_task_B05A            	| [$4511: call suspend_this_task_B05A]
	move.l	(sp)+,a2                        	| [$4514: pop  ix]
	move.l	(sp)+,a0                        	| [$4516: pop  hl]
	movem.w	(sp)+,d1/d2                    	| [$4517: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_44dd                             	| [$4518: djnz $44DD]
	move.l	(sp)+,a3                        	| [$451a: pop  iy]
	rts                                    	| [$451c: ret]
l_451d:

	move.l	a3,-(sp)                        	| [$451d: push iy]
	move.b	#0x3C,d0                        	| [$451f: ld   a,$3C]
	jbsr	suspend_this_task_B05A            	| [$4521: call suspend_this_task_B05A]
	move.l	(sp)+,a3                        	| [$4524: pop  iy]
	move.w	#0x1B,d5                      	| [$4526: ld   hl,$1BA8] immediate value
	move.w	#0xA8,d6                      	
	move.b	d6,(0x07,a3)                    	| [$4529: ld   (iy+$07),l]
	move.b	d5,(0x08,a3)                    	| [$452c: ld   (iy+$08),h]
	jbsr	l_40b3                            	| [$452f: call $40B3]
	jbsr	display_player_sprite_4153                            	| [$4532: call $4153]
	rts                                    	| [$4535: ret]

l_4536:
	lea	player_1_struct_C240,a2        	| [$4536: ld   ix,player_1_struct_C240]
	move.b	current_task_index_C028,d0   	| [$453a: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$453d: cp   $0A]
	jne	l_4546                             	| [$453f: jp   nz,$4546]
	lea	player_2_struct_C260,a2        	| [$4542: ld   ix,player_2_struct_C260]
l_4546:
	lea	game_mem+0x4653,a0                  	| [$4546: ld   hl,table_4653]
	move.w	#0x0008,d3                      	| [$4549: ld   de,$0008] 8
	btst.b	#7,(0x08,a3)                    	| [$454c: bit  7,(iy+$08)]
	jne	l_4560                             	| [$4550: jp   nz,$4560]
	move.b	(0x09,a3),d0                    	| [$4553: ld   a,(iy+$09)]
	sub.b	(0x09,a2),d0                     	| [$4556: sub  (ix+$09)]
	jcs	l_456a                             	| [$4559: jp   c,$456A]
	add.w	d3,a0                            	| [$455c: add  hl,de]
	jra	l_456a                             	| [$455d: jp   $456A]
l_4560:
	move.b	(0x09,a3),d0                    	| [$4560: ld   a,(iy+$09)]
	sub.b	(0x09,a2),d0                     	| [$4563: sub  (ix+$09)]
	jcc	l_456a                             	| [$4566: jp   nc,$456A]
	add.w	d3,a0                            	| [$4569: add  hl,de]
l_456a:

	move.l	a0,-(sp)                        	| [$456a: push hl]
	move.b	(0x0d,a3),d4                    	| [$456b: ld   e,(iy+$0d)]
	move.b	(0x0e,a3),d3                    	| [$456e: ld   d,(iy+$0e)]
	bsr		change_d3_d4_to_d3_16	
	lea	game_mem+0x4626,a2                  	| [$4571: ld   ix,table_4626]
l_4575:
	move.b	(0x00,a2),d6                    	| [$4575: ld   l,(ix+$00)]
	move.b	(0x01,a2),d5                    	| [$4578: ld   h,(ix+$01)]
	move.b	d6,d0                           	| [$457b: ld   a,l]
	and.b	d5,d0                            	| [$457c: and  h]
	cmp.b	#0xFF,d0                         	| [$457d: cp   $FF]
	bne.b	0f
	jbsr	display_error_text_B075           	| [$457f: call z,display_error_text_B075]
0:
	bsr		change_d5_d6_to_d5_16                               	| [$4582: and  a]
	sub.w	d3,d5							| [sbc  hl,de]
	jeq	l_4591                             	| [$4585: jp   z,$4591]
	addq.w	#3,a2                           	| [$4588: inc  ix] * 3
	jra	l_4575                             	| [$458e: jp   $4575]
l_4591:
	move.b	(0x02,a2),d0                    	| [$4591: ld   a,(ix+$02)]
	move.l	(sp)+,a0                        	| [$4594: pop  hl]
l_4595:
	add.b	d0,d0                            	| [$4595: add  a,a]
	clr.w	d1                               	| [$4597: ld   b,$00]
	move.b	d0,d1                           	| [$4596: ld   c,a]
	add.w	d1,a0                            	| [$4599: add  hl,bc]
	move.b	(a0)+,d4                         	| [$459a: ld   e,(hl)]
	move.b	(a0),d3                         	| [$459c: ld   d,(hl)]
	movem.w	d3/d4,-(sp)                    	| [$459d: push de]
	move.l	a1,-(sp)                        	| [$459d: push de]
	jbsr	l_45ff                            	| [$459e: call $45FF]
	btst.b	#7,(0x08,a3)                    	| [$45a1: bit  7,(iy+$08)]
	jeq	l_45aa                             	| [$45a5: jp   z,$45AA]
	neg.b	d0                               	| [$45a8: neg]
l_45aa:
	add.b	(0x09,a3),d0                     	| [$45aa: add  a,(iy+$09)]
	move.b	d0,(0x09,a3)                    	| [$45ad: ld   (iy+$09),a]
	move.l	(sp)+,a0                        	| [$45b0: pop  hl]
	move.b	(0x08,a3),d0                    	| [$45b1: ld   a,(iy+$08)]
	and.b	#0x80,d0                         	| [$45b4: and  $80]
	or.b	d5,d0                             	| [$45b6: or   h]
	move.b	d6,(0x07,a3)                    	| [$45b7: ld   (iy+$07),l]
	move.b	d0,(0x08,a3)                    	| [$45ba: ld   (iy+$08),a]
	jbsr	l_45ff                            	| [$45bd: call $45FF]
	btst.b	#7,(0x08,a3)                    	| [$45c0: bit  7,(iy+$08)]
	jne	l_45c9                             	| [$45c4: jp   nz,$45C9]
	neg.b	d0                               	| [$45c7: neg]
l_45c9:
	add.b	(0x09,a3),d0                     	| [$45c9: add  a,(iy+$09)]
	move.b	d0,(0x09,a3)                    	| [$45cc: ld   (iy+$09),a]
	rts                                    	| [$45cf: ret]
l_45d0:
	move.b	d1,d3                           	| [$45d0: ld   d,b]
	move.b	#0x20,d4                        	| [$45d1: ld   e,$20]
	bsr		change_d3_d4_to_d3_16
	jbsr	multiply_de_b000                            	| [$45d3: call $B000]
	lea	task_struct_C100,a2            	| [$45d6: ld   ix,task_struct_C100]
	add.w	d3,a2                            	| [$45da: add  ix,de]
	lea	game_mem+0x45F3,a0                  	| [$45dc: ld   hl,table_45F3]
	move.b	(0x08,a3),d0                    	| [$45df: ld   a,(iy+$08)]
	move.b	(0x08,a2),d7
	eor.b	d7,d0                            	| [$45e2: xor  (ix+$08)]
	and.b	#0x80,d0                         	| [$45e5: and  $80]
	jne	l_45ed                             	| [$45e7: jp   nz,$45ED]
	lea	game_mem+0x45F9,a0                  	| [$45ea: ld   hl,table_45F9]
l_45ed:
	move.b	(0x0b,a2),d0                    	| [$45ed: ld   a,(ix+$0b)]
	jra	l_4595                             	| [$45f0: jp   $4595]
l_45ff:
	jbsr	get_current_frame_contents_478D   	| [$45ff: call get_current_frame_contents_478D]
									| [$4602: ld   bc,$0200]
	                              	| [$4605: and  a]
	sub.w	#2,d5					| sbc  hl,bc
	move.b	#0x0D,d3                        	| [$4608: ld   d,$0D]
	jbsr	divide_hl_by_d_b003                            	| [$460a: call $B003]
	tst.b	d0                               	| [$460d: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$460e: call nz,display_error_text_B075]
0:
	bsr		change_d5_d6_to_d5_16
	add.w	d5,d5                            	| [$4611: add  hl,hl]
	add.w	d5,d5                            	| [$4612: add  hl,hl]
	move.w	#0x088D,d3                      	| [$4613: ld   de,$088D] offset
	add.w	d3,d5                            	| [$4616: add  hl,de]
	add.l	#game_mem,d5
	move.l	d5,a0
	addq.w	#1,a0                           	| [$4617: inc  hl]
	move.b	(a0),d0                         	| [$4618: ld   a,(hl)]
	rts                                    	| [$4619: ret]

l_4663:
	lea	player_1_struct_C240,a2        	| [$4663: ld   ix,player_1_struct_C240]
	lea	game_mem+0x3D1A,a0                  	| [$4667: ld   hl,table_3D1A]
	move.b	background_and_state_bits_C911,d0	| [$466a: ld   a,(background_and_state_bits_C911)]
	and.b	#0x7F,d0                         	| [$466d: and  $7F]
	cmp.b	#0x50,d0                         	| [$466f: cp   $50]
	jeq	l_4682                             	| [$4671: jp   z,$4682]
	lea	game_mem+0x3D3A,a0                  	| [$4674: ld   hl,table_3D3A]
	move.b	background_and_state_bits_C911,d0	| [$4677: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$467a: res  7,a]
	add.b	d0,d0                            	| [$467c: add  a,a]
	add.b	d0,d0                            	| [$467d: add  a,a]
	clr.w	d1                               	| [$467f: ld   b,$00]
	move.b	d0,d1                           	| [$467e: ld   c,a]
	add.w	d1,a0                            	| [$4681: add  hl,bc]
l_4682:
	move.b	background_and_state_bits_C911,d0	| [$4682: ld   a,(background_and_state_bits_C911)]
	and.b	#0x70,d0                         	| [$4685: and  $70]
	cmp.b	#0x10,d0                         	| [$4687: cp   $10]
	jeq	l_46d6                             	| [$4689: jp   z,$46D6]
	move.b	(a0),d0                         	| [$468c: ld   a,(hl)]
	cmp.b	(0x0a,a2),d0                     	| [$468d: cp   (ix+$0a)]
	jne	l_46d6                             	| [$4690: jp   nz,$46D6]
	lea	player_2_struct_C260,a2        	| [$4693: ld   ix,player_2_struct_C260]
	move.b	(a0),d0                         	| [$4697: ld   a,(hl)]
	cmp.b	(0x0a,a2),d0                     	| [$4698: cp   (ix+$0a)]
	jne	l_46d6                             	| [$469b: jp   nz,$46D6]
	lea	player_2_struct_C260,a2        	| [$469e: ld   ix,player_2_struct_C260]
	move.b	current_task_index_C028,d0   	| [$46a2: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$46a5: cp   $0A]
	jeq	l_46ae                             	| [$46a7: jp   z,$46AE]
	lea	player_1_struct_C240,a2        	| [$46aa: ld   ix,player_1_struct_C240]
l_46ae:
	move.b	(0x09,a3),d0                    	| [$46ae: ld   a,(iy+$09)]
	sub.b	(0x09,a2),d0                     	| [$46b1: sub  (ix+$09)]
	jcs	l_46c7                             	| [$46b4: jp   c,$46C7]
	cmp.b	#0x10,d0                         	| [$46b7: cp   $10]
	jcc	l_46d6                             	| [$46b9: jp   nc,$46D6]
	move.b	(0x09,a2),d0                    	| [$46bc: ld   a,(ix+$09)]
	add.b	#0x10,d0                         	| [$46bf: add  a,$10]
	move.b	d0,(0x09,a3)                    	| [$46c1: ld   (iy+$09),a]
	jra	l_46d6                             	| [$46c4: jp   $46D6]
l_46c7:
	neg.b	d0                               	| [$46c7: neg]
	cmp.b	#0x10,d0                         	| [$46c9: cp   $10]
	jcc	l_46d6                             	| [$46cb: jp   nc,$46D6]
	move.b	(0x09,a3),d0                    	| [$46ce: ld   a,(iy+$09)]
	sub.b	#0x10,d0                         	| [$46d1: sub  $10]
	move.b	d0,(0x09,a3)                    	| [$46d3: ld   (iy+$09),a]
l_46d6:
	lea	game_mem+0x46F9,a2                  	| [$46d6: ld   ix,table_46F9]
	move.b	(0x09,a3),d0                    	| [$46da: ld   a,(iy+$09)]
	cmp.b	(0x00,a2),d0                     	| [$46dd: cp   (ix+$00)]
	jcc	l_46ec                             	| [$46e0: jp   nc,$46EC]
	move.b	(0x01,a2),d0                    	| [$46e3: ld   a,(ix+$01)]
	move.b	d0,(0x09,a3)                    	| [$46e6: ld   (iy+$09),a]
	jra	l_46f8                             	| [$46e9: jp   $46F8]
l_46ec:
	cmp.b	(0x02,a2),d0                     	| [$46ec: cp   (ix+$02)]
	jcs	l_46f8                             	| [$46ef: jp   c,$46F8]
	move.b	(0x03,a2),d0                    	| [$46f2: ld   a,(ix+$03)]
	move.b	d0,(0x09,a3)                    	| [$46f5: ld   (iy+$09),a]
l_46f8:
	rts                                    	| [$46f8: ret]

player_management_routine_46FD:
	move.b	(0x14,a3),d0                    	| [$46fd: ld   a,(iy+$14)]
												| [$4700: and  a]
	jne	l_4783                             	| [$4701: jp   nz,$4783]
	bsr		load_a0_from_a3_structure_07_address_mask 	| [$4704: ld   l,(iy+$07)]
														| [$4707: ld   h,(iy+$08)]
														| [$470a: res  7,h]

	move.l	a0,a2                        	| [$470c: push hl]
	                        	| [$470d: pop  ix] current frame data
	move.b	(0x05,a2),d2                    	| [$470f: ld   c,(ix+$05)] load c (number of ticks of current frame?)
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$4712: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x0C,d0                         	| [$4715: and  $0C]
	cmp.b	#0x0C,d0                         	| [$4717: cp   $0C] 2 players human?
	jeq	l_477b                             	| [$4719: jp   z,$477B] 2-player: skip the part below

* this isn't called in 2p mode
* in 2p mode (or dynamically), players_type_human_or_cpu_flags_C02D is $F
* at start in 1p mode players_type_human_or_cpu_flags_C02D is $5
* at start C02D is 4
* bit 0 is added when a credit is inserted 4 => 5
*
* during the demo, setting 0F to C02D seem to have no effect
* but during 2P play setting C02D from F to 5,6,7 makes red player
* attack white. So maybe there are more flags that need to be
* set or are overridden by demo mode
* setting to 8 (1000) => white attacks, red is player 2
* 0xB (1011) also behaves that way
* setting to 0 or 3 => error
* maybe in non-demo mode at least 1 player should be controlled
* by a human player
*
* this is not part of the A.I. routine, rather part of the CPU moves
* animation speed
*

	lea	players_type_human_or_cpu_flags_C02D,a0	| [$471c: ld   hl,players_type_human_or_cpu_flags_C02D]
	move.b	current_task_index_C028,d0   	| [$471f: ld   a,(current_task_index_C028)] loads player Y, 0A: ground, 0B: preparing to jump
	btst.b	#2,(a0)                         	| [$4722: bit  2,(hl)] is player 2 human?
	jeq	l_4734                             	| [$4724: jp   z,$4734]
* player 2 is CPU
	cmp.b	#0x0A,d0                         	| [$4727: cp   $0A] attack sequence?
	jeq	l_477b                             	| [$4729: jp   z,$477B] attacking: skip
	cmp.b	#0x0B,d0                         	| [$472c: cp   $0B] not attacking / standing guard?
	beq.b	0f
	jbsr	display_error_text_B075           	| [$472e: call nz,display_error_text_B075] sanity check, has to be 0B
0:
	jra	l_4743                             	| [$4731: jp   $4743] the other player is human, skip below

l_4734:
	btst.b	#3,(a0)                         	| [$4734: bit  3,(hl)] is player 1 human?
	jeq	display_error_text_B075            	| [$4736: jp   z,display_error_text_B075] sanity: if reach here p1 is human
	cmp.b	#0x0B,d0                         	| [$4739: cp   $0B]
	jeq	l_477b                             	| [$473b: jp   z,$477B] not attacking: skip
	cmp.b	#0x0A,d0                         	| [$473e: cp   $0A]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$4740: call nz,display_error_text_B075]
0:
* check skill level (just for moves speed, not for A.I)
l_4743:
	move.b	computer_skill_C910,d0          	| [$4743: ld   a,(computer_skill_C910)]
	cmp.b	#0x10,d0                         	| [$4746: cp   $10]
* CMP level 16+: set maximum speed: -2 ticks per frame for all moves
	move.b	#0xFE,d0                        	| [$4748: ld   a,$FE]
	jcc	l_477c                             	| [$474a: jp   nc,$477C] if > $10 skip (CMP level 16)
* if not CMP, check difficulty level
	lea	counter_attack_timer_table_AD67(pc),a0	| [$474d: ld   hl,counter_attack_timer_table_AD67]
	move.b	dip_switches_copy_C030,d0       	| [$4750: ld   a,(dip_switches_copy_C030)]
	lsr.b	#3,d0                            	| [$4753: srl  a] * 3
	and.b	#0x06,d0                         	| [$4759: and  $06]
* difficulty level 00 easy ... 06 hardest to pick one of the 4 tables
	clr.w	d3                               	| [$475c: ld   d,$00]
	move.b	d0,d3                           	| [$475b: ld   e,a]
	add.w	d3,a0                            	| [$475e: add  hl,de]
	move.b	(a0)+,d4                         	| [$475f: ld   e,(hl)]
											| [$4760: inc  hl]
	move.b	(a0),d3                         	| [$4761: ld   d,(hl)] de points on the timer table
	move.b	computer_skill_C910,d0          	| [$4762: ld   a,(computer_skill_C910)]
	add.b	d0,d0                            	| [$4765: add  a,a]
	move.b	d0,d6                           	| [$4766: ld   l,a]
	clr.b	d5                               	| [$4767: ld   h,$00]
	bsr		change_d3_d4_to_d3_16
	bsr		change_d5_d6_to_d5_16
	
	add.w	d3,d5                            	| [$4769: add  hl,de]
	move.l	d5,a0
	add.l	#game_mem,a0
	move.b	unknown_C148,d0                 	| [$476a: ld   a,(unknown_C148)]
	move.b	d0,d1                           	| [$476d: ld   b,a]
	move.b	unknown_C147,d0                 	| [$476e: ld   a,(unknown_C147)]
	or.b	d1,d0                             	| [$4771: or   b]
	jeq	l_4776                             	| [$4772: jp   z,$4776]
	addq.w	#1,a0                           	| [$4775: inc  hl]
* It's loading a from one of the
* counter attack timer tables, but if it's > 0 then
* it sets it to 0... So all the values > 0 (which
* seem to be very well tuned) are zeroed... Only remains
* the negative ones (to speed up cpu moves)
*
* the positive values are used for computer reaction
*
l_4776:
	move.b	(a0),d0                         	| [$4776: ld   a,(hl)]
											| [$4777: and  a]
	jmi	l_477c                             	| [$4778: jp   m,$477C]
l_477b:
	clr.b	d0                               	| [$477b: xor  a]
* skips there on high difficulty level (high speed actually)
l_477c:
	add.b	d2,d0                            	| [$477c: add  a,c] sub delay to c => in a
	jeq	l_4783                             	| [$477d: jp   z,$4783] can't be zero!
	jpl	l_4785                             	| [$4780: jp   p,$4785] can't be negative
l_4783:
	move.b	#0x01,d0                        	| [$4783: ld   a,$01]
l_4785:

	move.l	a3,-(sp)                        	| [$4785: push iy]
	jbsr	suspend_this_task_B05A            	| [$4787: call suspend_this_task_B05A]
	move.l	(sp)+,a3                        	| [$478a: pop  iy]
	rts                                    	| [$478c: ret]
	
* < A3: pointer of frame
* > D5/D6: contents of frame (first 2 bytes)
get_current_frame_contents_478D:
	bsr		load_a0_from_a3_structure_07_address_mask | [$478d: ld   l,(iy+$07)]
													| [$4790: ld   h,(iy+$08)]
													| [$4793: res  7,h]
	move.b	(a0)+,d6                         	| [$4795: ld   e,(hl)]
												| [$4796: inc  hl]
	move.b	(a0),d5                        	| [$4797: ld   d,(hl)]
											| [$4798: ex   de,hl]
	rts                                    	| [$4799: ret]


l_479a:
	nop                                    	| [$479a: nop]
	move.b	current_task_index_C028,d0   	| [$479b: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$479e: cp   $0A]
	jeq	l_47a8                             	| [$47a0: jp   z,$47A8]
	cmp.b	#0x0B,d0                         	| [$47a3: cp   $0B]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$47a5: call nz,display_error_text_B075]
0:
l_47a8:
	jbsr	get_current_frame_contents_478D   	| [$47a8: call get_current_frame_contents_478D]	
	bsr		change_d5_d6_to_d5_16
							| [$47ab: ld   de,$0200]
								| [$47ae: and  a]
	cmp.w	#0x200,d5		| [sbc  hl,de]
	jne	l_47d4                             	| [$47b1: jp   nz,$47D4]
	move.b	background_and_state_bits_C911,d0	| [$47b4: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$47b7: res  7,a]
	cmp.b	#0x10,d0                         	| [$47b9: cp   $10]
	jcc	l_47d4                             	| [$47bb: jp   nc,$47D4]
	add.b	d0,d0                            	| [$47be: add  a,a]
	add.b	d0,d0                            	| [$47bf: add  a,a]
	clr.w	d1                               	| [$47c1: ld   b,$00]
	move.b	d0,d1                           	| [$47c0: ld   c,a]
	lea	game_mem+0x3D37,a0                  	| [$47c3: ld   hl,table_3D37]
	add.w	d1,a0                            	| [$47c6: add  hl,bc]

	addq.w	#3,a0                           	| [$47c7: inc  hl] * 3
	move.b	(a0),d0                         	| [$47ca: ld   a,(hl)]
	cmp.b	(0x0a,a3),d0                     	| [$47cb: cp   (iy+$0a)]
	jeq	l_47d4                             	| [$47ce: jp   z,$47D4]
	move.b	d0,(0x0a,a3)                    	| [$47d1: ld   (iy+$0a),a]
l_47d4:
	rts                                    	| [$47d4: ret]
	
l_4d84:
	jbsr	load_iy_with_player_structure_B04B	| [$4d84: call load_iy_with_player_structure_B04B]
	jbsr	clear_player_structure_partial_b012        	| [$4d87: call $B012]

	move.l	a3,-(sp)                        	| [$4d8a: push iy]
	move.b	#0x08,d0                        	| [$4d8c: ld   a,$08]
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$4d8e: ld   hl,players_type_human_or_cpu_flags_C02D]
	btst.b	#2,(a0)                         	| [$4d91: bit  2,(hl)]
	jne	l_4d97                             	| [$4d93: jp   nz,$4D97]
	addq.b	#1,d0                           	| [$4d96: inc  a]
l_4d97:
	jbsr	schedule_task_to_start_B057       	| [$4d97: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$4d9a: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$4d9b: call nz,display_error_text_B075]
0:
	move.b	#0x0A,d0                        	| [$4d9e: ld   a,$0A]
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$4da0: ld   hl,players_type_human_or_cpu_flags_C02D]
	btst.b	#2,(a0)                         	| [$4da3: bit  2,(hl)]
	jne	l_4da9                             	| [$4da5: jp   nz,$4DA9]
	addq.b	#1,d0                           	| [$4da8: inc  a]
l_4da9:
	jbsr	schedule_task_to_start_B057       	| [$4da9: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$4dac: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$4dad: call nz,display_error_text_B075]
0:
	move.b	#0x04,d0                        	| [$4db0: ld   a,$04]
	jbsr	schedule_task_to_start_B057       	| [$4db2: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$4db5: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$4db6: call nz,display_error_text_B075]
0:
	move.b	#0x14,d0                        	| [$4db9: ld   a,$14]
	jbsr	schedule_task_to_start_B057       	| [$4dbb: call schedule_task_to_start_B057]
l_4dbe:
	tst.b	d0                               	| [$4dbe: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$4dbf: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$4dc2: pop  iy]

	move.l	a3,-(sp)                        	| [$4dc4: push iy]
	clr.b	d0                               	| [$4dc6: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$4dc8: call suspend_this_task_B05A]
	cmp.b	#0x10,d0                         	| [$4dcb: cp   $10]
	jeq	l_4de0                             	| [$4dcd: jp   z,$4DE0]
	cmp.b	#0x01,d0                         	| [$4dd0: cp   $01]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$4dd2: call nz,display_error_text_B075]
0:
	move.b	#0x0F,d0                        	| [$4dd5: ld   a,$0F]
	move.b	#0x20,d1                        	| [$4dd7: ld   b,$20]
	jbsr	task_manipulation_B05D            	| [$4dd9: call task_manipulation_B05D]
	tst.b	d0                               	| [$4ddc: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$4ddd: call nz,display_error_text_B075]
0:
l_4de0:
	move.l	(sp)+,a3                        	| [$4de0: pop  iy]

	move.l	a3,-(sp)                        	| [$4de2: push iy]
	move.b	#0xF0,d0                        	| [$4de4: ld   a,$F0]
	jbsr	suspend_this_task_B05A            	| [$4de6: call suspend_this_task_B05A]
	tst.b	d0                               	| [$4de9: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$4dea: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$4ded: pop  iy]
	move.b	#0x01,d0                        	| [$4def: ld   a,$01]
	move.b	#0x01,d1                        	| [$4df1: ld   b,$01]
	jbsr	task_manipulation_B05D            	| [$4df3: call task_manipulation_B05D]
	tst.b	d0                               	| [$4df6: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$4df7: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                  	| [$4dfa: call task_yield_B051]
	move.b	#0x0A,d1
	move.b	#0x1C,d2                      	| [$4dfd: ld   bc,$0A1C]
	move.b	#0x88,d3
	move.b	#0x3c,d4                  	| [$4e00: ld   de,table_883c]
	move.b	#0x1D,d5
	move.b	#0,d6                      	| [$4e03: ld   hl,$1D00]
	jbsr	fill_rectangle_B01B                            	| [$4e06: call $B01B]
	lea	temp_numeric_buffer_CF00,a2    	| [$4e09: ld   ix,temp_numeric_buffer_CF00]
	move.b	#0x02,(0x00,a2)                 	| [$4e0d: ld   (ix+$00),$02]
	move.b	#0x10,(0x01,a2)                 	| [$4e11: ld   (ix+$01),$10]
	move.b	#0xFF,(0x1e,a2)                 	| [$4e15: ld   (ix+$1e),$FF]
	lea	game_mem+0x4000,a0                      	| [$4e19: ld   hl,$4000]
l_4e1c:

	move.l	a2,-(sp)                        	| [$4e1c: push ix]
	move.b	#0x1C,d1                        	| [$4e1e: ld   b,$1C]
	move.b	#0xEC,d2                        	| [$4e20: ld   c,$EC]
l_4e22:
	move.b	(a0),d3                         	| [$4e22: ld   d,(hl)]
	move.b	#0x03,d4                        	| [$4e23: ld   e,$03]
	movem.w	d1/d2,-(sp)                    	| [$4e25: push bc]
	jbsr	random_B006                       	| [$4e26: call random_B006]
	movem.w	(sp)+,d1/d2                    	| [$4e29: pop  bc]
	add.b	d2,d0                            	| [$4e2a: add  a,c]
	move.b	d0,(0x02,a2)                    	| [$4e2b: ld   (ix+$02),a]
	addq.w	#1,a2                           	| [$4e2e: inc  ix]
	addq.w	#1,a0                           	| [$4e30: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_4e22                             	| [$4e31: djnz $4E22]
	move.l	(sp)+,a1                        	| [$4e33: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$4e33: pop  de]

	move.l	a0,-(sp)                        	| [$4e34: push hl]
	movem.w	d3/d4,-(sp)                    	| [$4e35: push de]
	move.l	a1,-(sp)                        	| [$4e35: push de]
	exg	a1,a0                              	| [$4e36: ex   de,hl]
	move.b	#0xE2,d3                        	| [$4e37: ld   d,$E2]
	jbsr	display_text_B039                 	| [$4e39: call display_text_B039]
	move.l	(sp)+,a2                        	| [$4e3c: pop  ix]
	move.l	(sp)+,a0                        	| [$4e3e: pop  hl]
	move.b	#0x1F,d0                        	| [$4e3f: ld   a,$1F]
	cmp.b	(0x01,a2),d0                     	| [$4e41: cp   (ix+$01)]
	jeq	l_4e4d                             	| [$4e44: jp   z,$4E4D]
	addq.b	#1,(0x01,a2)                    	| [$4e47: inc  (ix+$01)]
	jra	l_4e1c                             	| [$4e4a: jp   $4E1C]
l_4e4d:
	lea	table_4E73(pc),a0                  	| [$4e4d: ld   hl,table_4E73]
	move.b	#0x8A,d3                        	| [$4e50: ld   d,$8A]
	jbsr	display_text_B039                 	| [$4e52: call display_text_B039]
	lea	table_4F4B(pc),a0                  	| [$4e55: ld   hl,table_4F4B]
	move.b	#0x93,d3                        	| [$4e58: ld   d,$93]
	move.b	computer_skill_C910,d0          	| [$4e5a: ld   a,(computer_skill_C910)]
	cmp.b	#0x05,d0                         	| [$4e5d: cp   $05]
	jcs	l_4e6f                             	| [$4e5f: jp   c,$4E6F]
	lea	table_4F65(pc),a0                  	| [$4e62: ld   hl,table_4F65]
	cmp.b	#0x08,d0                         	| [$4e65: cp   $08]
	jcs	l_4e6f                             	| [$4e67: jp   c,$4E6F]
	lea	table_4F7F(pc),a0                  	| [$4e6a: ld   hl,table_4F7F]
	move.b	#0x23,d3                        	| [$4e6d: ld   d,$23]
l_4e6f:
	jbsr	display_text_B039                 	| [$4e6f: call display_text_B039]
	rts                                    	| [$4e72: ret]
table_4E73:
	dc.b	0x1a,0x00,0xf1,0xf4,0xf4,0xf4,0xfe,0x1b | table_4E73
	dc.b	0x01,0xf1,0xf4,0xf4,0xfe,0x1c,0x02,0xf1 | $4e7b
	dc.b	0xf4,0xfe,0x09,0x01,0xef,0xf4,0xf0,0xef | $4e83
	dc.b	0xf0,0xfe,0x07,0x02,0xef,0xf4,0xf4,0xf4 | $4e8b
	dc.b	0xf4,0xf4,0xf4,0xf0,0xfe,0x05,0x03,0xef | $4e93
	dc.b	0xf4,0xf4,0xf4,0xf4,0xfe,0x05,0x04,0xf4 | $4e9b
	dc.b	0xf4,0xf4,0xf4,0xf4,0xfe,0x04,0x05,0xef | $4ea3
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4eab
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf0,0xfe,0x16,0x02 | $4eb3
	dc.b	0xef,0xf4,0xf0,0xfe,0x15,0x03,0xef,0xf4 | $4ebb
	dc.b	0xf4,0xf4,0xf0,0xfe,0x14,0x04,0xef,0xf4 | $4ec3
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf0,0xfe,0x14,0x05 | $4ecb
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf2,0xfe | $4ed3
	dc.b	0x03,0x06,0xef,0xf4,0xf4,0xf4,0xf4,0xf4 | $4edb
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4ee3
	dc.b	0xf4,0xf0,0xef,0xf4,0xf4,0xf4,0xf4,0xf4 | $4eeb
	dc.b	0xf4,0xf0,0xfe,0x03,0x07,0xf4,0xf4,0xf4 | $4ef3
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4efb
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4f03
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf0,0xfe,0x03 | $4f0b
	dc.b	0x08,0xf1,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4f13
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4f1b
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4f23
	dc.b	0xf4,0xf4,0xf0,0xfe,0x04,0x09,0xf1,0xf4 | $4f2b
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4f33
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4f3b
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf2,0xff | $4f43
table_4F4B:
	dc.b	0x0a,0x03,0xa9,0xaa,0xab,0xac,0xad,0xae | table_4F4B
	dc.b	0xaf,0xb0,0xb1,0xb2,0xfe,0x0a,0x04,0xb3 | $4f53
	dc.b	0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb | $4f5b
	dc.b	0xbc,0xff | $4f63
table_4F65:
	dc.b	0x0a,0x03,0xbd,0xbe,0xbf,0xc0,0xc1,0xc2 | table_4F65
	dc.b	0xc3,0xc4,0xc5,0xc6,0xfe,0x0a,0x04,0xc7 | $4f6d
	dc.b	0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf | $4f75
	dc.b	0x83,0xff | $4f7d
table_4F7F:
	dc.b	0x0a,0x03,0x00,0x01,0x02,0x03,0x04,0x05 | table_4F7F
	dc.b	0x06,0x07,0x08,0x09,0xfe,0x0a,0x04,0x0a | $4f87
	dc.b	0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12 | $4f8f
	dc.b	0x13,0xff | $4f97
	
task_5250:
	move.b	start_level,d0           	| [$5250: ld   a,$00]
	lea	map_index_C900,a2              	| [$5252: ld   ix,map_index_C900]
	* set background pic index (level 1)
	* only called at bootup & after game over
	move.b	d0,(0x00,a2)                    	| [$5256: ld   (ix+$00),a]
	lea	game_mem+0x53CC,a0                  	| [$5259: ld   hl,table_53CC]
	bsr		store_a0_in_a2_structure_02_address        	| [$525c: ld   (ix+$02),l]
									| [$525f: ld   (ix+$03),h]

	move.b	(a0),d0                         	| [$5262: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$5263: ld   (ix+$01),a]
	* called when game is started
l_5266:
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5266: ld   a,(players_type_human_or_cpu_flags_C02D)]
	move.b	d0,unknown_C032                 	| [$5269: ld   (unknown_C032),a]
	move.b	#0x01,d0                        	| [$526c: ld   a,$01]
	jbsr	schedule_task_to_start_B057                 	| [$526e: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5271: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5272: call nz,display_error_text_B075]
0:
	move.b	#0x80,d0                        	| [$5275: ld   a,$80]
	jbsr	stop_sound_b0ae                            	| [$5277: call $B0AE]
	move.b	dip_switches_copy_C030,d0       	| [$527a: ld   a,(dip_switches_copy_C030)]
	btst.b	#7,d0                           	| [$527d: bit  7,a] free play bit
	jeq	l_5287                             	| [$527f: jp   z,$5287]
	* free play
	move.b	#0x03,d0                        	| [$5282: ld   a,$03]
	move.b	d0,nb_credits_minus_one_C024    	| [$5284: ld   (nb_credits_minus_one_C024),a]
l_5287:
	clr.b	d0                               	| [$5287: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$5289: call suspend_this_task_B05A]
	* reached when coin is inserted
	jbsr	set_normal_screen_b060                            	| [$528c: call $B060]
	move.b	#0x01,d0                        	| [$528f: ld   a,$01]
	jbsr	resume_tasks_b015                            	| [$5291: call $B015]
	move.b	nb_credits_minus_one_C024,d0    	| [$5294: ld   a,(nb_credits_minus_one_C024)]
												| [$5297: and  a]
* after game over check if there are still credits
	jeq	task_5250                             	| [$5298: jp   z,$5250]
	lea	map_index_C900,a2              	| [$529b: ld   ix,map_index_C900]
	lea	unknown_C908,a3                	| [$529f: ld   iy,unknown_C908]
	move.b	start_level,d0                               	| [$52a3: ld   a,$00]
	move.b	d0,(0x00,a2)                    	| [$52a5: ld   (ix+$00),a]
	move.b	d0,(0x00,a3)                    	| [$52a8: ld   (iy+$00),a]
	lea	game_mem+0x534d,a0                  	| [$52ab: ld   hl,table_534d]
	move.b	(a0),d0                         	| [$52ae: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$52af: ld   (ix+$01),a]
	move.b	d0,(0x01,a3)                    	| [$52b2: ld   (iy+$01),a]
	bsr		store_a0_in_a2_structure_02_address | [$52b5: ld   (ix+$02),l]
												| [$52b8: ld   (iy+$02),l]
	bsr		store_a0_in_a3_structure_02_address | [$52bb: ld   (ix+$03),h]
												| [$52be: ld   (iy+$03),h]
	clr.b	d0                               	| [$52c1: ld   a,$00]
	move.b	d0,(0x04,a2)                    	| [$52c3: ld   (ix+$04),a]
	move.b	d0,(0x04,a3)                    	| [$52c6: ld   (iy+$04),a]
	move.b	d0,(0x05,a2)                    	| [$52c9: ld   (ix+$05),a]
	move.b	d0,(0x05,a3)                    	| [$52cc: ld   (iy+$05),a]
	move.b	d0,(0x06,a2)                    	| [$52cf: ld   (ix+$06),a]
	move.b	d0,(0x06,a3)                    	| [$52d2: ld   (iy+$06),a]
	move.b	d0,(0x07,a2)                    	| [$52d5: ld   (ix+$07),a]
	move.b	d0,(0x07,a3)                    	| [$52d8: ld   (iy+$07),a]
	move.b	start_level,level_number_C0DC            	| [$52db: ld   (level_number_C0DC),a]
	move.b	d0,unknown_C0DD                 	| [$52de: ld   (unknown_C0DD),a]
	move.b	d0,unknown_C0DE                 	| [$52e1: ld   (unknown_C0DE),a]
	move.b	d0,unknown_C0DF                 	| [$52e4: ld   (unknown_C0DF),a]
	move.b	d0,unknown_C0E0                 	| [$52e7: ld   (unknown_C0E0),a]
	move.b	d0,unknown_C0E1                 	| [$52ea: ld   (unknown_C0E1),a]
	move.b	d0,unknown_C0E2                 	| [$52ed: ld   (unknown_C0E2),a]
	move.b	d0,unknown_C0E3                 	| [$52f0: ld   (unknown_C0E3),a]
	move.b	d0,unknown_C0E4                 	| [$52f3: ld   (unknown_C0E4),a]
	move.b	d0,unknown_C0E5                 	| [$52f6: ld   (unknown_C0E5),a]
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$52f9: ld   hl,players_type_human_or_cpu_flags_C02D]
	bset.b	#0,(a0)                         	| [$52fc: set  0,(hl)]
	bset.b	#2,(a0)                         	| [$52fe: set  2,(hl)]
	lea	nb_credits_minus_one_C024,a0   	| [$5300: ld   hl,nb_credits_minus_one_C024]
	move.b	(a0),d0                         	| [$5303: ld   a,(hl)]
	moveq	#1,d7
	sbcd.b	d7,d0                        	| [$5304: sub  $01]
	move.b	d0,(a0)                         	| [$5307: ld   (hl),a]
	jbsr	clear_sprite_shadow_ram_C7xx_B01E                    	| [$5308: call $B01E]
	move.b	#0x01,d0                        	| [$530b: ld   a,$01]
	jbsr	suspend_this_task_B05A            	| [$530d: call suspend_this_task_B05A]
	move.w	#0x003C,d1                      	| [$5310: ld   bc,$003C] 60
	jbsr	fill_video_and_attribute_memory_B030                    	| [$5313: call $B030]
	move.b	#0x80,d0                        	| [$5316: ld   a,$80]
	jbsr	play_sound_B072                   	| [$5318: call play_sound_B072]
	* check for 1P or 2P press
l_531b:
	jbsr	enable_interrupts_b0c0                            	| [$531b: call enable_interrupts_b0c0]
	jbsr	display_start_message_7b92                           	| [$531e: call $7B92]
	jbsr	display_credits_7C1C                            	| [$5321: call $7C1C]
	jbsr	check_coin_ports_B069                            	| [$5324: call $B069]
	* check 1P start
	btst.b	#2,d0                           	| [$5327: bit  2,a]
	jne	l_5266                             	| [$5329: jp   nz,$5266]
	move.b	nb_credits_minus_one_C024,d0    	| [$532c: ld   a,(nb_credits_minus_one_C024)]
	tst.b	d0                               	| [$532f: and  a]
	jeq	l_531b                             	| [$5330: jp   z,$531B]
	jbsr	check_coin_ports_B069                            	| [$5333: call $B069]
	btst.b	#3,d0                           	| [$5336: bit  3,a]
	jeq	l_531b                             	| [$5338: jp   z,$531B]
* set 2 player mode
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$533b: ld   hl,players_type_human_or_cpu_flags_C02D]
	bset.b	#1,(a0)                         	| [$533e: set  1,(hl)]
	bset.b	#3,(a0)                         	| [$5340: set  3,(hl)]
	lea	nb_credits_minus_one_C024,a0   	| [$5342: ld   hl,nb_credits_minus_one_C024]
	move.b	(a0),d0                         	| [$5345: ld   a,(hl)]
	moveq	#1,d7
	sbcd.b	d7,d0                        	| [$5346: sub  $01]
	move.b	d0,(a0)                         	| [$5349: ld   (hl),a]
	jra	l_5266                             	| [$534a: jp   $5266]


task_53d2:
	lea	unknown_C0C8,a0                	| [$53d2: ld   hl,unknown_C0C8]
	move.b	#0x10,d1                        	| [$53d5: ld   b,$10]
l_53d7:
	clr.b	(a0)+                             	| [$53d7: ld   (hl),$00]
												| [$53d9: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_53d7                             	| [$53da: djnz $53D7]
	jbsr	set_normal_screen_b060                  	| [$53dc: call $B060]
* 1 player mode (and also at game bootup)
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$53df: ld   hl,players_type_human_or_cpu_flags_C02D]
	bset.b	#2,(a0)                         	| [$53e2: set  2,(hl)]
l_53e4:
	move.b	#0x80,d0                        	| [$53e4: ld   a,$80]
	jbsr	play_sound_B072                   	| [$53e6: call play_sound_B072]
	move.b	#0x02,d0                        	| [$53e9: ld   a,$02]
	jbsr	resume_tasks_b015              	| [$53eb: call resume_tasks_b015]
l_53ee:
	jbsr	clear_sprite_shadow_ram_C7xx_B01E                   	| [$53ee: call clear_sprite_shadow_ram_C7xx_B01E]
	move.b	#0x01,d0                        	| [$53f1: ld   a,$01]
	jbsr	suspend_this_task_B05A                 	| [$53f3: call suspend_this_task_B05A]
	tst.b	d0                               	| [$53f6: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$53f7: call nz,display_error_text_B075]
0:
	move.w	#0x003C,d1                      	| [$53fa: ld   bc,$003C] 60
	jbsr	fill_video_and_attribute_memory_B030	| [$53fd: call fill_video_and_attribute_memory_B030]
	lea	unknown_C908,a0                	| [$5400: ld   hl,unknown_C908]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5403: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$5406: bit  2,a]
	jeq	l_540e                             	| [$5408: jp   z,$540E]
* copy the contents of C900 to C907 (8 bytes)
	lea	map_index_C900,a0              	| [$540b: ld   hl,map_index_C900]
l_540e:
	lea	computer_skill_C910,a1         	| [$540e: ld   de,computer_skill_C910]
	move.w	#0x0008,d1                      	| [$5411: ld   bc,$0008] 8
	jbsr	ldir                              	| [$5414: ldir]
	move.b	#0x03,d0                        	| [$5416: ld   a,$03]
	jbsr	schedule_task_to_start_B057       	| [$5418: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$541b: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$541c: call nz,display_error_text_B075]
0:
	move.b	#0x02,d0                        	| [$541f: ld   a,$02]
	jbsr	schedule_task_to_start_B057       	| [$5421: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5424: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5425: call nz,display_error_text_B075]
0:
	move.b	#0x05,d0                        	| [$5428: ld   a,$05]
	jbsr	schedule_task_to_start_B057       	| [$542a: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$542d: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$542e: call nz,display_error_text_B075]
0:
	move.b	#0x0F,d0                        	| [$5431: ld   a,$0F]
	jbsr	schedule_task_to_start_B057       	| [$5433: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5436: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5437: call nz,display_error_text_B075]
0:
	clr.b	d0                               	| [$543a: ld   a,$00]
	jbsr	suspend_this_task_B05A                 	| [$543c: call suspend_this_task_B05A]
	jbsr	l_5974                            	| [$543f: call $5974]
	tst.b	d0                               	| [$5442: and  a]
	jeq	l_53e4                             	| [$5443: jp   z,$53E4]
	clr.b	d0                               	| [$5446: ld   a,$00]
	move.b	d0,d1                           	| [$5448: ld   b,a]
	jbsr	task_manipulation_B05D            	| [$5449: call task_manipulation_B05D]
	jbsr	task_yield_B051                  	| [$544c: call task_yield_B051]
task_544f:
	jbsr	display_background_picture_7A89                            	| [$544f: call $7A89]
	jbsr	l_7ad6                            	| [$5452: call $7AD6]
	jbsr	is_title_screen_demo_mode_B0B1    	| [$5455: call is_title_screen_demo_mode_B0B1]
	tst.b	d0                               	| [$5458: and  a]
	jeq	l_5464                             	| [$5459: jp   z,$5464]
	jbsr	display_players_rank_B0B4          	| [$545c: call $B0B4]
	clr.b	d0                               	| [$545f: ld   a,$00]
	jbsr	l_b018                            	| [$5461: call $B018]
l_5464:
	clr.w	d0                               	| [$546c: ld   b,$00]
	move.b	background_and_state_bits_C911,d0	| [$5464: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$5467: res  7,a]
	* long pointer, *4 not *2 so needs word shift else using byte picks wrong address!!
	lsl.w	#2,d0                            	| [$5469: sla  a] *4
												| [$546b: ld   c,a]
	lea	jump_table_547B(pc),a2             	| [$546e: ld   ix,jump_table_547B]
	add.w	d0,a2                            	| [$5472: add  ix,bc]
	move.l	(a2),a0                    		| [$5474: ld   l,(ix+$00)]
											| [$5477: ld   h,(ix+$01)]
	jra	(a0)                               	| [$547a: jp   (hl)]
	

jump_table_547B:
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_56f8
	.long	l_b084
	.long	l_4d84
	.long	l_56f8
	.long	l_b087
	.long	l_56f8
	.long	l_4d84
	.long	l_56f8
	.long	l_4d84
	.long	l_b08a
	.long	l_b08d
	.long	l_4d84
	.long	0
	.long	0
	.long	0
	.long	0
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	start_round_58c7
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_78ea
	.long	l_b078
	.long	l_b07b
	.long	practice_screen_5f2a
	.long	l_5bf4
	.long	l_5836
	.long	display_error_text_B075


l_5529:
	clr.b	d0                               	| [$5529: ld   a,$00]
	move.b	d0,unknown_C147                 	| [$552b: ld   (unknown_C147),a]
	move.b	d0,unknown_C148                 	| [$552e: ld   (unknown_C148),a]
l_5531:
	move.b	#0x0A,d0                        	| [$5531: ld   a,$0A]
	jbsr	schedule_task_to_start_B057       	| [$5533: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5536: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5537: call nz,display_error_text_B075]
0:
	move.b	#0x0B,d0                        	| [$553a: ld   a,$0B]
	jbsr	schedule_task_to_start_B057       	| [$553c: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$553f: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5540: call nz,display_error_text_B075]
0:
	move.b	#0x04,d0                        	| [$5543: ld   a,$04]
	jbsr	schedule_task_to_start_B057       	| [$5545: call schedule_task_to_start_B057]
	move.b	#0x03,d0                        	| [$5548: ld   a,$03]
	jbsr	schedule_task_to_start_B057       	| [$554a: call schedule_task_to_start_B057]
	move.b	#0x07,d0                        	| [$554d: ld   a,$07]
	jbsr	schedule_task_to_start_B057       	| [$554f: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5552: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5553: call nz,display_error_text_B075]
0:
	move.b	#0x08,d0                        	| [$5556: ld   a,$08]
	jbsr	schedule_task_to_start_B057       	| [$5558: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$555b: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$555c: call nz,display_error_text_B075]
0:
	move.b	#0x09,d0                        	| [$555f: ld   a,$09]
	jbsr	schedule_task_to_start_B057       	| [$5561: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5564: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5565: call nz,display_error_text_B075]
0:
l_5568:
	clr.b	d0                               	| [$5568: ld   a,$00]
	jbsr	suspend_this_task_B05A                 	| [$556a: call suspend_this_task_B05A]
	cmp.b	#0x08,d0                         	| [$556d: cp   $08]
	jne	l_559c                             	| [$556f: jp   nz,$559C]
	move.b	#0x0A,d0                        	| [$5572: ld   a,$0A]
	move.b	#0x08,d1                        	| [$5574: ld   b,$08]
	jbsr	task_manipulation_B05D            	| [$5576: call task_manipulation_B05D]
	move.b	#0x0B,d0                        	| [$5579: ld   a,$0B]
	move.b	#0x08,d1                        	| [$557b: ld   b,$08]
	jbsr	task_manipulation_B05D            	| [$557d: call task_manipulation_B05D]
	move.b	#0x08,d0                        	| [$5580: ld   a,$08]
	move.b	#0x09,d1                        	| [$5582: ld   b,$09]
	jbsr	task_manipulation_B05D            	| [$5584: call task_manipulation_B05D]
	move.b	#0x09,d0                        	| [$5587: ld   a,$09]
	move.b	#0x09,d1                        	| [$5589: ld   b,$09]
	jbsr	task_manipulation_B05D            	| [$558b: call task_manipulation_B05D]
	move.b	#0x07,d0                        	| [$558e: ld   a,$07]
	move.b	#0x08,d1                        	| [$5590: ld   b,$08]
	jbsr	task_manipulation_B05D            	| [$5592: call task_manipulation_B05D]
	tst.b	d0                               	| [$5595: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5596: call nz,display_error_text_B075]
0:
	jra	l_5568                             	| [$5599: jp   $5568]
l_559c:
	cmp.b	#0x01,d0                         	| [$559c: cp   $01]
	jeq	l_55a9                             	| [$559e: jp   z,$55A9]
	cmp.b	#0x02,d0                         	| [$55a1: cp   $02]
	jeq	l_5650                             	| [$55a3: jp   z,$5650]
	jbsr	display_error_text_B075           	| [$55a6: call display_error_text_B075]
l_55a9:
	move.b	#0x80,d0                        	| [$55a9: ld   a,$80]
	jbsr	play_sound_B072                   	| [$55ab: call play_sound_B072]
	move.b	#0x07,d0                        	| [$55ae: ld   a,$07]
	jbsr	resume_task_B054               	| [$55b0: call resume_task_B054]
	move.b	#0x08,d0                        	| [$55b3: ld   a,$08]
	jbsr	resume_task_B054               	| [$55b5: call resume_task_B054]
	move.b	#0x09,d0                        	| [$55b8: ld   a,$09]
	jbsr	resume_task_B054               	| [$55ba: call resume_task_B054]
	move.b	#0x0B,d0                        	| [$55bd: ld   a,$0B]
	jbsr	resume_task_B054               	| [$55bf: call resume_task_B054]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$55c2: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$55c5: bit  2,a]
	jeq	l_5614                             	| [$55c7: jp   z,$5614]
	move.b	match_timer_C167,d0             	| [$55ca: ld   a,(match_timer_C167)]
	tst.b	d0                               	| [$55cd: and  a]
	jeq	l_5614                             	| [$55ce: jp   z,$5614]
l_55d1:
	move.b	match_timer_C167,d0             	| [$55d1: ld   a,(match_timer_C167)]
	moveq	#1,d7
	sbcd.b	d7,d0                        	| [$55d4: sub  $01]
	move.b	d0,match_timer_C167             	| [$55d7: ld   (match_timer_C167),a]
	jbsr	l_64fb                            	| [$55da: call $64FB]
	move.b	#0x08,d0                        	| [$55dd: ld   a,$08]
	jbsr	play_sound_B072                   	| [$55df: call play_sound_B072]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$55e2: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x0C,d0                         	| [$55e5: and  $0C]
	cmp.b	#0x0C,d0                         	| [$55e7: cp   $0C]
	jne	l_55fe                             	| [$55e9: jp   nz,$55FE]
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$55ec: ld   hl,players_type_human_or_cpu_flags_C02D]
	bclr.b	#3,(a0)                         	| [$55ef: res  3,(hl)]
	move.b	#0x01,d0                        	| [$55f1: ld   a,$01]
	jbsr	l_b018                            	| [$55f3: call $B018]
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$55f6: ld   hl,players_type_human_or_cpu_flags_C02D]
	bset.b	#3,(a0)                         	| [$55f9: set  3,(hl)]
	jra	l_5603                             	| [$55fb: jp   $5603]
l_55fe:
	move.b	#0x01,d0                        	| [$55fe: ld   a,$01]
	jbsr	l_b018                            	| [$5600: call $B018]
l_5603:
	move.b	#0x06,d0                        	| [$5603: ld   a,$06]
	jbsr	suspend_this_task_B05A                 	| [$5605: call suspend_this_task_B05A]
	move.b	match_timer_C167,d0             	| [$5608: ld   a,(match_timer_C167)]
	tst.b	d0                               	| [$560b: and  a]
	jne	l_55d1                             	| [$560c: jp   nz,$55D1]
	move.b	#0x3C,d0                        	| [$560f: ld   a,$3C]
	jbsr	suspend_this_task_B05A                 	| [$5611: call suspend_this_task_B05A]
l_5614:
	move.b	#0x07,d0                        	| [$5614: ld   a,$07]
	jbsr	resume_task_B054               	| [$5616: call resume_task_B054]
	move.b	#0x0A,d0                        	| [$5619: ld   a,$0A]
	jbsr	resume_task_B054               	| [$561b: call resume_task_B054]
	move.b	background_and_state_bits_C911,d0	| [$561e: ld   a,(background_and_state_bits_C911)]
	btst.b	#7,d0                           	| [$5621: bit  7,a]
	jne	l_5643                             	| [$5623: jp   nz,$5643]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5626: ld   a,(players_type_human_or_cpu_flags_C02D)]
	cmp.b	#0x0A,d0                         	| [$5629: cp   $0A]
	jeq	l_5638                             	| [$562b: jp   z,$5638]
	lea	unknown_C148,a0                	| [$562e: ld   hl,unknown_C148]
	addq.b	#1,(a0)                         	| [$5631: inc  (hl)]
	move.b	(a0),d0                         	| [$5632: ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [$5633: cp   $02]
	jcs	l_5531                             	| [$5635: jp   c,$5531]
l_5638:
	lea	unknown_C0E0,a0                	| [$5638: ld   hl,unknown_C0E0]
	jbsr	l_5f09                            	| [$563b: call $5F09]
	move.b	#0x64,d0                        	| [$563e: ld   a,$64]
	jbsr	suspend_this_task_B05A                 	| [$5640: call suspend_this_task_B05A]
l_5643:
	move.b	#0x01,d0                        	| [$5643: ld   a,$01]
	move.b	d0,d1                           	| [$5645: ld   b,a]
	jbsr	task_manipulation_B05D            	| [$5646: call task_manipulation_B05D]
	tst.b	d0                               	| [$5649: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$564a: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                  	| [$564d: call task_yield_B051]
l_5650:
	move.b	#0x80,d0                        	| [$5650: ld   a,$80]
	jbsr	play_sound_B072                   	| [$5652: call play_sound_B072]
	move.b	#0x07,d0                        	| [$5655: ld   a,$07]
	jbsr	resume_task_B054               	| [$5657: call resume_task_B054]
	move.b	#0x08,d0                        	| [$565a: ld   a,$08]
	jbsr	resume_task_B054               	| [$565c: call resume_task_B054]
	move.b	#0x09,d0                        	| [$565f: ld   a,$09]
	jbsr	resume_task_B054               	| [$5661: call resume_task_B054]
	move.b	#0x0A,d0                        	| [$5664: ld   a,$0A]
	jbsr	resume_task_B054               	| [$5666: call resume_task_B054]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5669: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#3,d0                           	| [$566c: bit  3,a]
	jeq	l_56bb                             	| [$566e: jp   z,$56BB]
	move.b	match_timer_C167,d0             	| [$5671: ld   a,(match_timer_C167)]
												| [$5674: and  a]
	jeq	l_56bb                             	| [$5675: jp   z,$56BB]
l_5678:
	move.b	match_timer_C167,d0             	| [$5678: ld   a,(match_timer_C167)]
	moveq	#1,d7
	sbcd.b	d7,d0                        	| [$567b: sub  $01]	move.b	d0,match_timer_C167             	| [$567e: ld   (match_timer_C167),a]
	jbsr	l_64fb                            	| [$5681: call $64FB]
	move.b	#0x08,d0                        	| [$5684: ld   a,$08]
	jbsr	play_sound_B072                   	| [$5686: call play_sound_B072]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5689: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x0C,d0                         	| [$568c: and  $0C]
	cmp.b	#0x0C,d0                         	| [$568e: cp   $0C]
	jne	l_56a5                             	| [$5690: jp   nz,$56A5]
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$5693: ld   hl,players_type_human_or_cpu_flags_C02D]
	bclr.b	#2,(a0)                         	| [$5696: res  2,(hl)]
	move.b	#0x01,d0                        	| [$5698: ld   a,$01]
	jbsr	l_b018                            	| [$569a: call $B018]
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$569d: ld   hl,players_type_human_or_cpu_flags_C02D]
	bset.b	#2,(a0)                         	| [$56a0: set  2,(hl)]
	jra	l_56aa                             	| [$56a2: jp   $56AA]
l_56a5:
	move.b	#0x01,d0                        	| [$56a5: ld   a,$01]
	jbsr	l_b018                            	| [$56a7: call $B018]
l_56aa:
	move.b	#0x06,d0                        	| [$56aa: ld   a,$06]
	jbsr	suspend_this_task_B05A                 	| [$56ac: call suspend_this_task_B05A]
	move.b	match_timer_C167,d0             	| [$56af: ld   a,(match_timer_C167)]
	tst.b	d0                               	| [$56b2: and  a]
	jne	l_5678                             	| [$56b3: jp   nz,$5678]
	move.b	#0x3C,d0                        	| [$56b6: ld   a,$3C]
	jbsr	suspend_this_task_B05A                 	| [$56b8: call suspend_this_task_B05A]
l_56bb:
	move.b	#0x07,d0                        	| [$56bb: ld   a,$07]
	jbsr	resume_task_B054               	| [$56bd: call resume_task_B054]
	move.b	#0x0B,d0                        	| [$56c0: ld   a,$0B]
	jbsr	resume_task_B054               	| [$56c2: call resume_task_B054]
	move.b	background_and_state_bits_C911,d0	| [$56c5: ld   a,(background_and_state_bits_C911)]
	btst.b	#7,d0                           	| [$56c8: bit  7,a]
	jne	l_56ea                             	| [$56ca: jp   nz,$56EA]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$56cd: ld   a,(players_type_human_or_cpu_flags_C02D)]
	cmp.b	#0x05,d0                         	| [$56d0: cp   $05]
	jeq	l_56df                             	| [$56d2: jp   z,$56DF]
	lea	unknown_C147,a0                	| [$56d5: ld   hl,unknown_C147]
	addq.b	#1,(a0)                         	| [$56d8: inc  (hl)]
	move.b	(a0),d0                         	| [$56d9: ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [$56da: cp   $02]
	jcs	l_5531                             	| [$56dc: jp   c,$5531]
l_56df:
	lea	unknown_C0E3,a0                	| [$56df: ld   hl,unknown_C0E3]
	jbsr	l_5f09                            	| [$56e2: call $5F09]
	move.b	#0x64,d0                        	| [$56e5: ld   a,$64]
	jbsr	suspend_this_task_B05A                 	| [$56e7: call suspend_this_task_B05A]
l_56ea:
	move.b	#0x01,d0                        	| [$56ea: ld   a,$01]
	move.b	#0x02,d1                        	| [$56ec: ld   b,$02]
	jbsr	task_manipulation_B05D            	| [$56ee: call task_manipulation_B05D]
	tst.b	d0                               	| [$56f1: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$56f2: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                  	| [$56f5: call task_yield_B051]

* called at each new level (new background pic)
start_round_58c7:
	move.b	#0x03,d0                        	| [$58c7: ld   a,$03]
	jbsr	play_sound_B072                   	| [$58c9: call play_sound_B072]
	move.b	#0x0A,d0                        	| [$58cc: ld   a,$0A]
	jbsr	schedule_task_to_start_B057       	| [$58ce: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$58d1: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$58d2: call nz,display_error_text_B075]
0:
	move.b	#0x0B,d0                        	| [$58d5: ld   a,$0B]
	jbsr	schedule_task_to_start_B057       	| [$58d7: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$58da: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$58db: call nz,display_error_text_B075]
0:
	move.b	#0x06,d0                        	| [$58de: ld   a,$06]
	jbsr	schedule_task_to_start_B057       	| [$58e0: call schedule_task_to_start_B057]
	move.b	#0x07,d1                        	| [$58e3: ld   b,$07]
l_58e5:
	movem.w	d1/d2,-(sp)                    	| [$58e5: push bc]
	move.b	#0x3F,d0                        	| [$58e6: ld   a,$3F]
	jbsr	suspend_this_task_B05A            	| [$58e8: call suspend_this_task_B05A]
	tst.b	d0                               	| [$58eb: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$58ec: call nz,display_error_text_B075]
0:
	movem.w	(sp)+,d1/d2                    	| [$58ef: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_58e5                             	| [$58f0: djnz $58E5]
	move.b	#0x01,d0                        	| [$58f2: ld   a,$01]
	move.b	d0,d1                           	| [$58f4: ld   b,a]
	jbsr	task_manipulation_B05D            	| [$58f5: call task_manipulation_B05D]
	tst.b	d0                               	| [$58f8: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$58f9: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                   	| [$58fc: call task_yield_B051]
l_58ff:
	move.b	#0x04,d0                        	| [$58ff: ld   a,$04]
	jbsr	play_sound_B072                   	| [$5901: call play_sound_B072]
	move.b	#0x06,d0                        	| [$5904: ld   a,$06]
	jbsr	schedule_task_to_start_B057       	| [$5906: call schedule_task_to_start_B057]
	move.b	#0x05,d1                        	| [$5909: ld   b,$05]
l_590b:
	movem.w	d1/d2,-(sp)                    	| [$590b: push bc]
	move.b	#0x3F,d0                        	| [$590c: ld   a,$3F]
	jbsr	suspend_this_task_B05A            	| [$590e: call suspend_this_task_B05A]
	tst.b	d0                               	| [$5911: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5912: call nz,display_error_text_B075]
0:
	movem.w	(sp)+,d1/d2                    	| [$5915: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_590b                             	| [$5916: djnz $590B]
	move.b	#0x01,d0                        	| [$5918: ld   a,$01]
	move.b	d0,d1                           	| [$591a: ld   b,a]
	jbsr	task_manipulation_B05D            	| [$591b: call task_manipulation_B05D]
	tst.b	d0                               	| [$591e: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$591f: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                   	| [$5922: call task_yield_B051]
l_5925:
	move.b	#0x02,d0                        	| [$5925: ld   a,$02]
	jbsr	play_sound_B072                   	| [$5927: call play_sound_B072]
	move.b	#0x06,d0                        	| [$592a: ld   a,$06]
	jbsr	schedule_task_to_start_B057       	| [$592c: call schedule_task_to_start_B057]
	move.b	#0x02,d1                        	| [$592f: ld   b,$02]
l_5931:
	movem.w	d1/d2,-(sp)                    	| [$5931: push bc]
	move.b	#0x3F,d0                        	| [$5932: ld   a,$3F]
	jbsr	suspend_this_task_B05A            	| [$5934: call suspend_this_task_B05A]
	tst.b	d0                               	| [$5937: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5938: call nz,display_error_text_B075]
0:
	movem.w	(sp)+,d1/d2                    	| [$593b: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_5931                             	| [$593c: djnz $5931]
	lea	table_77b9(pc),a0                  	| [$593e: ld   hl,table_77b9]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5941: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x03,d0                         	| [$5944: and  $03]
	cmp.b	#0x03,d0                         	| [$5946: cp   $03]
	jne	l_5959                             	| [$5948: jp   nz,$5959]
	lea	table_78b7(pc),a0                  	| [$594b: ld   hl,table_78b7]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$594e: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$5951: bit  2,a]
	jne	l_5959                             	| [$5953: jp   nz,$5959]
	lea	table_7884(pc),a0                  	| [$5956: ld   hl,table_7884]
l_5959:
	move.b	#0x98,d3                        	| [$5959: ld   d,$98]
	jbsr	display_text_B039                 	| [$595b: call display_text_B039]
	move.b	#0x50,d0                        	| [$595e: ld   a,$50]
	jbsr	suspend_this_task_B05A            	| [$5960: call suspend_this_task_B05A]
	tst.b	d0                               	| [$5963: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5964: call nz,display_error_text_B075]
0:
	move.b	#0x01,d0                        	| [$5967: ld   a,$01]
	move.b	d0,d1                           	| [$5969: ld   b,a]
	jbsr	task_manipulation_B05D            	| [$596a: call task_manipulation_B05D]
	tst.b	d0                               	| [$596d: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$596e: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                   	| [$5971: call task_yield_B051]


l_5974:
	move.b	d0,d1                           	| [$5974: ld   b,a]
	move.b	background_and_state_bits_C911,d0	| [$5975: ld   a,(background_and_state_bits_C911)]
	btst.b	#7,d0                           	| [$5978: bit  7,a]
	jne	l_5b52                             	| [$597a: jp   nz,$5B52]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$597d: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x03,d0                         	| [$5980: and  $03]
	cmp.b	#0x03,d0                         	| [$5982: cp   $03]
	jeq	l_59ff                             	| [$5984: jp   z,$59FF]
	move.b	background_and_state_bits_C911,d0	| [$5987: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$598a: res  7,a]
	cmp.b	#0x51,d0                         	| [$598c: cp   $51]
	jne	l_599c                             	| [$598e: jp   nz,$599C]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5991: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0xF0,d0                         	| [$5994: and  $F0]
	move.b	d0,players_type_human_or_cpu_flags_C02D	| [$5996: ld   (players_type_human_or_cpu_flags_C02D),a]
	st.b	d0                                	| [$5999: ld   a,$FF]
	rts                                    	| [$599b: ret]
l_599c:
	cmp.b	#0x10,d0                         	| [$599c: cp   $10]
	jcc	l_5b5c                             	| [$599e: jp   nc,$5B5C]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$59a1: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$59a4: bit  2,a]
	jeq	l_59c5                             	| [$59a6: jp   z,$59C5]
	lea	map_index_C900,a2              	| [$59a9: ld   ix,map_index_C900]
	move.b	d1,d0                           	| [$59ad: ld   a,b]
	cmp.b	#0x01,d0                         	| [$59ae: cp   $01]
	jne	l_59f9                             	| [$59b0: jp   nz,$59F9]
* increase level
	lea	level_number_C0DC,a0           	| [$59b3: ld   hl,level_number_C0DC]
	addq.b	#1,(a0)                         	| [$59b6: inc  (hl)]
	move.b	unknown_C914,d0                 	| [$59b7: ld   a,(unknown_C914)]
	cmp.b	#0xFF,d0                         	| [$59ba: cp   $FF]
	jeq	l_59e6                             	| [$59bc: jp   z,$59E6]
* increase level number too (separate counters than C0DC: C900)
	addq.b	#1,(0x00,a2)                    	| [$59bf: inc  (ix+$00)]
	jra	l_5b5c                             	| [$59c2: jp   $5B5C]
l_59c5:
	btst.b	#3,d0                           	| [$59c5: bit  3,a]
	bne	0f
	jbsr	display_error_text_B075           	| [$59c7: call z,display_error_text_B075]
0:
	lea	unknown_C908,a2                	| [$59ca: ld   ix,unknown_C908]
	move.b	d1,d0                           	| [$59ce: ld   a,b]
	cmp.b	#0x02,d0                         	| [$59cf: cp   $02]
	jne	l_59f9                             	| [$59d1: jp   nz,$59F9]
	lea	level_number_C0DC,a0           	| [$59d4: ld   hl,level_number_C0DC]
	addq.b	#1,(a0)                         	| [$59d7: inc  (hl)]
	move.b	unknown_C914,d0                 	| [$59d8: ld   a,(unknown_C914)]
	cmp.b	#0xFF,d0                         	| [$59db: cp   $FF]
	jeq	l_59e6                             	| [$59dd: jp   z,$59E6]
	addq.b	#1,(0x00,a2)                    	| [$59e0: inc  (ix+$00)]
	jra	l_5b5c                             	| [$59e3: jp   $5B5C]
l_59e6:
	addq.b	#1,(0x00,a2)                    	| [$59e6: inc  (ix+$00)]
	lea	game_mem+0x53C9,a0                  	| [$59e9: ld   hl,table_53C9]
	move.b	(a0),d0                         	| [$59ec: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$59ed: ld   (ix+$01),a]
	bsr		store_a0_in_a2_structure_02_address   | [$59f0: ld   (ix+$02),l]
	                                              | [$59f3: ld   (ix+$03),h]
	jra	return_zero_in_A_5B7A              	| [$59f6: jp   return_zero_in_A_5B7A]
l_59f9:
	jbsr	l_5b7d                            	| [$59f9: call $5B7D]
	jra	return_zero_in_A_5B7A              	| [$59fc: jp   return_zero_in_A_5B7A]
l_59ff:
	move.b	background_and_state_bits_C911,d0	| [$59ff: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$5a02: res  7,a]
	cmp.b	#0x10,d0                         	| [$5a04: cp   $10]
	jcc	l_5ab8                             	| [$5a06: jp   nc,$5AB8]
	move.b	d1,d0                           	| [$5a09: ld   a,b]
	cmp.b	#0x01,d0                         	| [$5a0a: cp   $01]
	jne	l_5a61                             	| [$5a0c: jp   nz,$5A61]
	lea	level_number_C0DC,a0           	| [$5a0f: ld   hl,level_number_C0DC]
	addq.b	#1,(a0)                         	| [$5a12: inc  (hl)]
	lea	map_index_C900,a2              	| [$5a13: ld   ix,map_index_C900]
	addq.b	#1,(0x00,a2)                    	| [$5a17: inc  (ix+$00)]
	move.b	(0x01,a2),d1                    	| [$5a1a: ld   b,(ix+$01)]
	movem.w	d1/d2,-(sp)                    	| [$5a1d: push bc]
	move.b	d1,(0x05,a2)                    	| [$5a1e: ld   (ix+$05),b]
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$5a21: ld   hl,players_type_human_or_cpu_flags_C02D]
	bclr.b	#2,(a0)                         	| [$5a24: res  2,(hl)]
	move.b	unknown_C914,d0                 	| [$5a26: ld   a,(unknown_C914)]
	cmp.b	#0xFF,d0                         	| [$5a29: cp   $FF]
	jne	l_5a42                             	| [$5a2b: jp   nz,$5A42]
	lea	game_mem+0x53C9,a0                  	| [$5a2e: ld   hl,table_53C9]
	lea	map_index_C900,a2              	| [$5a31: ld   ix,map_index_C900]
	move.b	(a0),d0                         	| [$5a35: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$5a36: ld   (ix+$01),a]
	bsr		store_a0_in_a2_structure_02_address  | [$5a39: ld   (ix+$02),l]
	                                             | [$5a3c: ld   (ix+$03),h]
	jra	l_5a49                             	| [$5a3f: jp   $5A49]
l_5a42:
	lea	map_index_C900,a2              	| [$5a42: ld   ix,map_index_C900]
	jbsr	init_level_params_5BA1                            	| [$5a46: call $5BA1]
l_5a49:
	lea	game_mem+0x53C6,a0                  	| [$5a49: ld   hl,table_53C6]
	movem.w	(sp)+,d1/d2                    	| [$5a4c: pop  bc]
	lea	unknown_C908,a2                	| [$5a4d: ld   ix,unknown_C908]
	move.b	d1,(0x05,a2)                    	| [$5a51: ld   (ix+$05),b]
	move.b	(a0),d0                         	| [$5a54: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$5a55: ld   (ix+$01),a]
	bsr		store_a0_in_a2_structure_02_address  | [$5a58: ld   (ix+$02),l]
	                                             | [$5a5b: ld   (ix+$03),h]
	jra	return_zero_in_A_5B7A              	| [$5a5e: jp   return_zero_in_A_5B7A]
l_5a61:
	cmp.b	#0x02,d0                         	| [$5a61: cp   $02]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5a63: call nz,display_error_text_B075]
0:
	lea	level_number_C0DC,a0           	| [$5a66: ld   hl,level_number_C0DC]
	addq.b	#1,(a0)                         	| [$5a69: inc  (hl)]
	lea	unknown_C908,a2                	| [$5a6a: ld   ix,unknown_C908]
	addq.b	#1,(0x00,a2)                    	| [$5a6e: inc  (ix+$00)]
	move.b	(0x01,a2),d1                    	| [$5a71: ld   b,(ix+$01)]
	movem.w	d1/d2,-(sp)                    	| [$5a74: push bc]
	move.b	d1,(0x05,a2)                    	| [$5a75: ld   (ix+$05),b]
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$5a78: ld   hl,players_type_human_or_cpu_flags_C02D]
	bclr.b	#3,(a0)                         	| [$5a7b: res  3,(hl)]
	move.b	unknown_C914,d0                 	| [$5a7d: ld   a,(unknown_C914)]
	cmp.b	#0xFF,d0                         	| [$5a80: cp   $FF]
	jne	l_5a99                             	| [$5a82: jp   nz,$5A99]
	lea	game_mem+0x53C9,a0                  	| [$5a85: ld   hl,table_53C9]
	lea	unknown_C908,a2                	| [$5a88: ld   ix,unknown_C908]
	move.b	(a0),d0                         	| [$5a8c: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$5a8d: ld   (ix+$01),a]
	bsr		store_a0_in_a2_structure_02_address  | [$5a90: ld   (ix+$02),l]
	                                             | [$5a93: ld   (ix+$03),h]
	jra	l_5aa0                             	| [$5a96: jp   $5AA0]
l_5a99:
	lea	unknown_C908,a2                	| [$5a99: ld   ix,unknown_C908]
	jbsr	init_level_params_5BA1                            	| [$5a9d: call $5BA1]
l_5aa0:
	lea	game_mem+0x53C6,a0                  	| [$5aa0: ld   hl,table_53C6]
	movem.w	(sp)+,d1/d2                    	| [$5aa3: pop  bc]
	lea	map_index_C900,a2              	| [$5aa4: ld   ix,map_index_C900]
	move.b	d1,(0x05,a2)                    	| [$5aa8: ld   (ix+$05),b]
	move.b	(a0),d0                         	| [$5aab: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$5aac: ld   (ix+$01),a]
	bsr		store_a0_in_a2_structure_02_address  | [$5aaf: ld   (ix+$02),l]
	                                             | [$5ab2: ld   (ix+$03),h]
	jra	return_zero_in_A_5B7A              	| [$5ab5: jp   return_zero_in_A_5B7A]
l_5ab8:
	move.b	background_and_state_bits_C911,d0	| [$5ab8: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$5abb: res  7,a]
	cmp.b	#0x51,d0                         	| [$5abd: cp   $51]
	jne	l_5afa                             	| [$5abf: jp   nz,$5AFA]
	move.b	unknown_C914,d0                 	| [$5ac2: ld   a,(unknown_C914)]
	cmp.b	#0xFF,d0                         	| [$5ac5: cp   $FF]
	jeq	l_5ad5                             	| [$5ac7: jp   z,$5AD5]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5aca: ld   a,(players_type_human_or_cpu_flags_C02D)]
	eor.b	#0x0C,d0                         	| [$5acd: xor  $0C]
	move.b	d0,players_type_human_or_cpu_flags_C02D	| [$5acf: ld   (players_type_human_or_cpu_flags_C02D),a]
	jra	return_zero_in_A_5B7A              	| [$5ad2: jp   return_zero_in_A_5B7A]
l_5ad5:
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5ad5: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$5ad8: bit  2,a]
	jeq	l_5ae9                             	| [$5ada: jp   z,$5AE9]
	bclr.b	#0,d0                           	| [$5add: res  0,a]
	bclr.b	#2,d0                           	| [$5adf: res  2,a]
	bset.b	#3,d0                           	| [$5ae1: set  3,a]
	move.b	d0,players_type_human_or_cpu_flags_C02D	| [$5ae3: ld   (players_type_human_or_cpu_flags_C02D),a]
	jra	return_zero_in_A_5B7A              	| [$5ae6: jp   return_zero_in_A_5B7A]
l_5ae9:
	btst.b	#3,d0                           	| [$5ae9: bit  3,a]
	bne.b	0f
	jbsr	display_error_text_B075           	| [$5aeb: call z,display_error_text_B075]
0:
	bclr.b	#1,d0                           	| [$5aee: res  1,a]
	bclr.b	#3,d0                           	| [$5af0: res  3,a]
	bset.b	#2,d0                           	| [$5af2: set  2,a]
	move.b	d0,players_type_human_or_cpu_flags_C02D	| [$5af4: ld   (players_type_human_or_cpu_flags_C02D),a]
	jra	return_zero_in_A_5B7A              	| [$5af7: jp   return_zero_in_A_5B7A]
l_5afa:
	cmp.b	#0x55,d0                         	| [$5afa: cp   $55]
	jne	l_5b5c                             	| [$5afc: jp   nz,$5B5C]
	lea	map_index_C900,a2              	| [$5aff: ld   ix,map_index_C900]
	move.b	(0x01,a2),d0                    	| [$5b03: ld   a,(ix+$01)]
	cmp.b	#0x55,d0                         	| [$5b06: cp   $55]
	jeq	l_5b0f                             	| [$5b08: jp   z,$5B0F]
	lea	unknown_C908,a2                	| [$5b0b: ld   ix,unknown_C908]
l_5b0f:
	jbsr	init_level_params_5BA1                            	| [$5b0f: call $5BA1]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5b12: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x0F,d0                         	| [$5b15: and  $0F]
	cmp.b	#0x0F,d0                         	| [$5b17: cp   $0F]
	jne	l_5b40                             	| [$5b19: jp   nz,$5B40]
	move.b	unknown_C901,d0                 	| [$5b1c: ld   a,(unknown_C901)]
	cmp.b	#0x51,d0                         	| [$5b1f: cp   $51]
	jne	l_5b32                             	| [$5b21: jp   nz,$5B32]
	lea	unknown_C909,a0                	| [$5b24: ld   hl,unknown_C909]
	lea	unknown_C901,a1                	| [$5b27: ld   de,unknown_C901]
	move.w	#0x0003,d1                      	| [$5b2a: ld   bc,$0003] 3
	jbsr	ldir                              	| [$5b2d: ldir]
	jra	return_zero_in_A_5B7A              	| [$5b2f: jp   return_zero_in_A_5B7A]
l_5b32:
	lea	unknown_C901,a0                	| [$5b32: ld   hl,unknown_C901]
	lea	unknown_C909,a1                	| [$5b35: ld   de,unknown_C909]
	move.w	#0x0003,d1                      	| [$5b38: ld   bc,$0003] 3
	jbsr	ldir                              	| [$5b3b: ldir]
	jra	return_zero_in_A_5B7A              	| [$5b3d: jp   return_zero_in_A_5B7A]
l_5b40:
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$5b40: ld   hl,players_type_human_or_cpu_flags_C02D]
	cmp.b	#0x0B,d0                         	| [$5b43: cp   $0B]
	jne	l_5b4d                             	| [$5b45: jp   nz,$5B4D]
	bclr.b	#0,(a0)                         	| [$5b48: res  0,(hl)]
	jra	return_zero_in_A_5B7A              	| [$5b4a: jp   return_zero_in_A_5B7A]
l_5b4d:
	bclr.b	#1,(a0)                         	| [$5b4d: res  1,(hl)]
	jra	return_zero_in_A_5B7A              	| [$5b4f: jp   return_zero_in_A_5B7A]
l_5b52:
	lea	unknown_C0C8,a0                	| [$5b52: ld   hl,unknown_C0C8]
	move.b	#0x10,d1                        	| [$5b55: ld   b,$10]
l_5b57:
	clr.b	(a0)+                             	| [$5b57: ld   (hl),$00]
										| [$5b59: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_5b57                             	| [$5b5a: djnz $5B57]
l_5b5c:
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5b5c: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$5b5f: bit  2,a]
	jeq	l_5b6b                             	| [$5b61: jp   z,$5B6B]
	lea	map_index_C900,a2              	| [$5b64: ld   ix,map_index_C900]
	jbsr	init_level_params_5BA1                            	| [$5b68: call $5BA1]
l_5b6b:
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5b6b: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#3,d0                           	| [$5b6e: bit  3,a]
	jeq	return_zero_in_A_5B7A              	| [$5b70: jp   z,return_zero_in_A_5B7A]
	lea	unknown_C908,a2                	| [$5b73: ld   ix,unknown_C908]
	jbsr	init_level_params_5BA1                            	| [$5b77: call $5BA1]
return_zero_in_A_5B7A:
	clr.b	d0                               	| [$5b7a: ld   a,$00]
	rts                                    	| [$5b7c: ret]
l_5b7d:
	lea	unknown_C908,a2                	| [$5b7d: ld   ix,unknown_C908]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5b81: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$5b84: bit  2,a]
	jeq	l_5b8d                             	| [$5b86: jp   z,$5B8D]
	lea	map_index_C900,a2              	| [$5b89: ld   ix,map_index_C900]
l_5b8d:
	move.b	(0x01,a2),d1                    	| [$5b8d: ld   b,(ix+$01)]
	move.b	d1,(0x05,a2)                    	| [$5b90: ld   (ix+$05),b]
	lea	game_mem+0x53C6,a0                  	| [$5b93: ld   hl,table_53C6]
	move.b	(a0),d0                         	| [$5b96: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$5b97: ld   (ix+$01),a]
	bsr		store_a0_in_a2_structure_02_address   | [$5b9a: ld   (ix+$02),l]
	                    	                      | [$5b9d: ld   (ix+$03),h]
	rts                                    	| [$5ba0: ret]
init_level_params_5BA1:
	move.b	background_and_state_bits_C911,d0	| [$5ba1: ld   a,(background_and_state_bits_C911)]
	btst.b	#7,d0                           	| [$5ba4: bit  7,a]
	jeq	l_5bca                             	| [$5ba6: jp   z,$5BCA]
	bsr		load_a0_from_a2_structure_02_address   	| [$5ba9: ld   l,(ix+$02)]
	                    	| [$5bac: ld   h,(ix+$03)]
	                      	| [$5baf: ld   bc,$0001] 1
	addq.w	#1,a0                            	| [$5bb2: add  hl,bc]
	move.b	(a0),d0                         	| [$5bb3: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$5bb4: cp   $FF]
	jne	l_5bc0                             	| [$5bb6: jp   nz,$5BC0]
	addq.w	#1,a0                           	| [$5bb9: inc  hl]
	bsr		load_a1_from_a0                  	| [$5bba: ld   c,(hl)]
												| [$5bbb: inc  hl]
												| [$5bbc: ld   b,(hl)]
	movel	a1,a0            	        	| [$5bbd: push bc]
												| [$5bbe: pop  hl]
	move.b	(a0),d0                         	| [$5bbf: ld   a,(hl)]
l_5bc0:
	move.b	d0,(0x01,a2)                    	| [$5bc0: ld   (ix+$01),a]
	bsr		store_a0_in_a2_structure_02_address  |  [$5bc3: ld   (ix+$02),l]
										         | [$5bc6: ld   (ix+$03),h]
	rts                                    	| [$5bc9: ret]
l_5bca:
	bsr		load_a0_from_a2_structure_02_address    | [$5bca: ld   l,(ix+$02)]
	                    	| [$5bcd: ld   h,(ix+$03)]
	                      	| [$5bd0: ld   bc,$0001] 1
	addq.w	#1,a0                            	| [$5bd3: add  hl,bc]
	move.b	(a0),d0                         	| [$5bd4: ld   a,(hl)]
	move.b	d0,d1                           	| [$5bd5: ld   b,a]
	and.b	#0xF0,d0                         	| [$5bd6: and  $F0]
	cmp.b	#0x40,d0                         	| [$5bd8: cp   $40]
	jne	l_5be2                             	| [$5bda: jp   nz,$5BE2]
	move.b	(0x05,a2),d0                    	| [$5bdd: ld   a,(ix+$05)]
	or.b	d1,d0                             	| [$5be0: or   b]
	move.b	d0,d1                           	| [$5be1: ld   b,a]
l_5be2:
	move.b	d1,(0x01,a2)                    	| [$5be2: ld   (ix+$01),b]
	bsr		store_a0_in_a2_structure_02_address | [$5be5: ld   (ix+$02),l]
												| [$5be8: ld   (ix+$03),h]
	addq.w	#1,a0                           	| [$5beb: inc  hl]
	move.b	(a0),d0                         	| [$5bec: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$5bed: cp   $FF]
	beq.b	0f
	rts                                    	| [$5bef: ret  nz]
0:
	move.b	d0,(0x04,a2)                    	| [$5bf0: ld   (ix+$04),a]
	rts                                    	| [$5bf3: ret]
	
	
practice_screen_5f2a:
	move.w	#0xA431,d1                      	| [$5f2a: ld   bc,$A431]
	jbsr	fill_video_and_attribute_memory_B030	| [$5f2d: call fill_video_and_attribute_memory_B030]
	lea	game_mem+0x83e9,a0                  	| [$5f30: ld   hl,table_83e9]
	jbsr	display_multicolor_text_B03C      	| [$5f33: call display_multicolor_text_B03C]
	lea	game_mem+0xa260,a0                  	| [$5f36: ld   hl,table_a260]
	jbsr	display_multicolor_text_B03C      	| [$5f39: call display_multicolor_text_B03C]
	lea	game_mem+0x7D36,a0                  	| [$5f3c: ld   hl,table_7D36]
	jbsr	display_multicolor_text_B03C      	| [$5f3f: call display_multicolor_text_B03C]
	jbsr	display_players_rank_B0B4         	| [$5f42: call display_players_rank_B0B4]
	jbsr	l_7ad6                            	| [$5f45: call $7AD6]
	clr.b	d0                               	| [$5f48: ld   a,$00]
	jbsr	l_b018                            	| [$5f4a: call $B018]
	lea	game_mem+0x600C,a0                  	| [$5f4d: ld   hl,table_600C]
	jbsr	display_multicolor_text_B03C      	| [$5f50: call display_multicolor_text_B03C]
	lea	game_mem+0x602E,a0                  	| [$5f53: ld   hl,table_602E]
	move.b	#0xA8,d3                        	| [$5f56: ld   d,$A8]
	jbsr	display_text_B039                 	| [$5f58: call display_text_B039]
	jbsr	check_coin_ports_B069             	| [$5f5b: call check_coin_ports_B069]
	and.b	#0x0C,d0                         	| [$5f5e: and  $0C]
	move.b	d0,unknown_C14F                 	| [$5f60: ld   (unknown_C14F),a]
	move.b	#0x46,d1                        	| [$5f63: ld   b,$46]
	* loop which checks for player start button pressed
	* to skip practice
l_5f65:
	movem.w	d1/d2,-(sp)                    	| [$5f65: push bc]
	move.b	#0x03,d0                        	| [$5f66: ld   a,$03]
	jbsr	suspend_this_task_B05A            	| [$5f68: call suspend_this_task_B05A]
	tst.b	d0                               	| [$5f6b: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5f6c: call nz,display_error_text_B075]
0:
	jbsr	check_coin_ports_B069             	| [$5f6f: call check_coin_ports_B069]
	* a good idea would be to also check fire button
	and.b	#0x0C,d0                         	| [$5f72: and  $0C]
	movem.w	(sp)+,d1/d2                    	| [$5f74: pop  bc]
	jne	l_5ff8                             	| [$5f75: jp   nz,$5FF8]
	move.b	d0,unknown_C14F                 	| [$5f78: ld   (unknown_C14F),a]
l_5f7b:
	subq.b	#1,d1                           	| [...]
	jne	l_5f65                             	| [$5f7b: djnz $5F65]

	* timeout, now proceed to practice
	move.b	#0x06,d1
	move.b	#0x13,d2                      	| [$5f7d: ld   bc,$0613]
	move.b	#0xa0,d3
	move.b	#0x3d,d4                      	| [$5f80: ld   de,$a03d]
	move.b	#0X18,d5
	move.b	#0x0E,d6                      	| [$5f83: ld   hl,$180E]
	jbsr	fill_rectangle_B01B               	| [$5f86: call fill_rectangle_B01B]
	move.b	#0x04,d0                        	| [$5f89: ld   a,$04]
	jbsr	schedule_task_to_start_B057       	| [$5f8b: call schedule_task_to_start_B057]
	move.b	#0x0A,d0                        	| [$5f8e: ld   a,$0A]
	jbsr	schedule_task_to_start_B057       	| [$5f90: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5f93: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5f94: call nz,display_error_text_B075]
0:
	move.b	#0x0B,d0                        	| [$5f97: ld   a,$0B]
	jbsr	schedule_task_to_start_B057       	| [$5f99: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5f9c: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5f9d: call nz,display_error_text_B075]
0:
	* player 1/computer task
	move.b	#0x08,d0                        	| [$5fa0: ld   a,$08]
	jbsr	schedule_task_to_start_B057       	| [$5fa2: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5fa5: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5fa6: call nz,display_error_text_B075]
0:
	* player 2/computer task
	move.b	#0x09,d0                        	| [$5fa9: ld   a,$09]
	jbsr	schedule_task_to_start_B057       	| [$5fab: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5fae: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5faf: call nz,display_error_text_B075]
0:
	jbsr	check_coin_ports_B069             	| [$5fb2: call check_coin_ports_B069]
	and.b	#0x0C,d0                         	| [$5fb5: and  $0C]
	move.b	d0,unknown_C14F                 	| [$5fb7: ld   (unknown_C14F),a]
l_5fba:
	move.b	#0x03,d0                        	| [$5fba: ld   a,$03]
* within this B05A call the computer performs the current technique
* animation
* all tasks are activated in turn
	jbsr	suspend_this_task_B05A            	| [$5fbc: call suspend_this_task_B05A]
	tst.b	d0                               	| [$5fbf: and  a]
	jne	l_5fd1                             	| [$5fc0: jp   nz,$5FD1]
	jbsr	check_coin_ports_B069             	| [$5fc3: call check_coin_ports_B069]
	and.b	#0x0C,d0                         	| [$5fc6: and  $0C]
	jne	l_6002                             	| [$5fc8: jp   nz,$6002]
	move.b	d0,unknown_C14F                 	| [$5fcb: ld   (unknown_C14F),a]
	jra	l_5fba                             	| [$5fce: jp   $5FBA]
l_5fd1:
	move.b	#0x64,d0                        	| [$5fd1: ld   a,$64]
	jbsr	suspend_this_task_B05A            	| [$5fd3: call suspend_this_task_B05A]
	move.b	#0x0F,d0                        	| [$5fd6: ld   a,$0F]
	move.b	#0x20,d1                        	| [$5fd8: ld   b,$20]
	jbsr	task_manipulation_B05D            	| [$5fda: call task_manipulation_B05D]
	tst.b	d0                               	| [$5fdd: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5fde: call nz,display_error_text_B075]
0:
	move.b	#0x78,d0                        	| [$5fe1: ld   a,$78]
	jbsr	suspend_this_task_B05A            	| [$5fe3: call suspend_this_task_B05A]
	tst.b	d0                               	| [$5fe6: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5fe7: call nz,display_error_text_B075]
0:
l_5fea:
	move.b	#0x01,d0                        	| [$5fea: ld   a,$01]
	move.b	#0x01,d1                        	| [$5fec: ld   b,$01]
	jbsr	task_manipulation_B05D            	| [$5fee: call task_manipulation_B05D]
	tst.b	d0                               	| [$5ff1: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5ff2: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                   	| [$5ff5: call task_yield_B051]
l_5ff8:
	move.b	unknown_C14F,d0                 	| [$5ff8: ld   a,(unknown_C14F)]
	tst.b	d0                               	| [$5ffb: and  a]
	jeq	l_5fea                             	| [$5ffc: jp   z,$5FEA]
	jra	l_5f7b                             	| [$5fff: jp   $5F7B]
l_6002:
	move.b	unknown_C14F,d0                 	| [$6002: ld   a,(unknown_C14F)]
	tst.b	d0                               	| [$6005: and  a]
	jeq	l_5fea                             	| [$6006: jp   z,$5FEA]
	jra	l_5fba                             	| [$6009: jp   $5FBA]


l_606a:
	lea	unknown_C220,a3                	| [$606a: ld   iy,unknown_C220]
	clr.w	d1                               	| [$606e: ld   c,$00]
l_6070:
	and.w	#0xFF,d1                               	| [$6070: ld   b,$00]
	lea	game_mem+0x6300,a0                  	| [$6072: ld   hl,table_6300]
	add.w	d1,a0                            	| [$6075: add  hl,bc]
	bsr		store_a0_in_a3_structure_07_address | [$6076: ld   (iy+$07),l]
												| [$6079: ld   (iy+$08),h]
	move.b	(a0),d0                         	| [$607c: ld   a,(hl)]
	move.b	d0,(0x09,a3)                    	| [$607d: ld   (iy+$09),a]
	move.b	#0x07,d0                        	| [$6080: ld   a,$07]
	move.b	d0,(0x0a,a3)                    	| [$6082: ld   (iy+$0a),a]
	clr.b	d0                               	| [$6085: ld   a,$00]
	move.b	d0,(0x0b,a3)                    	| [$6087: ld   (iy+$0b),a]
	lea	periodic_counter_16bit_C02E,a0 	| [$608a: ld   hl,periodic_counter_16bit_C02E]
	move.b	(a0),d3                         	| [$608d: ld   d,(hl)]
	move.b	#0x03,d4                        	| [$608e: ld   e,$03]
	jbsr	random_B006                       	| [$6090: call random_B006]
	move.b	d0,(0x0c,a3)                    	| [$6093: ld   (iy+$0c),a]
l_6096:
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$6096: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#3,d0                           	| [$6099: bit  3,a]
	jne	l_6189                             	| [$609b: jp   nz,$6189]
	clr.b	d0                               	| [$609e: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$60a0: call suspend_this_task_B05A]
	cmp.b	#0x0C,d0                         	| [$60a3: cp   $0C]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$60a5: call nz,display_error_text_B075]
0:
	* this tries to compare (7,a2).W in player struct to value
	* read from the below table
	* (TODO needs debugging?)
	lea	game_mem+0x6393,a3                  	| [$60a8: ld   iy,table_6393]
	lea	player_2_struct_C260,a2        	| [$60ac: ld   ix,player_2_struct_C260]

	move.b	(0x08,a2),d0                    	| [$60b3: ld   a,(ix+$08)]
	and.b	#0x7F,d0                         	| [$60b6: and  $7F]
	move.b	d0,d5                           	| [$60b8: ld   h,a]
	lsl.w	#8,d5
	move.b	(0x07,a2),d5                    	| [$60b0: ld   l,(ix+$07)]  MSB
	clr.b	d1                               	| [$60b9: ld   b,$00]
l_60bb:
	moveq	#0,d3
	move.b	(0x01,a3),d3                    	| [$60be: ld   d,(iy+$01)]
	lsl.w	#8,d3
	move.b	(0x00,a3),d3                    	| [$60bb: ld   e,(iy+$00)]
	                               	| [$60c1: and  a]
	                              	| [$60c2: ex   de,hl]
	cmp.w	d3,d5					| [sbc  hl,de]
	jeq	l_60e6                             	| [$60c5: jp   z,$60E6]
											| [$60c8: ex   de,hl]
	addq.w	#2,a3                           	| [$60c9: inc  iy] * 2
	move.b	(0x00,a3),d0                    	| [$60cd: ld   a,(iy+$00)]
	and.b	(0x01,a3),d0                     	| [$60d0: and  (iy+$01)]
	cmp.b	#0xFF,d0                         	| [$60d3: cp   $FF]
	jeq	l_6166                             	| [$60d5: jp   z,$6166]
	cmp.b	#0xFE,d0                         	| [$60d8: cp   $FE]
	jne	l_60bb                             	| [$60da: jp   nz,$60BB]
	addq.w	#2,a3                           	| [$60dd: inc  iy] * 2
	st.b	d1                                	| [$60e1: ld   b,$FF]
	jra	l_60bb                             	| [$60e3: jp   $60BB]
l_60e6:
	lea	unknown_C220,a3                	| [$60e6: ld   iy,unknown_C220]
	move.b	d1,d0                           	| [$60ea: ld   a,b]
	tst.b	d0                               	| [$60eb: and  a]
	jne	l_6115                             	| [$60ec: jp   nz,$6115]
	move.b	current_move_p2_C26B,d0                 	| [$60ef: ld   a,(current_move_p2_C26B)]
	tst.b	d0                               	| [$60f2: and  a]
	jne	l_6166                             	| [$60f3: jp   nz,$6166]
	move.b	(0x09,a3),d0                    	| [$60f6: ld   a,(iy+$09)]
	jbsr	suspend_this_task_B05A            	| [$60f9: call suspend_this_task_B05A]
	tst.b	d0                               	| [$60fc: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$60fd: call nz,display_error_text_B075]
0:
	lea	unknown_C220,a3                	| [$6100: ld   iy,unknown_C220]
	move.b	(0x0a,a3),d0                    	| [$6104: ld   a,(iy+$0a)] current practice technique index (decreasing to $FF)
	cmp.b	#0xFF,d0                         	| [$6107: cp   $FF]
	jeq	l_6166                             	| [$6109: jp   z,$6166] practice done
	subq.b	#1,(0x0a,a3)                    	| [$610c: dec  (iy+$0a)] decrease index
* 1 player mode - display the technique name in "practice"
	jbsr	display_practice_technique_name_61EC	| [$610f: call display_practice_technique_name_61EC]
	jra	l_6166                             	| [$6112: jp   $6166]
l_6115:
	move.b	#0x32,d1                        	| [$6115: ld   b,$32]
l_6117:
	movem.w	d1/d2,-(sp)                    	| [$6117: push bc]
	move.b	#0x01,d0                        	| [$6118: ld   a,$01]
	jbsr	suspend_this_task_B05A            	| [$611a: call suspend_this_task_B05A]
	tst.b	d0                               	| [$611d: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$611e: call nz,display_error_text_B075]
0:
	movem.w	(sp)+,d1/d2                    	| [$6121: pop  bc]
	subq.b	#1,d1                           	| [$6122: dec  b]
	jeq	l_6153                             	| [$6123: jp   z,$6153]
	lea	player_2_struct_C260,a3        	| [$6126: ld   iy,player_2_struct_C260]
	lea	player_1_struct_C240,a2        	| [$612a: ld   ix,player_1_struct_C240]
	move.b	(0x07,a3),d5                    	| [$612e: ld   l,(iy+$07)]
	lsl.w	#8,d5
	move.b	(0x08,a3),d5                    	| [$6131: ld   h,(iy+$08)]
	move.b	(0x07,a2),d3                    	| [$6134: ld   e,(ix+$07)]
	lsl.w	#8,d3
	move.b	(0x08,a2),d3                    	| [$6137: ld   d,(ix+$08)]
	                               	| [$613a: and  a]
	cmp.w	d3,d5					|[sbc  hl,de]
	jne	l_6117                             	| [$613d: jp   nz,$6117]
	lea	unknown_C220,a3                	| [$6140: ld   iy,unknown_C220]
	addq.b	#1,(0x0b,a3)                    	| [$6144: inc  (iy+$0b)]
	move.b	#0x04,d0                        	| [$6147: ld   a,$04]
	move.b	#0x02,d1                        	| [$6149: ld   b,$02]
	jbsr	task_manipulation_B05D            	| [$614b: call task_manipulation_B05D]
	move.b	#0x02,d0                        	| [$614e: ld   a,$02]
	jbsr	l_b018                            	| [$6150: call $B018]
l_6153:
	clr.b	d0                               	| [$6153: ld   a,$00]
	move.b	d0,current_move_p2_C26B                 	| [$6155: ld   (current_move_p2_C26B),a]
	jbsr	l_6230                            	| [$6158: call $6230]
	lea	unknown_C220,a3                	| [$615b: ld   iy,unknown_C220]
	move.b	(0x0a,a3),d0                    	| [$615f: ld   a,(iy+$0a)]
										| [$6162: and  a]
	jeq	l_6174                             	| [$6163: jp   z,$6174]
l_6166:
	move.b	#0x0B,d0                        	| [$6166: ld   a,$0B]
	move.b	#0x0D,d1                        	| [$6168: ld   b,$0D]
	jbsr	task_manipulation_B05D            	| [$616a: call task_manipulation_B05D]
	tst.b	d0                               	| [$616d: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$616e: call nz,display_error_text_B075]
0:
	jra	l_6096                             	| [$6171: jp   $6096]
l_6174:
	move.b	#0x0B,d0                        	| [$6174: ld   a,$0B]
	move.b	#0x0D,d1                        	| [$6176: ld   b,$0D]
	jbsr	task_manipulation_B05D            	| [$6178: call task_manipulation_B05D]
	move.b	#0x02,d0                        	| [$617b: ld   a,$02]
	move.b	#0x0F,d1                        	| [$617d: ld   b,$0F]
	jbsr	task_manipulation_B05D            	| [$617f: call task_manipulation_B05D]
	tst.b	d0                               	| [$6182: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$6183: call nz,display_error_text_B075]
0:
	jra	l_6096                             	| [$6186: jp   $6096]
l_6189:
	move.b	#0x01,d0                        	| [$6189: ld   a,$01]
	jbsr	suspend_this_task_B05A            	| [$618b: call suspend_this_task_B05A]
	tst.b	d0                               	| [$618e: and  a]
	jeq	l_61b4                             	| [$618f: jp   z,$61B4]
	cmp.b	#0x09,d0                         	| [$6192: cp   $09]
	jeq	l_6189                             	| [$6194: jp   z,$6189]
	cmp.b	#0x0C,d0                         	| [$6197: cp   $0C]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$6199: call nz,display_error_text_B075]
0:
	jbsr	l_3db7                            	| [$619c: call $3DB7]
	move.b	d0,current_move_p2_C26B                 	| [$619f: ld   (current_move_p2_C26B),a]
	clr.b	d0                               	| [$61a2: xor  a]
	move.b	d0,unknown_C26C                 	| [$61a3: ld   (unknown_C26C),a]
	move.b	#0x0B,d0                        	| [$61a6: ld   a,$0B]
	move.b	#0x0D,d1                        	| [$61a8: ld   b,$0D]
	jbsr	task_manipulation_B05D            	| [$61aa: call task_manipulation_B05D]
	tst.b	d0                               	| [$61ad: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$61ae: call nz,display_error_text_B075]
0:
	jra	l_6189                             	| [$61b1: jp   $6189]
l_61b4:
	lea	unknown_C220,a3                	| [$61b4: ld   iy,unknown_C220]
	move.b	(0x0a,a3),d0                    	| [$61b8: ld   a,(iy+$0a)]
	cmp.b	#0xFF,d0                         	| [$61bb: cp   $FF]
	jeq	l_6189                             	| [$61bd: jp   z,$6189]
	subq.b	#1,(0x09,a3)                    	| [$61c0: dec  (iy+$09)]
	jne	l_6189                             	| [$61c3: jp   nz,$6189]
	move.b	#0x64,d0                        	| [$61c6: ld   a,$64]
	move.b	d0,(0x09,a3)                    	| [$61c8: ld   (iy+$09),a]
* during practice (2 player mode)
* decrements C22A: number of techniques to mimic
	subq.b	#1,(0x0a,a3)                    	| [$61cb: dec  (iy+$0a)]
	move.b	(0x0a,a3),d0                    	| [$61ce: ld   a,(iy+$0a)]
	cmp.b	#0xFF,d0                         	| [$61d1: cp   $FF]
	jeq	l_61e2                             	| [$61d3: jp   z,$61E2] end of practice
	jbsr	l_6230                            	| [$61d6: call $6230]
	move.b	(0x0a,a3),d0                    	| [$61d9: ld   a,(iy+$0a)]
	jbsr	display_practice_technique_name_61EC	| [$61dc: call display_practice_technique_name_61EC]
	jra	l_6189                             	| [$61df: jp   $6189]
l_61e2:
	move.b	#0x02,d0                        	| [$61e2: ld   a,$02]
	move.b	#0x0F,d1                        	| [$61e4: ld   b,$0F]
	jbsr	task_manipulation_B05D            	| [$61e6: call task_manipulation_B05D]
	jra	l_6189                             	| [$61e9: jp   $6189]


* called with decreasing A (10 -> 0)
* and uses a lookup table to get the proper move names
* < a: index in table
* < iy: table pointer ($C220)


display_practice_technique_name_61EC:
	add.b	d0,d0                            	| [$61ec: add  a,a]
	add.b	d0,d0                            	| [$61ed: add  a,a]
	clr.w	d1                               	| [$61ef: ld   b,$00]
	move.b	d0,d1                           	| [$61ee: ld   c,a]
	movem.w	d1/d2,-(sp)                    	| [$61f1: push bc]
	move.b	(0x0c,a3),d0                    	| [$61f2: ld   a,(iy+$0c)]
	clr.w	d1                               	| [$61f8: ld   b,$00]
	asl.b	#2,d0                            	| [$61f5: sla  a]
	move.b	d0,d1                           	| [$61f7: ld   c,a]
	lea	practice_table_table_6361(pc),a2     	| [$61fa: ld   ix,practice_table_end_6361]
	add.w	d1,a2                            	| [$61fe: add  ix,bc]
	move.l	(0x00,a2),a0                    	| [$6200: ld   l,(ix+$00)]
												| [$6203: ld   h,(ix+$01)]

	move.l	a0,a2                        	| [$6206: push hl+pop ix]
	movem.w	(sp)+,d1/d2                    	| [$6209: pop  bc]
	add.w	d1,a2                            	| [$620a: add  ix,bc]
* practice
	move.b	(0x00,a2),d0                    	| [$620c: ld   a,(ix+$00)] technique id loaded
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$620f: ld   hl,players_type_human_or_cpu_flags_C02D]
	btst.b	#3,(a0)                         	| [$6212: bit  3,(hl)]
	jne	l_621a                             	| [$6214: jp   nz,$621A]
* computer is showing the moves: load technique in player 2 structure
	move.b	d0,current_move_p2_C26B                 	| [$6217: ld   (current_move_p2_C26B),a]
l_621a:
	move.l	a2,-(sp)                        	| [$621a: push ix]
	move.b	(0x01,a2),d0                    	| [$621c: ld   a,(ix+$01)]
	jbsr	l_625e                            	| [$621f: call $625E]
	move.l	(sp)+,a2                        	| [$6222: pop  ix]
	move.b	(0x02,a2),d6                    	| [$6224: ld   l,(ix+$02)]
	move.b	(0x03,a2),d5                    	| [$6227: ld   h,(ix+$03)]
	move.b	#0x98,d3                        	| [$622a: ld   d,$98]
	jbsr	display_text_B039                 	| [$622c: call display_text_B039]
	rts                                    	| [$622f: ret]
l_6230:
	lea	table_6367(pc),a0                  	| [$6230: ld   hl,table_6367]
	lea	temp_numeric_buffer_CF00,a1    	| [$6233: ld   de,temp_numeric_buffer_CF00]
	move.w	#0x002C,d1                      	| [$6236: ld   bc,$002C] 44
	jbsr	ldir                              	| [$6239: ldir]
	lea	temp_numeric_buffer_CF00,a0    	| [$623b: ld   hl,temp_numeric_buffer_CF00]
	jbsr	display_multicolor_text_B03C      	| [$623e: call display_multicolor_text_B03C]
	move.b	#0x11,d0                        	| [$6241: ld   a,$11]
	move.b	d0,temp_numeric_buffer_CF00     	| [$6243: ld   (temp_numeric_buffer_CF00),a]
	move.b	d0,unknown_CF0B                 	| [$6246: ld   (unknown_CF0B),a]
	move.b	d0,unknown_CF16                 	| [$6249: ld   (unknown_CF16),a]
	move.b	d0,unknown_CF21                 	| [$624c: ld   (unknown_CF21),a]
	lea	temp_numeric_buffer_CF00,a0    	| [$624f: ld   hl,temp_numeric_buffer_CF00]
	jbsr	display_multicolor_text_B03C      	| [$6252: call display_multicolor_text_B03C]
	lea	table_6473(pc),a0                  	| [$6255: ld   hl,table_6473]
	move.b	#0x98,d3                        	| [$6258: ld   d,$98]
	jbsr	display_text_B039                 	| [$625a: call display_text_B039]
	rts                                    	| [$625d: ret]
l_625e:
	lea	table_62DE(pc),a0                  	| [$625e: ld   hl,table_62DE]
	lea	temp_numeric_buffer_CF00,a1    	| [$6261: ld   de,temp_numeric_buffer_CF00]
	move.w	#0x0022,d1                      	| [$6264: ld   bc,$0022] 34
	jbsr	ldir                              	| [$6267: ldir]
	move.w	d0,-(sp)                        	| [$6269: push af]
	roxl.b	#5,d0                           	| [$626a: rla] * 5
	and.b	#0x0F,d0                         	| [$626f: and  $0F]
	jbsr	l_6297                            	| [$6271: call $6297]
	lea	temp_numeric_buffer_CF00,a2    	| [$6274: ld   ix,temp_numeric_buffer_CF00]
	move.b	#0x12,d0                        	| [$6278: ld   a,$12]
	move.b	d0,(0x00,a2)                    	| [$627a: ld   (ix+$00),a]
	move.b	d0,(0x07,a2)                    	| [$627d: ld   (ix+$07),a]
	move.b	#0x14,d0                        	| [$6280: ld   a,$14]
	move.b	d0,(0x0e,a2)                    	| [$6282: ld   (ix+$0e),a]
	move.b	d0,(0x13,a2)                    	| [$6285: ld   (ix+$13),a]
	move.b	#0x11,d0                        	| [$6288: ld   a,$11]
	move.b	d0,(0x18,a2)                    	| [$628a: ld   (ix+$18),a]
	move.b	d0,(0x1d,a2)                    	| [$628d: ld   (ix+$1d),a]
	move.w	(sp)+,d0                        	| [$6290: pop  af]
	and.b	#0x0F,d0                         	| [$6291: and  $0F]
	jbsr	l_6297                            	| [$6293: call $6297]
	rts                                    	| [$6296: ret]
l_6297:
	clr.b	d2                               	| [$6297: ld   c,$00]
l_6299:
	roxr.b	#1,d0                           	| [$6299: rra]
	jcs	l_62a7                             	| [$629a: jp   c,$62A7]
	addq.b	#1,d2                           	| [$629d: inc  c]
	move.w	d0,-(sp)                        	| [$629e: push af]
	move.b	d2,d0                           	| [$629f: ld   a,c]
	cmp.b	#0x04,d0                         	| [$62a0: cp   $04]
	move.w	(sp)+,d0                        	| [$62a2: pop  af]
	jne	l_6299                             	| [$62a3: jp   nz,$6299]
	rts                                    	| [$62a6: ret]
l_62a7:
	clr.w	d1                               	| [$62a9: ld   b,$00]
	asl.b	#1,d1                            	| [$62a7: sla  c]
	lea	table_62CE,a2                  	| [$62ab: ld   ix,table_62CE]
	lea	player_2_struct_C260,a3        	| [$62af: ld   iy,player_2_struct_C260]
	btst.b	#7,(0x08,a3)                    	| [$62b3: bit  7,(iy+$08)]
	jeq	l_62be                             	| [$62b7: jp   z,$62BE]
	lea	table_62D6,a2                  	| [$62ba: ld   ix,table_62D6]
l_62be:
	add.w	d1,a2                            	| [$62be: add  ix,bc]
	move.b	(0x00,a2),d6                    	| [$62c0: ld   l,(ix+$00)]
	move.b	(0x01,a2),d5                    	| [$62c3: ld   h,(ix+$01)]
	jbsr	display_multicolor_text_B03C      	| [$62c6: call display_multicolor_text_B03C]
	rts                                    	| [$62c9: ret]
table_62CE:
	dc.b	0x0e,0xcf,0x18,0xcf,0x00,0xcf,0x07,0xcf | table_62CE
table_62D6:
	dc.b	0x18,0xcf,0x0e,0xcf,0x00,0xcf,0x07,0xcf | table_62D6
table_62DE:
	dc.b	0x0c,0x1c,0xac,0x88,0xad,0x88,0xff,0x0c | table_62DE
	dc.b	0x1f,0xb6,0x88,0xb7,0x88,0xff,0x0e,0x1d | $62e6
	dc.b	0xb1,0x88,0xfe,0x0e,0x1e,0xb5,0x88,0xff | $62ee
	dc.b	0x0b,0x1d,0xae,0x88,0xfe,0x0b,0x1e,0xb2 | $62f6
	dc.b	0x88,0xff | $62fe
table_6300:
	dc.b	0x2d | table_6300
	.align	2
* practice table of move names words (lunge, front, back ...) and ids
* and positions to show them so the player(s) can execute them
*
* it's more difficult in 2-player mode because some moves are ambiguous
* ex: lunge punch or foot sweep exist as 2 different moves but there are
* only 3 sequences of 8 moves so no big surprises after a while
*
* format:
* move_id  ????  text address
* the sequences are iterated decreasing
*
* one possible sequence is (see <===) front kick, back kick,
practice_table_6301:
	dc.b	0x11,0x14,0x44,0x64	| lunge punch (high, forward)
	dc.b	0x05,0x02,0xC3,0x63	| back kick
	dc.b	0x09,0x82,0xE9,0x63	| foot sweep
	dc.b	0x0A,0x01,0xF8,0x63	| front kick
	dc.b	0x0B,0x21,0x07,0x64	| back round kick
	dc.b	0x10,0x24,0x44,0x64	| lunge punch (high, still)
	dc.b	0x14,0x08,0x66,0x64	| low kick
	dc.b	0x0F,0x04,0x35,0x64	| round kick  <==== first move of sequence #1
practice_table_6321:
	dc.b	0x08,0x42,0xD1,0x63	| jumping back kick
	dc.b	0x10,0x24,0x44,0x64	| lunge punch (high, still)
	dc.b	0x13,0x84,0x54,0x64	| reverse punch
	dc.b	0x0F,0x04,0x35,0x64	| round kick
	dc.b	0x09,0x82,0xE9,0x63	| foot sweep (back)
	dc.b	0x14,0x08,0x66,0x64	| low kick
	dc.b	0x05,0x02,0xC3,0x63	| back kick
	dc.b	0x0A,0x01,0xF8,0x63	| front kick   <==== start of sequence #2
practice_table_6341:
	dc.b	0x08,0x42,0xD1,0x63	| jumping back kick
	dc.b	0x0F,0x04,0x35,0x64	| round kick
	dc.b	0x09,0x82,0xE9,0x63	| foot sweep (back)
	dc.b	0x10,0x24,0x44,0x64	| lunge punch
	dc.b	0x14,0x08,0x66,0x64	| low kick
	dc.b	0x05,0x02,0xC3,0x63	| back kick
	dc.b	0x0A,0x01,0xF8,0x63	| front kick
	dc.b	0x11,0x14,0x44,0x64	| lunge punch  <==== start of sequence #3
practice_table_table_6361:
	.long	practice_table_6301 | $6361
	.long	practice_table_6321 | $6363
	.long	practice_table_6341 | $6365
table_6367:
	dc.b	0x0b,0x1c,0x3c,0x88,0xac,0xd8,0xad,0xd8 | table_6367
	dc.b	0x3c,0x88,0xfe,0x0b,0x1d,0xae,0xd8,0xaf | $636f
	dc.b	0x88,0xb0,0x88,0xb1,0xd8,0xfe,0x0b,0x1e | $6377
	dc.b	0xb2,0xd8,0xb3,0x88,0xb4,0x88,0xb5,0xd8 | $637f
	dc.b	0xfe,0x0b,0x1f,0x3c,0x88,0xb6,0xd8,0xb7 | $6387
	dc.b	0xd8,0x3c,0x88,0xff | $638f
table_6393:
	dc.b	0x89,0x0a,0x92,0x0a,0x9b,0x0a,0xad,0x0a | table_6393
	dc.b	0xc8,0x0a,0xa4,0x0a,0xb6,0x0a,0xbf,0x0a | $639b
	dc.b	0xfe,0xfe,0xc9,0x0c,0xdb,0x0c,0x50,0x0d | $63a3
	dc.b	0xe0,0x0d,0x55,0x0e,0x24,0x0f,0x99,0x0f | $63ab
	dc.b	0x17,0x10,0xa7,0x10,0x13,0x11,0x76,0x11 | $63b3
	dc.b	0xeb,0x11,0xde,0x12,0x53,0x13,0xff,0xff | $63bb
	dc.b	0x04,0x1d,0x0b,0x0a,0x0c,0x14,0xfe,0x04 | $63c3
	dc.b	0x1e,0x14,0x12,0x0c,0x14,0xff | $63cb
* "JUMPING"
table_63D1:
	dc.b	0x03,0x1d,0x13,0x1e,0x16,0x19,0x12,0x17 | table_63D1
	dc.b	0x10,0xfe,0x03,0x1e,0x0b,0x0a,0x0c,0x14 | $63d9
	dc.b	0xfe,0x03,0x1f,0x14,0x12,0x0c,0x14,0xff | $63e1
	dc.b	0x04,0x1d,0x0f,0x18,0x18,0x1d,0xfe,0x04 | $63e9
	dc.b	0x1e,0x1c,0x20,0x0e,0x0e,0x19,0xff,0x04 | $63f1
	dc.b	0x1d,0x0f,0x1b,0x18,0x17,0x1d,0xfe,0x04 | $63f9
	dc.b	0x1e,0x14,0x12,0x0c,0x14,0xff,0x04,0x1d | $6401
	dc.b	0x0b,0x0a,0x0c,0x14,0xfe,0x04,0x1e,0x1b | $6409
	dc.b	0x18,0x1e,0x17,0x0d,0xfe,0x04,0x1f,0x14 | $6411
	dc.b	0x12,0x0c,0x14,0xff,0x03,0x1d,0x13,0x1e | $6419
	dc.b	0x16,0x19,0x12,0x17,0x10,0xfe,0x03,0x1e | $6421
	dc.b	0x1c,0x12,0x0d,0x0e,0xfe,0x03,0x1f,0x14 | $6429
	dc.b	0x12,0x0c,0x14,0xff,0x04,0x1d,0x1b,0x18 | $6431
	dc.b	0x1e,0x17,0x0d,0xfe,0x04,0x1e,0x14,0x12 | $6439
	dc.b	0x0c,0x14,0xff | $6441
* lunge
table_6444:
	dc.b	0x04,0x1d,0x15,0x1e,0x17,0x10,0x0e,0xfe | table_6444
	dc.b	0x04,0x1e,0x19,0x1e,0x17,0x0c,0x11,0xff | $644c
	dc.b	0x03,0x1d,0x1b,0x0e,0x1f,0x0e,0x1b,0x1c | $6454
	dc.b	0x0e,0xfe,0x03,0x1e,0x19,0x1e,0x17,0x0c | $645c
	dc.b	0x11,0xff,0x04,0x1d,0x15,0x18,0x20,0xfe | $6464
	dc.b	0x04,0x1e,0x14,0x12,0x0c,0x14,0xff | $646c
table_6473:
	dc.b	0x03,0x1d,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c | table_6473
	dc.b	0x3c,0xfe,0x03,0x1e,0x3c,0x3c,0x3c,0x3c | $647b
	dc.b	0x3c,0x3c,0x3c,0xfe,0x03,0x1f,0x3c,0x3c | $6483
	dc.b	0x3c,0x3c,0x3c,0x3c,0x3c,0xff | $648b
	.align	2
task_6491:
	move.b	background_and_state_bits_C911,d0	| [$6491: ld   a,(background_and_state_bits_C911)]
	and.b	#0x7F,d0                         	| [$6494: and  $7F]
	cmp.b	#0x10,d0                         	| [$6496: cp   $10]
	jcs	l_649e                             	| [$6498: jp   c,$649E]
	* suspend the task
	jbsr	task_yield_B051                  	| [$649b: call task_yield_B051]
* when resumes, shows blue "karate champ" title screen
* initialize match timer to 30 seconds (BCD)
l_649e:
	move.w	#0x0030,d5                      	| [$649e: ld   hl,$0030] 48
	lea	match_timer_C167,a2            	| [$64a1: ld   ix,match_timer_C167]
	move.b	d6,(0x00,a2)                    	| [$64a5: ld   (ix+$00),l]
	move.b	d5,(0x01,a2)                    	| [$64a8: ld   (ix+$01),h]
	jbsr	l_64fb                            	| [$64ab: call $64FB]
l_64ae:
	clr.b	d0                               	| [$64ae: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$64b0: call suspend_this_task_B05A]
	cmp.b	#0x09,d0                         	| [$64b3: cp   $09]
	jeq	l_64ae                             	| [$64b5: jp   z,$64AE]
	cmp.b	#0x0A,d0                         	| [$64b8: cp   $0A]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$64ba: call nz,display_error_text_B075]
0:
l_64bd:
	move.b	#0x3C,d0                        	| [$64bd: ld   a,$3C]
	jbsr	suspend_this_task_B05A            	| [$64bf: call suspend_this_task_B05A]
	cmp.b	#0x09,d0                         	| [$64c2: cp   $09]
	jeq	l_64ae                             	| [$64c4: jp   z,$64AE]
	tst.b	d0                               	| [$64c7: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$64c8: call nz,display_error_text_B075]
0:
	move.b	match_timer_C167,d0             	| [$64cb: ld   a,(match_timer_C167)]
	moveq	#1,d7
	sbcd.b	d7,d0                        	| [$64ce: sub  $01]
	move.b	d0,match_timer_C167             	| [$64d1: ld   (match_timer_C167),a]
	move.b	unknown_C168,d0                 	| [$64d4: ld   a,(unknown_C168)]
	moveq	#0,d7
	sbcd.b	d7,d0                        	| [$64d7: sbc  a,$00]
	move.b	d0,unknown_C168                 	| [$64da: ld   (unknown_C168),a]
	cmp.b	#0x99,d0                         	| [$64dd: cp   $99]
	jeq	l_64e8                             	| [$64df: jp   z,$64E8]
	jbsr	l_64fb                            	| [$64e2: call $64FB]
	jra	l_64bd                             	| [$64e5: jp   $64BD]
l_64e8:
	clr.b	d0                               	| [$64e8: ld   a,$00]
	move.b	d0,match_timer_C167             	| [$64ea: ld   (match_timer_C167),a]
	move.b	#0x02,d0                        	| [$64ed: ld   a,$02]
	move.b	#0x08,d1                        	| [$64ef: ld   b,$08]
	jbsr	task_manipulation_B05D            	| [$64f1: call task_manipulation_B05D]
	tst.b	d0                               	| [$64f4: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$64f5: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                  	| [$64f8: call task_yield_B051]

l_64fb:
	move.b	#0x98,d3                        	| [$64fb: ld   d,$98]
	move.w	#0x05,d5                      	| [$64fd: ld   hl,$050F]
	move.w	#0x0F,d6                      	| [$64fd: ld   hl,$050F]
l_6500:
	move.b	d6,temp_numeric_buffer_CF00     	| [$6500: ld   (temp_numeric_buffer_CF00),hl]
	move.b	d5,temp_numeric_buffer_CF00+1     	| [$6500: ld   (temp_numeric_buffer_CF00),hl]
	st.b	d0                                	| [$6503: ld   a,$FF]
	* end the string... using an area also used as a pointer WTF!
	move.b	d0,unknown_pointer_CF06                 	| [$6505: ld   (unknown_pointer_CF06),a]
	move.b	match_timer_C167,d0             	| [$6508: ld   a,(match_timer_C167)]
	move.b	d0,d1                           	| [$650b: ld   b,a]
	and.b	#0x0F,d0                         	| [$650c: and  $0F]
	moveq	#0,d5
	move.b	d3,d5                           	| [$650f: ld   h,d] MSB
	lsl.w	#8,d5
	move.b	d0,d5                           	| [$650e: ld   l,a] LSB
	* it's not really address_of_current_player_move_byte_CF04, it's used
	* for something else, numeric stuff
	move.b	d6,address_of_current_player_move_byte_CF04
	move.b	d5,address_of_current_player_move_byte_CF04+1    | [$6510: ld   (address_of_current_player_move_byte_CF04),hl]
	move.b	d1,d0                           	| [$6513: ld   a,b]
	lsr.b	#4,d0                            	| [$6514: srl  a] * 4
	and.b	#0x0F,d0                         	| [$651c: and  $0F]
	move.b	d0,d5                           	| [$651e: ld   l,a] update LSB
	* store as little endian
	SWAP_WORD	D5
	move.w	d5,unknown_CF02                 	| [$651f: ld   (unknown_CF02),hl]
	SWAP_WORD	D5
												| [$651f: ld   (unknown_CF02),hl]
	lea	temp_numeric_buffer_CF00,a0    	| [$6522: ld   hl,temp_numeric_buffer_CF00]
	jbsr	display_multicolor_text_B03C      	| [$6525: call display_multicolor_text_B03C]
	rts                                    	| [$6528: ret]


task_6529:
	clr.b	d0                               	| [$6529: xor  a]
	jbsr	suspend_this_task_B05A            	| [$652a: call suspend_this_task_B05A]
l_652d:
	move.w	d0,-(sp)                        	| [$652d: push af]
	move.b	d1,d0                           	| [$652e: ld   a,b]
	lea	unknown_C7F8,a2                	| [$652f: ld   ix,unknown_C7F8]
	lea	task_struct_C140,a3                	| [$6533: ld   iy,task_struct_C140]
	cmp.b	#0x02,d0                         	| [$6537: cp   $02]
	jeq	l_656c                             	| [$6539: jp   z,$656C]
	cmp.b	#0x07,d0                         	| [$653c: cp   $07]
	jeq	l_656c                             	| [$653e: jp   z,$656C]
	cmp.b	#0x17,d0                         	| [$6541: cp   $17]
	jeq	l_656c                             	| [$6543: jp   z,$656C]
	lea	player_1_struct_C240,a3        	| [$6546: ld   iy,player_1_struct_C240]
	cmp.b	#0x09,d0                         	| [$654a: cp   $09]
	jeq	l_656c                             	| [$654c: jp   z,$656C]
	cmp.b	#0x0A,d0                         	| [$654f: cp   $0A]
	jeq	l_656c                             	| [$6551: jp   z,$656C]
	lea	player_2_struct_C260,a3        	| [$6554: ld   iy,player_2_struct_C260]
	cmp.b	#0x0B,d0                         	| [$6558: cp   $0B]
	jeq	l_65e3                             	| [$655a: jp   z,$65E3]
	lea	task_struct_C380,a3                	| [$655d: ld   iy,unknown_C380]
	cmp.b	#0x14,d0                         	| [$6561: cp   $14]
	jeq	l_65c2                             	| [$6563: jp   z,$65C2]
	jbsr	load_struct_C100_from_A_index_B04E                            	| [$6566: call $B04E]
	jra	l_65b7                             	| [$6569: jp   $65B7]
l_656c:
	move.b	(0x0a,a3),d0                    	| [$656c: ld   a,(iy+$0a)]
	sub.b	#0x46,d0                         	| [$656f: sub  $46]
	move.b	d0,(0x03,a2)                    	| [$6571: ld   (ix+$03),a]
l_6574:
	move.b	(0x09,a3),d0                    	| [$6574: ld   a,(iy+$09)]
	subq.b	#0x07,d0                        	| [$6577: sub  $07]
	move.b	d0,(0x00,a2)                    	| [$6579: ld   (ix+$00),a]
	move.b	#0x01,d0                        	| [$657c: ld   a,$01]
	move.b	d0,(0x02,a2)                    	| [$657e: ld   (ix+$02),a]
l_6581:
	lea	game_mem+0x65FB,a3                  	| [$6581: ld   iy,table_65FB]
	move.w	(sp)+,d0                        	| [$6585: pop  af]
											| [$6586: and  a]
	bne.b	0f
	jbsr	task_6529                            	| [$6587: call z,$6529]
0:
	cmp.b	#0x0D,d0                         	| [$658a: cp   $0D]
	bcs	0f
	jbsr	display_error_text_B075           	| [$658c: call nc,display_error_text_B075]
0:
	clr.w	d1                               	| [$6593: ld   b,$00]
	move.b	d0,d2                           	| [$658f: ld   c,a]
	add.b	d0,d0                            	| [$6590: add  a,a]
	add.b	d2,d0                            	| [$6591: add  a,c]
	move.b	d0,d1                           	| [$6592: ld   c,a]
	add.w	d1,a3                            	| [$6595: add  iy,bc]

	move.b	(0x00,a3),d0                    	| [$6597: ld   a,(iy+$00)]
	move.b	d0,(0x01,a2)                    	| [$659a: ld   (ix+$01),a]
	move.b	(0x01,a3),d0                    	| [$659d: ld   a,(iy+$01)]
	or.b	(0x02,a2),d0                      	| [$65a0: or   (ix+$02)]
	move.b	d0,(0x02,a2)                    	| [$65a3: ld   (ix+$02),a]
	move.b	#0x5A,d0                        	| [$65a6: ld   a,$5A]
	jbsr	suspend_this_task_B05A            	| [$65a8: call suspend_this_task_B05A]
	tst.b	d0                               	| [$65ab: and  a]
	jne	l_652d                             	| [$65ac: jp   nz,$652D]
	clr.b	d0                               	| [$65af: ld   a,$00]
	move.b	d0,unknown_C7F8                 	| [$65b1: ld   (unknown_C7F8),a]
	jra	task_6529                             	| [$65b4: jp   $6529]
l_65b7:
	move.b	(0x0a,a3),d0                    	| [$65b7: ld   a,(iy+$0a)]
	sub.b	#0x18,d0                         	| [$65ba: sub  $18]
	move.b	d0,(0x03,a2)                    	| [$65bc: ld   (ix+$03),a]
	jra	l_6574                             	| [$65bf: jp   $6574]
l_65c2:
	move.b	(0x0a,a3),d0                    	| [$65c2: ld   a,(iy+$0a)]
	subq.b	#0x03,d0                        	| [$65c5: sub  $03]
	move.b	d0,(0x03,a2)                    	| [$65c7: ld   (ix+$03),a]
	move.b	#0x06,d0                        	| [$65ca: ld   a,$06]
	btst.b	#7,(0x08,a3)                    	| [$65cc: bit  7,(iy+$08)]
	jeq	l_65d5                             	| [$65d0: jp   z,$65D5]
	move.b	#0xEC,d0                        	| [$65d3: ld   a,$EC]
l_65d5:
	add.b	(0x09,a3),d0                     	| [$65d5: add  a,(iy+$09)]
	move.b	d0,(0x00,a2)                    	| [$65d8: ld   (ix+$00),a]
	move.b	#0x02,d0                        	| [$65db: ld   a,$02]
	move.b	d0,(0x02,a2)                    	| [$65dd: ld   (ix+$02),a]
	jra	l_6581                             	| [$65e0: jp   $6581]
l_65e3:
	move.b	(0x0a,a3),d0                    	| [$65e3: ld   a,(iy+$0a)]
	sub.b	#0x46,d0                         	| [$65e6: sub  $46]
	move.b	d0,(0x03,a2)                    	| [$65e8: ld   (ix+$03),a]
	move.b	(0x09,a3),d0                    	| [$65eb: ld   a,(iy+$09)]
	subq.b	#0x07,d0                        	| [$65ee: sub  $07]
	move.b	d0,(0x00,a2)                    	| [$65f0: ld   (ix+$00),a]
	move.b	#0x02,d0                        	| [$65f3: ld   a,$02]
	move.b	d0,(0x02,a2)                    	| [$65f5: ld   (ix+$02),a]
	jra	l_6581                             	| [$65f8: jp   $6581]

task_6622:
	jbsr	l_7a4d                            	| [$6622: call $7A4D]
	jbsr	l_69f5                            	| [$6625: call $69F5]
	jbsr	l_69ee                            	| [$6628: call $69EE]
	jbsr	l_6a6b                            	| [$662b: call $6A6B]
	move.b	referee_x_pos_C700,d0                       	| [$662e: ld   a,($C700)]
	move.b	d0,unknown_C1EA                 	| [$6631: ld   (unknown_C1EA),a]
	move.b	unknown_C703,d0                 	| [$6634: ld   a,(unknown_C703)]
	move.b	d0,unknown_C1EB                 	| [$6637: ld   (unknown_C1EB),a]
	move.w	unknown_C0C8,unknown_C0D8             	| [$663a: ld   hl,(unknown_C0C8)]
	                 	| [$663d: ld   (unknown_C0D8),hl]
	move.w	unknown_C0D0,unknown_C0DA             	| [$6640: ld   hl,(unknown_C0D0)]
	                 	| [$6643: ld   (unknown_C0DA),hl]
* init player points to both zero
											| [$6646: ld   hl,$0000] 0
	clr		player_1_points_C91A         	| [$6649: ld   (player_1_points_C91A),hl]
	clr		player_2_points_C91C         	| [$664c: ld   (player_2_points_C91C),hl]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$664f: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x03,d0                         	| [$6652: and  $03]
	cmp.b	#0x03,d0                         	| [$6654: cp   $03]
	jne	l_665f                             	| [$6656: jp   nz,$665F]
	jbsr	l_6bcf                            	| [$6659: call $6BCF]
	jbsr	l_6bee                            	| [$665c: call $6BEE]
l_665f:
	move.b	#0x30,d0                        	| [$665f: ld   a,$30]
	jbsr	suspend_this_task_B05A            	| [$6661: call suspend_this_task_B05A]
	tst.b	d0                               	| [$6664: and  a]
	jeq	0f
	jbsr	display_error_text_B075           	| [$6665: call nz,display_error_text_B075]
0:
l_6668:
	move.b	#0x02,d1
	move.b	#0x03,d2                      	| [$6668: ld   bc,$0203]
	lea	task_struct_C1E0,a3                	| [$666b: ld   iy,task_struct_C1E0]
	move.b	(0x0a,a3),d0                    	| [$666f: ld   a,(iy+$0a)]
	add.b	#0x10,d0                         	| [$6672: add  a,$10]
	move.b	d0,d3                           	| [$6674: ld   d,a]
	move.b	(0x0b,a3),d0                    	| [$6675: ld   a,(iy+$0b)]
	sub.b	#0x18,d0                         	| [$6678: sub  $18]
	move.b	d0,d4                           	| [$667a: ld   e,a]
	move.b	#0x0A,d5                        	| [$667b: ld   h,$0A]
	jbsr	l_7a6a                            	| [$667d: call $7A6A]
	move.b	#0x01,d1
	move.b	#0x02,d2                      	| [$6680: ld   bc,$011D]
	move.b	(0x0a,a3),d0                    	| [$6683: ld   a,(iy+$0a)]
	add.b	#0x10,d0                         	| [$6686: add  a,$10]
	move.b	d0,d3                           	| [$6688: ld   d,a]
	move.b	(0x0b,a3),d0                    	| [$6689: ld   a,(iy+$0b)]
	sub.b	#0x08,d0                         	| [$668c: sub  $08]
	move.b	d0,d4                           	| [$668e: ld   e,a]
	lea	unknown_C7BC(pc),a2                	| [$668f: ld   ix,unknown_C7BC]
	move.b	#0x05,d5                        	| [$6693: ld   h,$05]
	jbsr	l_7a6e                            	| [$6695: call $7A6E]
	jbsr	or_50_to_C7BE_7A58                	| [$6698: call or_50_to_C7BE_7A58]
	move.b	#0x25,d0                        	| [$669b: ld   a,$25]
	jbsr	play_sound_B072                   	| [$669d: call play_sound_B072]
	move.b	#0x03,d0                        	| [$66a0: ld   a,$03]
	move.b	#0x0A,d1                        	| [$66a2: ld   b,$0A]
	jbsr	task_manipulation_B05D            	| [$66a4: call task_manipulation_B05D]
	tst.b	d0                               	| [$66a7: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$66a8: call nz,display_error_text_B075]
0:
	move.b	#0x3C,d0                        	| [$66ab: ld   a,$3C]
	jbsr	suspend_this_task_B05A            	| [$66ad: call suspend_this_task_B05A]
	movem.w	d1/d2,-(sp)                    	| [$66b0: push bc]
	move.w	d0,-(sp)                        	| [$66b1: push af]
	jbsr	l_7a4d                            	| [$66b2: call $7A4D]
	move.w	(sp)+,d0                        	| [$66b5: pop  af]
	movem.w	(sp)+,d1/d2                    	| [$66b6: pop  bc]
	tst.b	d0                               	| [$66b7: and  a]
	jne	l_6700                             	| [$66b8: jp   nz,$6700]
	move.b	#0x0A,d0                        	| [$66bb: ld   a,$0A]
	move.b	#0x0A,d1                        	| [$66bd: ld   b,$0A]
	jbsr	task_manipulation_B05D            	| [$66bf: call task_manipulation_B05D]
	tst.b	d0                               	| [$66c2: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$66c3: call nz,display_error_text_B075]
0:
	move.b	#0x0B,d0                        	| [$66c6: ld   a,$0B]
	move.b	#0x0A,d1                        	| [$66c8: ld   b,$0A]
	jbsr	task_manipulation_B05D            	| [$66ca: call task_manipulation_B05D]
	tst.b	d0                               	| [$66cd: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$66ce: call nz,display_error_text_B075]
0:
	move.b	referee_x_pos_C700,d0           	| [$66d1: ld   a,(referee_x_pos_C700)]
	sub.b	#0x10,d0                         	| [$66d4: sub  $10]
	move.b	d0,unknown_C1EC                 	| [$66d6: ld   (unknown_C1EC),a]
	add.b	#0x20,d0                         	| [$66d9: add  a,$20]
	move.b	d0,unknown_C1ED                 	| [$66db: ld   (unknown_C1ED),a]
	move.b	#0xEA,d0                        	| [$66de: ld   a,$EA]
	move.b	d0,unknown_C709                 	| [$66e0: ld   (unknown_C709),a]
l_66e3:
	move.b	#0x14,d0                        	| [$66e3: ld   a,$14]
	jbsr	suspend_this_task_B05A            	| [$66e5: call suspend_this_task_B05A]
	tst.b	d0                               	| [$66e8: and  a]
	jne	l_6700                             	| [$66e9: jp   nz,$6700]
	move.b	referee_walk_direction_C1E9,d0  	| [$66ec: ld   a,(referee_walk_direction_C1E9)]
	move.b	#0xFC,d2                        	| [$66ef: ld   c,$FC]
	tst.b	d0                               	| [$66f1: and  a]
	jeq	l_66f7                             	| [$66f2: jp   z,$66F7]
	move.b	#0x04,d2                        	| [$66f5: ld   c,$04]
l_66f7:
	jbsr	l_6b03                            	| [$66f7: call $6B03]
	jbsr	l_6b20                            	| [$66fa: call $6B20]
	jra	l_66e3                             	| [$66fd: jp   $66E3]
l_6700:
	move.w	d0,-(sp)                        	| [$6700: push af]
	movem.w	d1/d2,-(sp)                    	| [$6701: push bc]
	jbsr	l_6a6b                            	| [$6702: call $6A6B]
	movem.w	(sp)+,d1/d2                    	| [$6705: pop  bc]
	move.w	(sp)+,d0                        	| [$6706: pop  af]
	cmp.b	#0x08,d0                         	| [$6707: cp   $08]
	jne	l_681d                             	| [$6709: jp   nz,$681D]
	move.b	#0x01,d0                        	| [$670c: ld   a,$01]
	jbsr	l_6a25                            	| [$670e: call $6A25]
	move.b	#0x02,d1
	move.b	#0x05,d2                      	| [$6711: ld   bc,$0205]
	lea	task_struct_C1E0,a3                	| [$6714: ld   iy,task_struct_C1E0]
	move.b	(0x0a,a3),d0                    	| [$6718: ld   a,(iy+$0a)]
	add.b	#0x10,d0                         	| [$671b: add  a,$10]
	move.b	d0,d3                           	| [$671d: ld   d,a]
	move.b	(0x0b,a3),d0                    	| [$671e: ld   a,(iy+$0b)]
	sub.b	#0x18,d0                         	| [$6721: sub  $18]
	move.b	d0,d4                           	| [$6723: ld   e,a]
	move.b	#0x05,d5                        	| [$6724: ld   h,$05]
	jbsr	l_7a6a                            	| [$6726: call $7A6A]
	move.b	#0x01,d1
	move.b	#0x1D,d2                      	| [$6729: ld   bc,$011D]
	move.b	(0x0a,a3),d0                    	| [$672c: ld   a,(iy+$0a)]
	add.b	#0x10,d0                         	| [$672f: add  a,$10]
	move.b	d0,d3                           	| [$6731: ld   d,a]
	move.b	(0x0b,a3),d0                    	| [$6732: ld   a,(iy+$0b)]
	sub.b	#0x08,d0                         	| [$6735: sub  $08]
	move.b	d0,d4                           	| [$6737: ld   e,a]
	lea	unknown_C7BC(pc),a2                	| [$6738: ld   ix,unknown_C7BC]
	move.b	#0x05,d5                        	| [$673c: ld   h,$05]
	jbsr	l_7a6e                            	| [$673e: call $7A6E]
	jbsr	or_50_to_C7BE_7A58                	| [$6741: call or_50_to_C7BE_7A58]
	move.b	#0x24,d0                        	| [$6744: ld   a,$24]
	jbsr	play_sound_B072                   	| [$6746: call play_sound_B072]
	move.b	#0x70,d0                        	| [$6749: ld   a,$70]
	jbsr	suspend_this_task_B05A            	| [$674b: call suspend_this_task_B05A]
	tst.b	d0                               	| [$674e: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$674f: call nz,display_error_text_B075]
0:
	jbsr	l_7a4d                            	| [$6752: call $7A4D]
	jbsr	l_6a6b                            	| [$6755: call $6A6B]
	move.b	#0x3C,d0                        	| [$6758: ld   a,$3C]
	jbsr	suspend_this_task_B05A            	| [$675a: call suspend_this_task_B05A]
	move.b	#0x02,d1
	move.b	#0x07,d2                      	| [$675d: ld   bc,$0207]
	lea	task_struct_C1E0,a3                	| [$6760: ld   iy,task_struct_C1E0]
	move.b	(0x0a,a3),d0                    	| [$6764: ld   a,(iy+$0a)]
	add.b	#0x10,d0                         	| [$6767: add  a,$10]
	move.b	d0,d3                           	| [$6769: ld   d,a]
	move.b	(0x0b,a3),d0                    	| [$676a: ld   a,(iy+$0b)]
	sub.b	#0x18,d0                         	| [$676d: sub  $18]
	move.b	d0,d4                           	| [$676f: ld   e,a]
	move.b	#0x01,d5                        	| [$6770: ld   h,$01]
	jbsr	l_7a6a                            	| [$6772: call $7A6A]
	move.b	#0x01,d1
	move.b	#0x1D,d2                      	| [$6775: ld   bc,$011D]
	move.b	(0x0a,a3),d0                    	| [$6778: ld   a,(iy+$0a)]
	add.b	#0x10,d0                         	| [$677b: add  a,$10]
	move.b	d0,d3                           	| [$677d: ld   d,a]
	move.b	(0x0b,a3),d0                    	| [$677e: ld   a,(iy+$0b)]
	sub.b	#0x08,d0                         	| [$6781: sub  $08]
	move.b	d0,d4                           	| [$6783: ld   e,a]
	lea	unknown_C7BC,a2                	| [$6784: ld   ix,unknown_C7BC]
	move.b	#0x05,d5                        	| [$6788: ld   h,$05]
	jbsr	l_7a6e                            	| [$678a: call $7A6E]
	jbsr	or_50_to_C7BE_7A58                	| [$678d: call or_50_to_C7BE_7A58]
	move.b	#0x28,d0                        	| [$6790: ld   a,$28]
	jbsr	play_sound_B072                   	| [$6792: call play_sound_B072]
	move.b	#0x3C,d0                        	| [$6795: ld   a,$3C]
	jbsr	suspend_this_task_B05A            	| [$6797: call suspend_this_task_B05A]
	jbsr	l_7a4d                            	| [$679a: call $7A4D]
	lea	player_2_points_C91C,a0        	| [$679d: ld   hl,player_2_points_C91C]
	move.b	player_1_points_C91A,d0         	| [$67a0: ld   a,(player_1_points_C91A)]
	cmp.b	(a0),d0                          	| [$67a3: cp   (hl)]
	jeq	l_67ad                             	| [$67a4: jp   z,$67AD]
	jcc	l_67ea                             	| [$67a7: jp   nc,$67EA]
	jra	l_67b8                             	| [$67aa: jp   $67B8]
l_67ad:
	addq.w	#1,a0                           	| [$67ad: inc  hl]
	move.b	unknown_C91B,d0                 	| [$67ae: ld   a,(unknown_C91B)]
	cmp.b	(a0),d0                          	| [$67b1: cp   (hl)]
	jeq	l_69a8                             	| [$67b2: jp   z,$69A8]
	jcc	l_67ea                             	| [$67b5: jp   nc,$67EA]
l_67b8:
	move.b	#0x03,d0                        	| [$67b8: ld   a,$03]
	jbsr	l_6a25                            	| [$67ba: call $6A25]
	jbsr	l_6c79                            	| [$67bd: call $6C79]
	move.b	#0x29,d0                        	| [$67c0: ld   a,$29]
	jbsr	play_sound_B072                   	| [$67c2: call play_sound_B072]
	move.b	#0x30,d0                        	| [$67c5: ld   a,$30]
	jbsr	suspend_this_task_B05A            	| [$67c7: call suspend_this_task_B05A]
	move.b	#0x0B,d0                        	| [$67ca: ld   a,$0B]
	move.b	#0x12,d1                        	| [$67cc: ld   b,$12]
	jbsr	task_manipulation_B05D            	| [$67ce: call task_manipulation_B05D]
	move.b	#0x0A,d0                        	| [$67d1: ld   a,$0A]
	move.b	#0x13,d1                        	| [$67d3: ld   b,$13]
	jbsr	task_manipulation_B05D            	| [$67d5: call task_manipulation_B05D]
	move.b	#0xC8,d0                        	| [$67d8: ld   a,$C8]
	jbsr	suspend_this_task_B05A            	| [$67da: call suspend_this_task_B05A]
	move.b	#0x02,d0                        	| [$67dd: ld   a,$02]
	move.b	d0,d1                           	| [$67df: ld   b,a]
	jbsr	task_manipulation_B05D            	| [$67e0: call task_manipulation_B05D]
	tst.b	d0                               	| [$67e3: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$67e4: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                   	| [$67e7: call task_yield_B051]
l_67ea:
	move.b	#0x02,d0                        	| [$67ea: ld   a,$02]
	jbsr	l_6a25                            	| [$67ec: call $6A25]
	jbsr	l_6cb2                            	| [$67ef: call $6CB2]
	move.b	#0x2A,d0                        	| [$67f2: ld   a,$2A]
	jbsr	play_sound_B072                   	| [$67f4: call play_sound_B072]
	move.b	#0x30,d0                        	| [$67f7: ld   a,$30]
	jbsr	suspend_this_task_B05A            	| [$67f9: call suspend_this_task_B05A]
	move.b	#0x0A,d0                        	| [$67fc: ld   a,$0A]
	move.b	#0x12,d1                        	| [$67fe: ld   b,$12]
	jbsr	task_manipulation_B05D            	| [$6800: call task_manipulation_B05D]
	move.b	#0x0B,d0                        	| [$6803: ld   a,$0B]
	move.b	#0x13,d1                        	| [$6805: ld   b,$13]
	jbsr	task_manipulation_B05D            	| [$6807: call task_manipulation_B05D]
	move.b	#0xC8,d0                        	| [$680a: ld   a,$C8]
	jbsr	suspend_this_task_B05A            	| [$680c: call suspend_this_task_B05A]
	move.b	#0x02,d0                        	| [$680f: ld   a,$02]
	move.b	#0x01,d1                        	| [$6811: ld   b,$01]
	jbsr	task_manipulation_B05D            	| [$6813: call task_manipulation_B05D]
	tst.b	d0                               	| [$6816: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$6817: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                   	| [$681a: call task_yield_B051]
l_681d:
	move.w	d0,-(sp)                        	| [$681d: push af]
	movem.w	d1/d2,-(sp)                    	| [$681e: push bc]
	move.b	#0x28,d0                        	| [$681f: ld   a,$28]
	jbsr	suspend_this_task_B05A            	| [$6821: call suspend_this_task_B05A]
	tst.b	d0                               	| [$6824: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$6825: call nz,display_error_text_B075]
0:
	move.b	#0x0F,d0                        	| [$6828: ld   a,$0F]
	move.b	#0x09,d1                        	| [$682a: ld   b,$09]
	jbsr	task_manipulation_B05D            	| [$682c: call task_manipulation_B05D]
	movem.w	(sp)+,d1/d2                    	| [$682f: pop  bc]
	move.w	(sp)+,d0                        	| [$6830: pop  af]
	movem.w	d1/d2,-(sp)                    	| [$6831: push bc]
	cmp.b	#0x04,d0                         	| [$6832: cp   $04]
	jeq	l_683f                             	| [$6834: jp   z,$683F]
	cmp.b	#0x05,d0                         	| [$6837: cp   $05]
	jeq	l_68ea                             	| [$6839: jp   z,$68EA]
	jbsr	display_error_text_B075           	| [$683c: call display_error_text_B075]
l_683f:
	move.b	#0x27,d0                        	| [$683f: ld   a,$27]
	jbsr	play_sound_B072                   	| [$6841: call play_sound_B072]
	move.b	#0x03,d0                        	| [$6844: ld   a,$03]
	move.b	#0x09,d1                        	| [$6846: ld   b,$09]
	jbsr	task_manipulation_B05D            	| [$6848: call task_manipulation_B05D]
	tst.b	d0                               	| [$684b: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$684c: call nz,display_error_text_B075]
0:
	jbsr	clear_text_6C2C                   	| [$684f: call clear_text_6C2C]
	movem.w	(sp)+,d1/d2                    	| [$6852: pop  bc]
	move.b	d1,d0                           	| [$6853: ld   a,b]
	cmp.b	#0x0A,d0                         	| [$6854: cp   $0A]
	jne	l_68a2                             	| [$6856: jp   nz,$68A2]
	lea	task_struct_C1E0(pc),a3                	| [$6859: ld   iy,task_struct_C1E0]
	move.b	(0x07,a3),d6                    	| [$685d: ld   l,(iy+$07)]
	move.b	(0x08,a3),d5                    	| [$6860: ld   h,(iy+$08)]
	jbsr	display_scoring_technique_6CE6    	| [$6863: call display_scoring_technique_6CE6]
	move.b	#0x02,d0                        	| [$6866: ld   a,$02]
	jbsr	l_6a25                            	| [$6868: call $6A25]
	jbsr	l_6cb2                            	| [$686b: call $6CB2]
l_686e:
	move.b	player_1_points_C91A,d0         	| [$686e: ld   a,(player_1_points_C91A)]
	addq.b	#1,d0                           	| [$6871: inc  a]
	cmp.b	#0x02,d0                         	| [$6872: cp   $02]
	jne	l_689c                             	| [$6874: jp   nz,$689C]
	move.b	d0,player_1_points_C91A         	| [$6877: ld   (player_1_points_C91A),a]
	jbsr	l_6b3d                            	| [$687a: call $6B3D]
	move.b	#0x0A,d0                        	| [$687d: ld   a,$0A]
	move.b	#0x12,d1                        	| [$687f: ld   b,$12]
	jbsr	task_manipulation_B05D            	| [$6881: call task_manipulation_B05D]
	move.b	#0x64,d0                        	| [$6884: ld   a,$64]
	jbsr	suspend_this_task_B05A            	| [$6886: call suspend_this_task_B05A]
	move.b	#0x02,d0                        	| [$6889: ld   a,$02]
	move.b	#0x01,d1                        	| [$688b: ld   b,$01]
	jbsr	task_manipulation_B05D            	| [$688d: call task_manipulation_B05D]
	tst.b	d0                               	| [$6890: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$6891: call nz,display_error_text_B075]
0:
	move.b	#0x03,d0                        	| [$6894: ld   a,$03]
	jbsr	resume_task_B054                  	| [$6896: call resume_task_B054]
	jbsr	task_yield_B051                   	| [$6899: call task_yield_B051]
l_689c:
	move.b	d0,player_1_points_C91A         	| [$689c: ld   (player_1_points_C91A),a]
	jra	l_6959                             	| [$689f: jp   $6959]
l_68a2:
	lea	task_struct_C1E0,a3                	| [$68a2: ld   iy,task_struct_C1E0]
	move.b	(0x07,a3),d6                    	| [$68a6: ld   l,(iy+$07)]
	move.b	(0x08,a3),d5                    	| [$68a9: ld   h,(iy+$08)]
	jbsr	display_scoring_technique_6CE6    	| [$68ac: call display_scoring_technique_6CE6]
	move.b	#0x03,d0                        	| [$68af: ld   a,$03]
	jbsr	l_6a25                            	| [$68b1: call $6A25]
	jbsr	l_6c79                            	| [$68b4: call $6C79]
l_68b7:
	move.b	player_2_points_C91C,d0         	| [$68b7: ld   a,(player_2_points_C91C)]
	addq.b	#1,d0                           	| [$68ba: inc  a]
	cmp.b	#0x02,d0                         	| [$68bb: cp   $02]
	jne	l_68e4                             	| [$68bd: jp   nz,$68E4]
	move.b	d0,player_2_points_C91C         	| [$68c0: ld   (player_2_points_C91C),a]
	jbsr	l_6b77                            	| [$68c3: call $6B77]
	move.b	#0x0B,d0                        	| [$68c6: ld   a,$0B]
	move.b	#0x12,d1                        	| [$68c8: ld   b,$12]
	jbsr	task_manipulation_B05D            	| [$68ca: call task_manipulation_B05D]
	move.b	#0xC8,d0                        	| [$68cd: ld   a,$C8]
	jbsr	suspend_this_task_B05A            	| [$68cf: call suspend_this_task_B05A]
	move.b	#0x02,d0                        	| [$68d2: ld   a,$02]
	move.b	d0,d1                           	| [$68d4: ld   b,a]
	jbsr	task_manipulation_B05D            	| [$68d5: call task_manipulation_B05D]
	tst.b	d0                               	| [$68d8: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$68d9: call nz,display_error_text_B075]
0:
	move.b	#0x03,d0                        	| [$68dc: ld   a,$03]
	jbsr	resume_task_B054                  	| [$68de: call resume_task_B054]
	jbsr	task_yield_B051                   	| [$68e1: call task_yield_B051]
l_68e4:
	move.b	d0,player_2_points_C91C         	| [$68e4: ld   (player_2_points_C91C),a]
	jra	l_6959                             	| [$68e7: jp   $6959]
l_68ea:
	move.b	#0x26,d0                        	| [$68ea: ld   a,$26]
	jbsr	play_sound_B072                   	| [$68ec: call play_sound_B072]
	move.b	#0x03,d0                        	| [$68ef: ld   a,$03]
	move.b	#0x09,d1                        	| [$68f1: ld   b,$09]
	jbsr	task_manipulation_B05D            	| [$68f3: call task_manipulation_B05D]
	tst.b	d0                               	| [$68f6: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$68f7: call nz,display_error_text_B075]
0:
	jbsr	clear_text_6C2C                   	| [$68fa: call clear_text_6C2C]
	movem.w	(sp)+,d1/d2                    	| [$68fd: pop  bc]
	move.b	d1,d0                           	| [$68fe: ld   a,b]
	cmp.b	#0x0A,d0                         	| [$68ff: cp   $0A]
	jne	l_6930                             	| [$6901: jp   nz,$6930]
	lea	task_struct_C1E0(pc),a3                	| [$6904: ld   iy,task_struct_C1E0]
	move.b	(0x07,a3),d6                    	| [$6908: ld   l,(iy+$07)]
	move.b	(0x08,a3),d5                    	| [$690b: ld   h,(iy+$08)]
	jbsr	display_scoring_technique_6CE6    	| [$690e: call display_scoring_technique_6CE6]
	move.b	#0x02,d0                        	| [$6911: ld   a,$02]
	jbsr	l_6a25                            	| [$6913: call $6A25]
	jbsr	l_6cb2                            	| [$6916: call $6CB2]
	move.b	unknown_C91B,d0                 	| [$6919: ld   a,(unknown_C91B)]
	addq.b	#1,d0                           	| [$691c: inc  a]
	cmp.b	#0x02,d0                         	| [$691d: cp   $02]
	jne	l_692a                             	| [$691f: jp   nz,$692A]
	clr.b	d0                               	| [$6922: ld   a,$00]
	move.b	d0,unknown_C91B                 	| [$6924: ld   (unknown_C91B),a]
	jra	l_686e                             	| [$6927: jp   $686E]
l_692a:
	move.b	d0,unknown_C91B                 	| [$692a: ld   (unknown_C91B),a]
	jra	l_6959                             	| [$692d: jp   $6959]
l_6930:
	lea	task_struct_C1E0,a3                	| [$6930: ld   iy,task_struct_C1E0]
	move.b	(0x07,a3),d6                    	| [$6934: ld   l,(iy+$07)]
	move.b	(0x08,a3),d5                    	| [$6937: ld   h,(iy+$08)]
	jbsr	display_scoring_technique_6CE6    	| [$693a: call display_scoring_technique_6CE6]
	move.b	#0x03,d0                        	| [$693d: ld   a,$03]
	jbsr	l_6a25                            	| [$693f: call $6A25]
	jbsr	l_6c79                            	| [$6942: call $6C79]
	move.b	unknown_C91D,d0                 	| [$6945: ld   a,(unknown_C91D)]
	addq.b	#1,d0                           	| [$6948: inc  a]
	cmp.b	#0x02,d0                         	| [$6949: cp   $02]
	jne	l_6956                             	| [$694b: jp   nz,$6956]
	clr.b	d0                               	| [$694e: ld   a,$00]
	move.b	d0,unknown_C91D                 	| [$6950: ld   (unknown_C91D),a]
	jra	l_68b7                             	| [$6953: jp   $68B7]
l_6956:
	move.b	d0,unknown_C91D                 	| [$6956: ld   (unknown_C91D),a]
l_6959:
	move.b	#0xB0,d0                        	| [$6959: ld   a,$B0]
	jbsr	suspend_this_task_B05A            	| [$695b: call suspend_this_task_B05A]
	jbsr	l_7a4d                            	| [$695e: call $7A4D]
	jbsr	l_6b3d                            	| [$6961: call $6B3D]
	jbsr	l_6b77                            	| [$6964: call $6B77]
	move.b	#0x3C,d0                        	| [$6967: ld   a,$3C]
	jbsr	suspend_this_task_B05A            	| [$6969: call suspend_this_task_B05A]
	tst.b	d0                               	| [$696c: and  a]
	jeq	0f
	jbsr	display_error_text_B075           	| [$696d: call nz,display_error_text_B075]
0:
	move.b	#0x0A,d0                        	| [$6970: ld   a,$0A]
	clr.b	d1                               	| [$6972: ld   b,$00]
	jbsr	task_manipulation_B05D            	| [$6974: call task_manipulation_B05D]
	tst.b	d0                               	| [$6977: and  a]
	jeq	0f
	jbsr	display_error_text_B075           	| [$6978: call nz,display_error_text_B075]
0:
	move.b	#0x0B,d0                        	| [$697b: ld   a,$0B]
	clr.b	d1                               	| [$697d: ld   b,$00]
	jbsr	task_manipulation_B05D            	| [$697f: call task_manipulation_B05D]
	tst.b	d0                               	| [$6982: and  a]
	jeq	0f
	jbsr	display_error_text_B075           	| [$6983: call nz,display_error_text_B075]
0:
	jbsr	l_6a6b                            	| [$6986: call $6A6B]
	lea	game_mem+0x6f56,a0                  	| [$6989: ld   hl,table_6f56]
	jbsr	display_multicolor_text_B03C      	| [$698c: call display_multicolor_text_B03C]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$698f: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x03,d0                         	| [$6992: and  $03]
	cmp.b	#0x03,d0                         	| [$6994: cp   $03]
	jne	l_699c                             	| [$6996: jp   nz,$699C]
	jbsr	l_6bee                            	| [$6999: call $6BEE]
l_699c:
	move.b	#0x1E,d0                        	| [$699c: ld   a,$1E]
	jbsr	suspend_this_task_B05A            	| [$699e: call suspend_this_task_B05A]
	tst.b	d0                               	| [$69a1: and  a]
	jeq	0f
	jbsr	display_error_text_B075           	| [$69a2: call nz,display_error_text_B075]
0:
	jra	l_6668                             	| [$69a5: jp   $6668]
l_69a8:
	* could be heavily optimized!!!
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$69a8: ld   a,(players_type_human_or_cpu_flags_C02D)]
	cmp.b	#0x05,d0                         	| [$69ab: cp   $05]
	jeq	l_67b8                             	| [$69ad: jp   z,$67B8]
	cmp.b	#0x0A,d0                         	| [$69b0: cp   $0A]
	jeq	l_67ea                             	| [$69b2: jp   z,$67EA]
	move.b	unknown_C0C8,d6             	| [$69b5: ld   hl,(unknown_C0C8)]
	move.b	unknown_C0C8+1,d5             	| [$69b5: ld   hl,(unknown_C0C8)]
	move.b	d6,d0                           	| [$69b8: ld   a,l]
	move.b	d5,d6                           	| [$69b9: ld   l,h]
	move.b	d0,d5                           	| [$69ba: ld   h,a]
	move.w	unknown_C0D8,d4             	| [$69bb: ld   de,(unknown_C0D8)]
	move.b	unknown_C0D8+1,d3             	| [$69bb: ld   de,(unknown_C0D8)]
	move.b	d4,d0                           	| [$69bf: ld   a,e]
	move.b	d3,d4                           	| [$69c0: ld   e,d]
	move.b	d0,d3                           	| [$69c1: ld   d,a]
												| [$69c2: and  a]
	bsr		change_d3_d4_to_d3_16
	bsr		change_d5_d6_to_d5_16
	sub.w	d3,d5							| [sbc  hl,de]

	move.w	d5,-(sp)                        	| [$69c5: push hl]
	move.b	unknown_C0D0,d6             	| [$69c6: ld   hl,(unknown_C0D0)]
	move.b	unknown_C0D0+1,d5             	| [$69c6: ld   hl,(unknown_C0D0)]
	move.b	d6,d0                           	| [$69c9: ld   a,l]
	move.b	d5,d6                           	| [$69ca: ld   l,h]
	move.b	d0,d5                           	| [$69cb: ld   h,a]
	move.b	unknown_C0DA,d4             	| [$69cc: ld   de,(unknown_C0DA)]
	move.b	unknown_C0DA+1,d3             	| [$69cc: ld   de,(unknown_C0DA)]
	move.b	d4,d0                           	| [$69d0: ld   a,e]
	move.b	d3,d4                           	| [$69d1: ld   e,d]
	move.b	d0,d3                           	| [$69d2: ld   d,a]
	bsr		change_d3_d4_to_d3_16
	bsr		change_d5_d6_to_d5_16
	                               	| [$69d3: and  a]
	sub.w	d3,d5							| [sbc  hl,de]
	move.w	(sp)+,d3                        	| [$69d6: pop  de]
	                               	| [$69d7: and  a]
	cmp.w	d3,d5					| [sbc    hl,de]
	jeq	l_69e3                             	| [$69da: jp   z,$69E3]
	jcs	l_67ea                             	| [$69dd: jp   c,$67EA]
	jcc	l_67b8                             	| [$69e0: jp   nc,$67B8]
l_69e3:
	move.b	periodic_counter_16bit_C02E,d0  	| [$69e3: ld   a,(periodic_counter_16bit_C02E)]
	btst.b	#3,d0                           	| [$69e6: bit  3,a]
	jne	l_67ea                             	| [$69e8: jp   nz,$67EA]
	jra	l_67b8                             	| [$69eb: jp   $67B8]
l_69ee:
	lea	game_mem+0x6f56,a0                  	| [$69ee: ld   hl,table_6f56]
	jbsr	display_multicolor_text_B03C      	| [$69f1: call display_multicolor_text_B03C]
	rts                                    	| [$69f4: ret]
l_69f5:
	lea	game_mem+0x6A07,a0                  	| [$69f5: ld   hl,table_6A07]
	lea	temp_numeric_buffer_CF00,a1    	| [$69f8: ld   de,temp_numeric_buffer_CF00]
	move.w	#0x0022,d1                      	| [$69fb: ld   bc,$0022] 34
	jbsr	ldir                              	| [$69fe: ldir]
	lea	temp_numeric_buffer_CF00,a0    	| [$6a00: ld   hl,temp_numeric_buffer_CF00]
	jbsr	display_multicolor_text_B03C      	| [$6a03: call display_multicolor_text_B03C]
	rts                                    	| [$6a06: ret]
l_6a25:
	lea	referee_x_pos_C700,a3          	| [$6a25: ld   iy,referee_x_pos_C700]
	subq.b	#1,d0                           	| [$6a29: dec  a]
	add.b	d0,d0                            	| [$6a2a: add  a,a]
	clr.w	d1                               	| [$6a2c: ld   b,$00]
	move.b	d0,d1                           	| [$6a2b: ld   c,a]
	lea	game_mem+0x6A59,a2                  	| [$6a2e: ld   ix,table_6A59]
	add.w	d1,a2                            	| [$6a32: add  ix,bc]
	bsr		load_a0_from_a2_structure_00_address        	| [$6a34: ld   l,(ix+$00)]
	                    	| [$6a37: ld   h,(ix+$01)]

	move.l	a0,a2                        	| [$6a3a: push hl]
											| [$6a3b: pop  ix]
	move.b	(0x00,a2),d0                    	| [$6a3d: ld   a,(ix+$00)]
	move.b	d0,(0x05,a3)                    	| [$6a40: ld   (iy+$05),a]
	move.b	(0x01,a2),d0                    	| [$6a43: ld   a,(ix+$01)]
	or.b	(0x06,a3),d0                      	| [$6a46: or   (iy+$06)]
	move.b	d0,(0x06,a3)                    	| [$6a49: ld   (iy+$06),a]
	move.b	(0x02,a2),d0                    	| [$6a4c: ld   a,(ix+$02)]
	move.b	d0,(0x0d,a3)                    	| [$6a4f: ld   (iy+$0d),a]
	move.b	(0x03,a2),d0                    	| [$6a52: ld   a,(ix+$03)]
	move.b	d0,(0x11,a3)                    	| [$6a55: ld   (iy+$11),a]
	rts                                    	| [$6a58: ret]

l_6a6b:
	lea	referee_start_position_table_6AE1(pc),a2	| [$6a6b: ld   ix,referee_start_position_table_6AE1]
* start position for referee
	move.b	background_and_state_bits_C911,d0	| [$6a6f: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$6a72: res  7,a]
	add.b	d0,d0                            	| [$6a74: add  a,a]
	clr.w	d1                               	| [$6a76: ld   b,$00]
	move.b	d0,d1                           	| [$6a75: ld   c,a]
	add.w	d1,a2                            	| [$6a78: add  ix,bc]
	move.b	(0x00,a2),d5                    	| [$6a7a: ld   h,(ix+$00)]
	move.b	(0x01,a2),d6                    	| [$6a7d: ld   l,(ix+$01)]
	lea	game_mem+0x6AD5,a2                  	| [$6a80: ld   ix,table_6AD5]
	lea	referee_x_pos_C700,a3          	| [$6a84: ld   iy,referee_x_pos_C700]
	move.b	d5,(0x00,a3)                    	| [$6a88: ld   (iy+$00),h]
	move.b	d5,(0x04,a3)                    	| [$6a8b: ld   (iy+$04),h]
	move.b	d5,(0x08,a3)                    	| [$6a8e: ld   (iy+$08),h]
	move.b	d5,d0                           	| [$6a91: ld   a,h]
	sub.b	#0x10,d0                         	| [$6a92: sub  $10]
	move.b	d0,(0x0c,a3)                    	| [$6a94: ld   (iy+$0c),a]
	add.b	#0x20,d0                         	| [$6a97: add  a,$20]
	move.b	d0,(0x10,a3)                    	| [$6a99: ld   (iy+$10),a]
	move.b	d6,(0x03,a3)                    	| [$6a9c: ld   (iy+$03),l]
	move.b	d6,d0                           	| [$6a9f: ld   a,l]
	add.b	#0x10,d0                         	| [$6aa0: add  a,$10]
	move.b	d0,(0x07,a3)                    	| [$6aa2: ld   (iy+$07),a]
	add.b	#0x10,d0                         	| [$6aa5: add  a,$10]
	move.b	d0,(0x0b,a3)                    	| [$6aa7: ld   (iy+$0b),a]
	move.b	d6,d0                           	| [$6aaa: ld   a,l]
	addq.b	#0x04,d0                        	| [$6aab: add  a,$04]
	move.b	d0,(0x0f,a3)                    	| [$6aad: ld   (iy+$0f),a]
	move.b	d0,(0x13,a3)                    	| [$6ab0: ld   (iy+$13),a]
	lea	unknown_C701,a3                	| [$6ab3: ld   iy,unknown_C701]
l_6ab7:
	move.b	(0x00,a2),d0                    	| [$6ab7: ld   a,(ix+$00)]
	cmp.b	#0xFF,d0                         	| [$6aba: cp   $FF]
	bne.b	0f
	rts                                    	| [$6abc: ret  z]
0:
	move.b	d0,(0x00,a3)                    	| [$6abd: ld   (iy+$00),a]
	move.b	(0x01,a2),d0                    	| [$6ac0: ld   a,(ix+$01)]
	move.b	d0,(0x01,a3)                    	| [$6ac3: ld   (iy+$01),a]
	addq.w	#2,a2                           	| [$6ac6: inc  ix] * 2
	addq.w	#4,a3                           	| [$6aca: inc  iy] * 4
	jra	l_6ab7                             	| [$6ad2: jp   $6AB7]
referee_start_position_table_6AE1:
	dc.b	0xc0,0x48,0x78,0x70,0x78,0x58,0x78,0x70 | referee_start_position_table_6AE1
	dc.b	0x78,0x70,0x78,0x70,0x78,0x70,0x78,0x70 | $6ae9
	dc.b	0x78,0x70,0x91,0x70,0x78,0x70,0x88,0x58 | $6af1
	dc.b	0x78,0x70,0x78,0x70,0x78,0x70,0x78,0x70 | $6af9
	dc.b	0x78,0x58 | $6b01
l_6b03:
	lea	referee_x_pos_C700(pc),a2          	| [$6b03: ld   ix,referee_x_pos_C700]
	move.w	#0x0004,d3                      	| [$6b07: ld   de,$0004] 4
	move.b	#0x05,d1                        	| [$6b0a: ld   b,$05]
l_6b0c:
	move.b	(0x00,a2),d0                    	| [$6b0c: ld   a,(ix+$00)]
	add.b	d2,d0                            	| [$6b0f: add  a,c]
	move.b	d0,(0x00,a2)                    	| [$6b10: ld   (ix+$00),a]
	add.w	d3,a2                            	| [$6b13: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_6b0c                             	| [$6b15: djnz $6B0C]
	move.b	unknown_C70A,d0                 	| [$6b17: ld   a,(unknown_C70A)]
	eor.b	#0x80,d0                         	| [$6b1a: xor  $80]
	move.b	d0,unknown_C70A                 	| [$6b1c: ld   (unknown_C70A),a]
	rts                                    	| [$6b1f: ret]
l_6b20:
	lea	task_struct_C1E0,a3                	| [$6b20: ld   iy,task_struct_C1E0]
	move.b	referee_x_pos_C700,d0           	| [$6b24: ld   a,(referee_x_pos_C700)]
	cmp.b	(0x0c,a3),d0                     	| [$6b27: cp   (iy+$0c)] min referee x
	jcc	l_6b33                             	| [$6b2a: jp   nc,$6B33]
	st.b	d0                                	| [$6b2d: ld   a,$FF]
	move.b	d0,referee_walk_direction_C1E9  	| [$6b2f: ld   (referee_walk_direction_C1E9),a]
	rts                                    	| [$6b32: ret]
l_6b33:
	cmp.b	(0x0d,a3),d0                     	| [$6b33: cp   (iy+$0d)] max referee x for this stage
	bcc.b	0f
	rts                                    	| [$6b36: ret  c]
0:
	clr.b	d0                               	| [$6b37: ld   a,$00]
	move.b	d0,referee_walk_direction_C1E9  	| [$6b39: ld   (referee_walk_direction_C1E9),a]
	rts                                    	| [$6b3c: ret]

l_6b3d:
	move.b	#0x02,d5
	move.b	#0x06,d6                      	| [$6b3d: ld   hl,$0206] immediate
	lea	game_mem+0x6BC4,a1                  	| [$6b40: ld   de,table_6BC4]
	move.b	player_1_points_C91A,d0         	| [$6b43: ld   a,(player_1_points_C91A)]
	cmp.b	#0x00,d0                         	| [$6b46: cp   $00]
	jeq	l_6b5c                             	| [$6b48: jp   z,$6B5C]
	move.b	#0x02,d5
	move.b	#0x07,d6                     	| [$6b4b: ld   hl,$0207] immediate
	lea	game_mem+0x6BC7,a1                  	| [$6b4e: ld   de,table_6BC7]
	cmp.b	#0x01,d0                         	| [$6b51: cp   $01]
	jeq	l_6b5c                             	| [$6b53: jp   z,$6B5C]
	move.b	#0x02,d5
	move.b	#0x06,d6                      	| [$6b56: ld   hl,$0206] immediate
	lea	game_mem+0x6BCA,a1                  	| [$6b59: ld   de,table_6BCA]
l_6b5c:
	jbsr	l_6bb1                            	| [$6b5c: call $6BB1]
	move.b	#0x03,d5
	move.b	#0x07,d6                      	| [$6b5f: ld   hl,$0307] immediate
	lea	game_mem+0x6BC4,a1                  	| [$6b62: ld   de,table_6BC4]
	move.b	unknown_C91B,d0                 	| [$6b65: ld   a,(unknown_C91B)]
	                         	| [$6b68: cp   $00]
	jeq	l_6b73                             	| [$6b6a: jp   z,$6B73]
	move.b	#0x03,d5
	move.b	#0x07,d6                      	| [$6b6d: ld   hl,$0307] immediate
	lea	game_mem+0x6BC7,a1                  	| [$6b70: ld   de,table_6BC7]
l_6b73:
	jbsr	l_6bb1                            	| [$6b73: call $6BB1]
	rts                                    	| [$6b76: ret]
l_6b77:
	move.b	#0x02,d5
	move.b	#0x0B,d6                     	| [$6b77: ld   hl,$020B] immediate
	lea	game_mem+0x6BC4,a1                  	| [$6b7a: ld   de,table_6BC4]
	move.b	player_2_points_C91C,d0         	| [$6b7d: ld   a,(player_2_points_C91C)]
	cmp.b	#0x00,d0                         	| [$6b80: cp   $00]
	jeq	l_6b96                             	| [$6b82: jp   z,$6B96]
	move.b	#0x02,d5
	move.b	#0x0B,d6                      	| [$6b85: ld   hl,$020B] immediate
	lea	game_mem+0x6BC7,a1                  	| [$6b88: ld   de,table_6BC7]
	cmp.b	#0x01,d0                         	| [$6b8b: cp   $01]
	jeq	l_6b96                             	| [$6b8d: jp   z,$6B96]
	move.b	#0x02,d5
	move.b	#0x0B,d6                     	| [$6b90: ld   hl,$020B] immediate
	lea	game_mem+0x6BCA,a1                  	| [$6b93: ld   de,table_6BCA]
l_6b96:
	jbsr	l_6bb1                            	| [$6b96: call $6BB1]
	move.b	#0x03,d5
	move.b	#0x0B,d6                      	| [$6b99: ld   hl,$030B] immediate
	lea	game_mem+0x6BC4,a1                  	| [$6b9c: ld   de,table_6BC4]
	move.b	unknown_C91D,d0                 	| [$6b9f: ld   a,(unknown_C91D)]
												| [$6ba2: cp   $00]
	jeq	l_6bad                             	| [$6ba4: jp   z,$6BAD]
	move.b	#0x03,d5
	move.b	#0x0B,d6                      	| [$6ba7: ld   hl,$030B] immediate
	lea	game_mem+0x6BC7,a1                  	| [$6baa: ld   de,table_6BC7]
l_6bad:
	jbsr	l_6bb1                            	| [$6bad: call $6BB1]
	rts                                    	| [$6bb0: ret]
* < D5/D6
* < A1: source (turned to A0)
l_6bb1:
	move.b	d6,temp_numeric_buffer_CF00     	| [$6bb1: ld   (temp_numeric_buffer_CF00),hl]
	move.b	d5,temp_numeric_buffer_CF00+1     	| [$6bb1: ld   (temp_numeric_buffer_CF00),hl]
	exg	a1,a0                              	| [$6bb4: ex   de,hl]
	lea	unknown_CF02,a1                	| [$6bb5: ld   de,unknown_CF02]
	move.w	#0x0006,d1                      	| [$6bb8: ld   bc,$0006] 6
	jbsr	ldir                              	| [$6bbb: ldir]
	lea	temp_numeric_buffer_CF00,a0    	| [$6bbd: ld   hl,temp_numeric_buffer_CF00]
	jbsr	display_multicolor_text_B03C      	| [$6bc0: call display_multicolor_text_B03C]
	rts                                    	| [$6bc3: ret]

l_6bcf:
	move.b	#0x03,d1                        	| [$6bcf: ld   b,$03]
l_6bd1:
	movem.w	d1/d2,-(sp)                    	| [$6bd1: push bc]
	jbsr	l_6bee                            	| [$6bd2: call $6BEE]
	move.b	#0x0F,d0                        	| [$6bd5: ld   a,$0F]
	jbsr	suspend_this_task_B05A            	| [$6bd7: call suspend_this_task_B05A]
	tst.b	d0                               	| [$6bda: and  a]
	jeq	0f
	jbsr	display_error_text_B075           	| [$6bdb: call nz,display_error_text_B075]
0:
	jbsr	clear_text_6C2C                   	| [$6bde: call clear_text_6C2C]
	move.b	#0x0F,d0                        	| [$6be1: ld   a,$0F]
	jbsr	suspend_this_task_B05A            	| [$6be3: call suspend_this_task_B05A]
	tst.b	d0                               	| [$6be6: and  a]
	jeq	0f
	jbsr	display_error_text_B075           	| [$6be7: call nz,display_error_text_B075]
0:
	movem.w	(sp)+,d1/d2                    	| [$6bea: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_6bd1                             	| [$6beb: djnz $6BD1]
	rts                                    	| [$6bed: ret]
l_6bee:
	lea	game_mem+0x6C59,a0                  	| [$6bee: ld   hl,table_6C59]
	move.b	#0x90,d3                        	| [$6bf1: ld   d,$90]
	jbsr	display_text_B039                 	| [$6bf3: call display_text_B039]
	move.b	#0x06,temp_numeric_buffer_CF00+1                      	| [$6bf6: ld   hl,$0607]
	move.b	#0x07,temp_numeric_buffer_CF00     	| [$6bf9: ld   (temp_numeric_buffer_CF00),hl]
	move.b	unknown_C148,d0                 	| [$6bfc: ld   a,(unknown_C148)]
	move.b	d0,d6                           	| [$6bff: ld   l,a]
	move.b	#0x98,d5                        	| [$6c00: ld   h,$98]
	move.b	d6,unknown_CF02                 	| [$6c02: ld   (unknown_CF02),hl]
	move.b	d5,unknown_CF02+1                 	| [$6c02: ld   (unknown_CF02),hl]
	move.w	#0x98,address_of_current_player_move_byte_CF04+1                  	| [$6c05: ld   hl,table_983c]
	move.w	#0x3C,address_of_current_player_move_byte_CF04                  	| [$6c05: ld   hl,table_983c]
								| [$6c08: ld   (address_of_current_player_move_byte_CF04),hl]
	move.b	#0x98,unknown_pointer_CF06+1                  	| [$6c0b: ld   hl,table_9826]
	move.b	#0x26,unknown_pointer_CF06                  	| [$6c0b: ld   hl,table_9826]
	                 	| [$6c0e: ld   (unknown_pointer_CF06),hl]
	lea	game_mem+0x983c,a0                  	| [$6c11: ld   hl,table_983c]
	move.b	#0x98,unknown_CF08+1                 	| [$6c14: ld   (unknown_CF08),hl]
	move.b	#0x3C,unknown_CF08                 	| [$6c14: ld   (unknown_CF08),hl]
	move.b	unknown_C147,d0                 	| [$6c17: ld   a,(unknown_C147)]
	move.b	d0,d6                           	| [$6c1a: ld   l,a]
	move.b	#0x90,d5                        	| [$6c1b: ld   h,$90]
	move.b	d6,unknown_CF0A                 	| [$6c1d: ld   (unknown_CF0A),hl]
	move.b	d5,unknown_CF0A+1                 	| [$6c1d: ld   (unknown_CF0A),hl]
	st.b	d0                                	| [$6c20: ld   a,$FF]
	move.b	d0,unknown_CF0C                 	| [$6c22: ld   (unknown_CF0C),a]
	lea	temp_numeric_buffer_CF00,a0    	| [$6c25: ld   hl,temp_numeric_buffer_CF00]
	jbsr	display_multicolor_text_B03C      	| [$6c28: call display_multicolor_text_B03C]
	rts                                    	| [$6c2b: ret]
* empty text to erase previous values
clear_text_6C2C:
	lea	game_mem+0x6C35,a0                  	| [$6c2c: ld   hl,table_6C35]
	move.b	#0x90,d3                        	| [$6c2f: ld   d,$90]
	jbsr	display_text_B039                 	| [$6c31: call display_text_B039]
	rts                                    	| [$6c34: ret]

l_6c79:
	move.b	#0x02,d1
	move.b	#0x0B,d2                      	| [$6c79: ld   bc,$020B]
	lea	task_struct_C1E0,a3                	| [$6c7c: ld   iy,task_struct_C1E0]
	move.b	(0x0a,a3),d0                    	| [$6c80: ld   a,(iy+$0a)]
	add.b	#0x10,d0                         	| [$6c83: add  a,$10]
	move.b	d0,d3                           	| [$6c85: ld   d,a]
	move.b	(0x0b,a3),d0                    	| [$6c86: ld   a,(iy+$0b)]
	sub.b	#0x18,d0                         	| [$6c89: sub  $18]
	move.b	d0,d4                           	| [$6c8b: ld   e,a]
	move.b	#0x05,d5                        	| [$6c8c: ld   h,$05]
	jbsr	l_7a6a                            	| [$6c8e: call $7A6A]
	move.b	#0x1,d1
	move.b	#0xC5,d2                      	| [$6c91: ld   bc,$01C5]
	move.b	(0x0a,a3),d0                    	| [$6c94: ld   a,(iy+$0a)]
	add.b	#0x10,d0                         	| [$6c97: add  a,$10]
	move.b	d0,d3                           	| [$6c99: ld   d,a]
	move.b	(0x0b,a3),d0                    	| [$6c9a: ld   a,(iy+$0b)]
	sub.b	#0x08,d0                         	| [$6c9d: sub  $08]
	move.b	d0,d4                           	| [$6c9f: ld   e,a]
	lea	unknown_C7BC,a2                	| [$6ca0: ld   ix,unknown_C7BC]
	move.b	#0x05,d5                        	| [$6ca4: ld   h,$05]
	jbsr	l_7a6e                            	| [$6ca6: call $7A6E]
	jbsr	or_50_to_C7BE_7A58                	| [$6ca9: call or_50_to_C7BE_7A58]
	move.b	#0x45,d0                        	| [$6cac: ld   a,$45]
	move.b	d0,unknown_C7BE                 	| [$6cae: ld   (unknown_C7BE),a]
	rts                                    	| [$6cb1: ret]
l_6cb2:
	move.b	#0x02,d1
	move.b	#0x0D,d2                      	| [$6cb2: ld   bc,$020D]
	lea	task_struct_C1E0,a3                	| [$6cb5: ld   iy,task_struct_C1E0]
	move.b	(0x0a,a3),d0                    	| [$6cb9: ld   a,(iy+$0a)]
	sub.b	#0x20,d0                         	| [$6cbc: sub  $20]
	move.b	d0,d3                           	| [$6cbe: ld   d,a]
	move.b	(0x0b,a3),d0                    	| [$6cbf: ld   a,(iy+$0b)]
	sub.b	#0x18,d0                         	| [$6cc2: sub  $18]
	move.b	d0,d4                           	| [$6cc4: ld   e,a]
	move.b	#0x05,d5                        	| [$6cc5: ld   h,$05]
	jbsr	l_7a6a                            	| [$6cc7: call $7A6A]
	move.b	#0x01,d1
	move.b	#0x1C,d2                      	| [$6cca: ld   bc,$011C]
	move.b	(0x0a,a3),d0                    	| [$6ccd: ld   a,(iy+$0a)]
	sub.b	#0x10,d0                         	| [$6cd0: sub  $10]
	move.b	d0,d3                           	| [$6cd2: ld   d,a]
	move.b	(0x0b,a3),d0                    	| [$6cd3: ld   a,(iy+$0b)]
	sub.b	#0x08,d0                         	| [$6cd6: sub  $08]
	move.b	d0,d4                           	| [$6cd8: ld   e,a]
	lea	unknown_C7BC,a2                	| [$6cd9: ld   ix,unknown_C7BC]
	move.b	#0x05,d5                        	| [$6cdd: ld   h,$05]
	jbsr	l_7a6e                            	| [$6cdf: call $7A6E]
	jbsr	or_50_to_C7BE_7A58                	| [$6ce2: call or_50_to_C7BE_7A58]
	rts                                    	| [$6ce5: ret]

display_scoring_technique_6CE6:
	move.w	d3,-(sp)
	bclr.b	#7,d5                           	| [$6ce6: res  7,h]
	lea	game_mem+0x6D1E,a2                  	| [$6ce8: ld   ix,table_6D1E]
	lea	game_mem+0x6D3E,a3                  	| [$6cec: ld   iy,table_6D3E]
l_6cf0:
	move.b	(0x01,a2),d3                    	| [$6cf3: ld   d,(ix+$01)]
	lsl.w	#8,d3
	move.b	(0x00,a2),d3                    	| [$6cf0: ld   e,(ix+$00)]
	lsl.w	#8,d5
	move.b	d6,d5
	cmp.w	d3,d5                              	| [$6cf6: ex   de,hl + sbc  hl,de]
					
	jeq	l_6d14                             	| [$6cfa: jp   z,$6D14]
											| [$6cfd: ex   de,hl]
	addq.w	#2,a2                           	| [$6cfe: inc  ix] * 2
	addq.w	#2,a3                           	| [$6d02: inc  iy] * 2
	move.b	(0x00,a2),d0                    	| [$6d06: ld   a,(ix+$00)]
	and.b	(0x01,a2),d0                     	| [$6d09: and  (ix+$01)]
	cmp.b	#0xFF,d0                         	| [$6d0c: cp   $FF]
	jne	l_6cf0                             	| [$6d0e: jp   nz,$6CF0]
	jbsr	display_error_text_B075           	| [$6d11: call display_error_text_B075]
l_6d14:
	bsr		load_a0_from_a3_structure_00_address		                    	| [$6d14: ld   l,(iy+$00)]
			                    	| [$6d17: ld   h,(iy+$01)]
	jbsr	display_multicolor_text_B03C      	| [$6d1a: call display_multicolor_text_B03C]
	move.w	(sp)+,d3
	rts                                    	| [$6d1d: ret]


task_6d5e:
	move.b	background_and_state_bits_C911,d0	| [$6d5e: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$6d61: res  7,a]
	cmp.b	#0x53,d0                         	| [$6d63: cp   $53]
	jne	l_6d6f                             	| [$6d65: jp   nz,$6D6F]
	move.b	#0x78,d5                        	| [$6d68: ld   h,$78]
	move.b	#0x48,d6                        	| [$6d6a: ld   l,$48]
	jra	l_6d8b                             	| [$6d6c: jp   $6D8B]
l_6d6f:
	cmp.b	#0x10,d0                         	| [$6d6f: cp   $10]
	jcc	0f
	jbsr	task_yield_B051                   	| [$6d71: call c,task_yield_B051]
0:
	cmp.b	#0x20,d0                         	| [$6d74: cp   $20]
	jcs	0f
	jbsr	task_yield_B051                   	| [$6d76: call nc,task_yield_B051]
0:
	and.b	#0x0F,d0                         	| [$6d79: and  $0F]
	add.b	d0,d0                            	| [$6d7b: add  a,a]
	clr.w	d1                               	| [$6d7d: ld   b,$00]
	move.b	d0,d1                           	| [$6d7c: ld   c,a]
	lea	game_mem+0x6AE1,a2	| [$6d7f: ld   ix,referee_start_position_table_6AE1]
	add.w	d1,a2                            	| [$6d83: add  ix,bc]
	move.b	(0x00,a2),d5                    	| [$6d85: ld   h,(ix+$00)]
	move.b	(0x01,a2),d6                    	| [$6d88: ld   l,(ix+$01)]
l_6d8b:
	lea	referee_x_pos_C700,a3          	| [$6d8b: ld   iy,referee_x_pos_C700]
	move.b	d5,(0x00,a3)                    	| [$6d8f: ld   (iy+$00),h]
	move.b	d5,(0x04,a3)                    	| [$6d92: ld   (iy+$04),h]
	move.b	d5,(0x08,a3)                    	| [$6d95: ld   (iy+$08),h]
	move.b	d5,d0                           	| [$6d98: ld   a,h]
	add.b	#0x10,d0                         	| [$6d99: add  a,$10]
	move.b	d0,(0x0c,a3)                    	| [$6d9b: ld   (iy+$0c),a]
	move.b	d6,(0x03,a3)                    	| [$6d9e: ld   (iy+$03),l]
	move.b	d6,d0                           	| [$6da1: ld   a,l]
	add.b	#0x10,d0                         	| [$6da2: add  a,$10]
	move.b	d0,(0x07,a3)                    	| [$6da4: ld   (iy+$07),a]
	add.b	#0x10,d0                         	| [$6da7: add  a,$10]
	move.b	d0,(0x0b,a3)                    	| [$6da9: ld   (iy+$0b),a]
	move.b	d6,d0                           	| [$6dac: ld   a,l]
	addq.b	#0x04,d0                        	| [$6dad: add  a,$04]
	move.b	d0,(0x0f,a3)                    	| [$6daf: ld   (iy+$0f),a]
	move.b	#0x44,d0                        	| [$6db2: ld   a,$44]
	move.b	#0xE7,(0x01,a3)                 	| [$6db4: ld   (iy+$01),$E7]
	move.b	#0xE8,(0x05,a3)                 	| [$6db8: ld   (iy+$05),$E8]
	move.b	#0xE9,(0x09,a3)                 	| [$6dbc: ld   (iy+$09),$E9]
	move.b	d0,(0x02,a3)                    	| [$6dc0: ld   (iy+$02),a]
	move.b	d0,(0x06,a3)                    	| [$6dc3: ld   (iy+$06),a]
	move.b	d0,(0x0a,a3)                    	| [$6dc6: ld   (iy+$0a),a]
	move.b	#0x45,(0x0e,a3)                 	| [$6dc9: ld   (iy+$0e),$45]
	clr.b	d0                               	| [$6dcd: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$6dcf: call suspend_this_task_B05A]
	cmp.b	#0x20,d0                         	| [$6dd2: cp   $20]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$6dd4: call nz,display_error_text_B075]
0:
	lea	referee_x_pos_C700,a3          	| [$6dd7: ld   iy,referee_x_pos_C700]
	move.b	#0xEC,(0x0d,a3)                 	| [$6ddb: ld   (iy+$0d),$EC]
	move.b	#0xEB,(0x05,a3)                 	| [$6ddf: ld   (iy+$05),$EB]
	move.w	#0x201,d1                      	| [$6de3: ld   bc,$0201]
	move.b	(0x00,a3),d0                    	| [$6de6: ld   a,(iy+$00)]
	add.b	#0x10,d0                         	| [$6de9: add  a,$10]
	move.b	d0,d3                           	| [$6deb: ld   d,a]
	move.b	(0x03,a3),d0                    	| [$6dec: ld   a,(iy+$03)]
	sub.b	#0x18,d0                         	| [$6def: sub  $18]
	move.b	d0,d4                           	| [$6df1: ld   e,a]
	move.b	#0x01,d5                        	| [$6df2: ld   h,$01]
	jbsr	l_7a6a                            	| [$6df4: call $7A6A]
	move.w	#0x011A,d1                      	| [$6df7: ld   bc,$011A]
	move.b	(0x00,a3),d0                    	| [$6dfa: ld   a,(iy+$00)]
	add.b	#0x30,d0                         	| [$6dfd: add  a,$30]
	move.b	d0,d3                           	| [$6dff: ld   d,a]
	move.b	(0x03,a3),d0                    	| [$6e00: ld   a,(iy+$03)]
	sub.b	#0x18,d0                         	| [$6e03: sub  $18]
	move.b	d0,d4                           	| [$6e05: ld   e,a]
	move.b	#0x01,d5                        	| [$6e06: ld   h,$01]
	lea	unknown_C7C8,a2                	| [$6e08: ld   ix,unknown_C7C8]
	jbsr	l_7a6e                            	| [$6e0c: call $7A6E]
	move.w	#0x011B,d1                      	| [$6e0f: ld   bc,$011B]
	move.b	(0x00,a3),d0                    	| [$6e12: ld   a,(iy+$00)]
	add.b	#0x10,d0                         	| [$6e15: add  a,$10]
	move.b	d0,d3                           	| [$6e17: ld   d,a]
	move.b	(0x03,a3),d0                    	| [$6e18: ld   a,(iy+$03)]
	sub.b	#0x08,d0                         	| [$6e1b: sub  $08]
	move.b	d0,d4                           	| [$6e1d: ld   e,a]
	lea	unknown_C7BC,a2                	| [$6e1e: ld   ix,unknown_C7BC]
	move.b	#0x01,d5                        	| [$6e22: ld   h,$01]
	jbsr	l_7a6e                            	| [$6e24: call $7A6E]
	jbsr	or_50_to_C7BE_7A58                	| [$6e27: call or_50_to_C7BE_7A58]
	lea	unknown_C7BE,a0                	| [$6e2a: ld   hl,unknown_C7BE]
	bset.b	#7,(a0)                         	| [$6e2d: set  7,(hl)]
	move.b	#0x3C,d0                        	| [$6e2f: ld   a,$3C]
	jbsr	suspend_this_task_B05A            	| [$6e31: call suspend_this_task_B05A]
	tst.b	d0                               	| [$6e34: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$6e35: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                   	| [$6e38: call task_yield_B051]


task_6f89:
	move.b	background_and_state_bits_C911,d0	| [$6f89: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$6f8c: res  7,a]
	cmp.b	#0x20,d0                         	| [$6f8e: cp   $20]
	jcc	0f
	jbsr	display_error_text_B075           	| [$6f90: call c,display_error_text_B075]
0:
	cmp.b	#0x50,d0                         	| [$6f93: cp   $50]
	jcs	0f
	jbsr	display_error_text_B075           	| [$6f95: call nc,display_error_text_B075]
0:
	cmp.b	#0x40,d0                         	| [$6f98: cp   $40]
	jcc	l_73ab                             	| [$6f9a: jp   nc,$73AB]
	cmp.b	#0x30,d0                         	| [$6f9d: cp   $30]
	jcc	l_71b5                             	| [$6f9f: jp   nc,$71B5]
	lea	computer_skill_C910,a2         	| [$6fa2: ld   ix,computer_skill_C910]
	bsr		load_a0_from_a2_structure_02_address                    	| [$6fa6: ld   l,(ix+$02)]
	                    	| [$6fa9: ld   h,(ix+$03)]
	addq.w	#2,a0                           	| [$6fac: inc  hl] * 2
	move.b	(a0),d0                         	| [$6fae: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$6faf: cp   $FF]
	jne	l_6fbc                             	| [$6fb1: jp   nz,$6FBC]
	lea	game_mem+0x7753,a0                  	| [$6fb4: ld   hl,table_7753]
	move.b	#0x98,d3                        	| [$6fb7: ld   d,$98]
	jbsr	display_text_B039                 	| [$6fb9: call display_text_B039]
l_6fbc:
	move.b	background_and_state_bits_C911,d0	| [$6fbc: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$6fbf: res  7,a]
	sub.b	#0x20,d0                         	| [$6fc1: sub  $20]
	clr.w	d1                               	| [$6fc6: ld   b,$00]
	add.b	d0,d0                            	| [$6fc3: add  a,a]
	add.b	d0,d0                            	| [$6fc4: add  a,a]
	move.b	d0,d1                           	| [$6fc5: ld   c,a]
	lea	game_mem+0x74bb,a2                  	| [$6fc8: ld   ix,table_74bb]
	add.w	d1,a2                            	| [$6fcc: add  ix,bc]
	move.b	(0x00,a2),d5                    	| [$6fce: ld   h,(ix+$00)]
	move.b	(0x01,a2),d6                    	| [$6fd1: ld   l,(ix+$01)]
	move.b	(0x02,a2),d2                    	| [$6fd4: ld   c,(ix+$02)]
	move.b	(0x03,a2),d1                    	| [$6fd7: ld   b,(ix+$03)]
	lea	unknown_C77C,a3                	| [$6fda: ld   iy,unknown_C77C]
	move.b	d5,(0x00,a3)                    	| [$6fde: ld   (iy+$00),h]
	move.b	d6,(0x03,a3)                    	| [$6fe1: ld   (iy+$03),l]
	move.b	d5,(0x04,a3)                    	| [$6fe4: ld   (iy+$04),h]
	move.b	d6,d0                           	| [$6fe7: ld   a,l]
	add.b	#0x10,d0                         	| [$6fe8: add  a,$10]
	move.b	d0,(0x07,a3)                    	| [$6fea: ld   (iy+$07),a]
	move.b	d5,d0                           	| [$6fed: ld   a,h]
	sub.b	#0x28,d0                         	| [$6fee: sub  $28]
	move.b	d0,(0x08,a3)                    	| [$6ff0: ld   (iy+$08),a]
	move.b	#0x10,d3                        	| [$6ff3: ld   d,$10]
	add.b	d3,d0                            	| [$6ff5: add  a,d]
	move.b	d0,(0x0c,a3)                    	| [$6ff6: ld   (iy+$0c),a]
	add.b	d3,d0                            	| [$6ff9: add  a,d]
	move.b	d0,(0x10,a3)                    	| [$6ffa: ld   (iy+$10),a]
	add.b	d3,d0                            	| [$6ffd: add  a,d]
	move.b	d0,(0x14,a3)                    	| [$6ffe: ld   (iy+$14),a]
	add.b	d3,d0                            	| [$7001: add  a,d]
	move.b	d0,(0x18,a3)                    	| [$7002: ld   (iy+$18),a]
	add.b	d3,d0                            	| [$7005: add  a,d]
	move.b	d0,(0x1c,a3)                    	| [$7006: ld   (iy+$1c),a]
	move.b	d6,d0                           	| [$7009: ld   a,l]
	sub.b	#0x18,d0                         	| [$700a: sub  $18]
	move.b	d0,(0x0b,a3)                    	| [$700c: ld   (iy+$0b),a]
	move.b	d0,(0x0f,a3)                    	| [$700f: ld   (iy+$0f),a]
	move.b	d0,(0x13,a3)                    	| [$7012: ld   (iy+$13),a]
	move.b	d0,(0x17,a3)                    	| [$7015: ld   (iy+$17),a]
	move.b	d0,(0x1b,a3)                    	| [$7018: ld   (iy+$1b),a]
	move.b	d0,(0x1f,a3)                    	| [$701b: ld   (iy+$1f),a]
	movem.w	d1/d2,-(sp)                    	| [$701e: push bc]
	move.b	d2,(0x01,a3)                    	| [$701f: ld   (iy+$01),c]
	move.b	d1,(0x02,a3)                    	| [$7022: ld   (iy+$02),b]
	addq.b	#1,d2                           	| [$7025: inc  c]
	move.b	d2,(0x05,a3)                    	| [$7026: ld   (iy+$05),c]
	move.b	d1,(0x06,a3)                    	| [$7029: ld   (iy+$06),b]
	move.b	#0x47,d0                        	| [$702c: ld   a,$47]
	move.b	#0xC7,d1                        	| [$702e: ld   b,$C7]
	move.b	#0xD6,d2                        	| [$7030: ld   c,$D6]
	move.b	d2,(0x09,a3)                    	| [$7032: ld   (iy+$09),c]
	move.b	d0,(0x0a,a3)                    	| [$7035: ld   (iy+$0a),a]
	move.b	d2,(0x0d,a3)                    	| [$7038: ld   (iy+$0d),c]
	move.b	d0,(0x0e,a3)                    	| [$703b: ld   (iy+$0e),a]
	move.b	#0xD7,(0x11,a3)                 	| [$703e: ld   (iy+$11),$D7]
	move.b	d0,(0x12,a3)                    	| [$7042: ld   (iy+$12),a]
	move.b	#0xD8,(0x15,a3)                 	| [$7045: ld   (iy+$15),$D8]
	move.b	d0,(0x16,a3)                    	| [$7049: ld   (iy+$16),a]
	move.b	d2,(0x19,a3)                    	| [$704c: ld   (iy+$19),c]
	move.b	d1,(0x1a,a3)                    	| [$704f: ld   (iy+$1a),b]
	move.b	d2,(0x1d,a3)                    	| [$7052: ld   (iy+$1d),c]
	move.b	d1,(0x1e,a3)                    	| [$7055: ld   (iy+$1e),b]
	movem.w	(sp)+,d1/d2                    	| [$7058: pop  bc]
	lea	task_struct_C1C0,a2                	| [$7059: ld   ix,task_struct_C1C0]
	move.b	d2,(0x07,a2)                    	| [$705d: ld   (ix+$07),c]
	move.b	d2,(0x0b,a2)                    	| [$7060: ld   (ix+$0b),c]
	move.b	#0x02,d0                        	| [$7063: ld   a,$02]
	add.b	d2,d0                            	| [$7065: add  a,c]
	move.b	d0,(0x09,a2)                    	| [$7066: ld   (ix+$09),a]
	move.b	d0,(0x0d,a2)                    	| [$7069: ld   (ix+$0d),a]
	move.b	d1,(0x08,a2)                    	| [$706c: ld   (ix+$08),b]
	move.b	d1,(0x0a,a2)                    	| [$706f: ld   (ix+$0a),b]
	move.b	d1,(0x0c,a2)                    	| [$7072: ld   (ix+$0c),b]
	bset.b	#7,d1                           	| [$7075: set  7,b]
	move.b	d1,(0x0e,a2)                    	| [$7077: ld   (ix+$0e),b]
l_707a:
	move.b	(0x07,a2),d6                    	| [$707a: ld   l,(ix+$07)]
	move.b	(0x08,a2),d5                    	| [$707d: ld   h,(ix+$08)]
	move.b	d6,(0x01,a3)                    	| [$7080: ld   (iy+$01),l]
	move.b	d5,(0x02,a3)                    	| [$7083: ld   (iy+$02),h]
	move.b	#0xD8,(0x11,a3)                 	| [$7086: ld   (iy+$11),$D8]
	move.b	#0xC7,(0x12,a3)                 	| [$708a: ld   (iy+$12),$C7]
	move.b	#0xD7,(0x15,a3)                 	| [$708e: ld   (iy+$15),$D7]
	move.b	#0xC7,(0x16,a3)                 	| [$7092: ld   (iy+$16),$C7]

	move.l	a2,-(sp)                        	| [$7096: push ix]

	move.l	a3,-(sp)                        	| [$7098: push iy]
	move.b	#0x14,d0                        	| [$709a: ld   a,$14]
	jbsr	suspend_this_task_B05A            	| [$709c: call suspend_this_task_B05A]
	tst.b	d0                               	| [$709f: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$70a0: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$70a3: pop  iy]
	move.l	(sp)+,a2                        	| [$70a5: pop  ix]
	move.b	#0xD7,(0x11,a3)                 	| [$70a7: ld   (iy+$11),$D7]
	move.b	#0x47,(0x12,a3)                 	| [$70ab: ld   (iy+$12),$47]
	move.b	#0xD8,(0x15,a3)                 	| [$70af: ld   (iy+$15),$D8]
	move.b	#0x47,(0x16,a3)                 	| [$70b3: ld   (iy+$16),$47]

	move.l	a2,-(sp)                        	| [$70b7: push ix]

	move.l	a3,-(sp)                        	| [$70b9: push iy]
	move.b	#0x14,d0                        	| [$70bb: ld   a,$14]
	jbsr	suspend_this_task_B05A            	| [$70bd: call suspend_this_task_B05A]
	tst.b	d0                               	| [$70c0: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$70c1: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$70c4: pop  iy]
	move.l	(sp)+,a2                        	| [$70c6: pop  ix]
	move.b	(0x09,a2),d6                    	| [$70c8: ld   l,(ix+$09)]
	move.b	(0x0a,a2),d5                    	| [$70cb: ld   h,(ix+$0a)]
	move.b	d6,(0x01,a3)                    	| [$70ce: ld   (iy+$01),l]
	move.b	d5,(0x02,a3)                    	| [$70d1: ld   (iy+$02),h]
	move.b	#0xD8,(0x11,a3)                 	| [$70d4: ld   (iy+$11),$D8]
	move.b	#0xC7,(0x12,a3)                 	| [$70d8: ld   (iy+$12),$C7]
	move.b	#0xD7,(0x15,a3)                 	| [$70dc: ld   (iy+$15),$D7]
	move.b	#0xC7,(0x16,a3)                 	| [$70e0: ld   (iy+$16),$C7]

	move.l	a2,-(sp)                        	| [$70e4: push ix]

	move.l	a3,-(sp)                        	| [$70e6: push iy]
	move.b	#0x14,d0                        	| [$70e8: ld   a,$14]
	jbsr	suspend_this_task_B05A            	| [$70ea: call suspend_this_task_B05A]
	tst.b	d0                               	| [$70ed: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$70ee: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$70f1: pop  iy]
	move.l	(sp)+,a2                        	| [$70f3: pop  ix]
	move.b	#0xD7,(0x11,a3)                 	| [$70f5: ld   (iy+$11),$D7]
	move.b	#0x47,(0x12,a3)                 	| [$70f9: ld   (iy+$12),$47]
	move.b	#0xD8,(0x15,a3)                 	| [$70fd: ld   (iy+$15),$D8]
	move.b	#0x47,(0x16,a3)                 	| [$7101: ld   (iy+$16),$47]

	move.l	a2,-(sp)                        	| [$7105: push ix]

	move.l	a3,-(sp)                        	| [$7107: push iy]
	move.b	#0x14,d0                        	| [$7109: ld   a,$14]
	jbsr	suspend_this_task_B05A            	| [$710b: call suspend_this_task_B05A]
	tst.b	d0                               	| [$710e: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$710f: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$7112: pop  iy]
	move.l	(sp)+,a2                        	| [$7114: pop  ix]
	move.b	(0x0b,a2),d6                    	| [$7116: ld   l,(ix+$0b)]
	move.b	(0x0c,a2),d5                    	| [$7119: ld   h,(ix+$0c)]
	move.b	d6,(0x01,a3)                    	| [$711c: ld   (iy+$01),l]
	move.b	d5,(0x02,a3)                    	| [$711f: ld   (iy+$02),h]
	move.b	#0xD8,(0x11,a3)                 	| [$7122: ld   (iy+$11),$D8]
	move.b	#0xC7,(0x12,a3)                 	| [$7126: ld   (iy+$12),$C7]
	move.b	#0xD7,(0x15,a3)                 	| [$712a: ld   (iy+$15),$D7]
	move.b	#0xC7,(0x16,a3)                 	| [$712e: ld   (iy+$16),$C7]

	move.l	a2,-(sp)                        	| [$7132: push ix]

	move.l	a3,-(sp)                        	| [$7134: push iy]
	move.b	#0x14,d0                        	| [$7136: ld   a,$14]
	jbsr	suspend_this_task_B05A            	| [$7138: call suspend_this_task_B05A]
	tst.b	d0                               	| [$713b: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$713c: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$713f: pop  iy]
	move.l	(sp)+,a2                        	| [$7141: pop  ix]
	move.b	#0xD7,(0x11,a3)                 	| [$7143: ld   (iy+$11),$D7]
	move.b	#0x47,(0x12,a3)                 	| [$7147: ld   (iy+$12),$47]
	move.b	#0xD8,(0x15,a3)                 	| [$714b: ld   (iy+$15),$D8]
	move.b	#0x47,(0x16,a3)                 	| [$714f: ld   (iy+$16),$47]

	move.l	a2,-(sp)                        	| [$7153: push ix]

	move.l	a3,-(sp)                        	| [$7155: push iy]
	move.b	#0x14,d0                        	| [$7157: ld   a,$14]
	jbsr	suspend_this_task_B05A            	| [$7159: call suspend_this_task_B05A]
	tst.b	d0                               	| [$715c: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$715d: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$7160: pop  iy]
	move.l	(sp)+,a2                        	| [$7162: pop  ix]
	move.b	(0x0d,a2),d6                    	| [$7164: ld   l,(ix+$0d)]
	move.b	(0x0e,a2),d5                    	| [$7167: ld   h,(ix+$0e)]
	move.b	d6,(0x01,a3)                    	| [$716a: ld   (iy+$01),l]
	move.b	d5,(0x02,a3)                    	| [$716d: ld   (iy+$02),h]
	move.b	#0xD8,(0x11,a3)                 	| [$7170: ld   (iy+$11),$D8]
	move.b	#0xC7,(0x12,a3)                 	| [$7174: ld   (iy+$12),$C7]
	move.b	#0xD7,(0x15,a3)                 	| [$7178: ld   (iy+$15),$D7]
	move.b	#0xC7,(0x16,a3)                 	| [$717c: ld   (iy+$16),$C7]

	move.l	a2,-(sp)                        	| [$7180: push ix]

	move.l	a3,-(sp)                        	| [$7182: push iy]
	move.b	#0x14,d0                        	| [$7184: ld   a,$14]
	jbsr	suspend_this_task_B05A            	| [$7186: call suspend_this_task_B05A]
	tst.b	d0                               	| [$7189: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$718a: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$718d: pop  iy]
	move.l	(sp)+,a2                        	| [$718f: pop  ix]
	move.b	#0xD7,(0x11,a3)                 	| [$7191: ld   (iy+$11),$D7]
	move.b	#0x47,(0x12,a3)                 	| [$7195: ld   (iy+$12),$47]
	move.b	#0xD8,(0x15,a3)                 	| [$7199: ld   (iy+$15),$D8]
	move.b	#0x47,(0x16,a3)                 	| [$719d: ld   (iy+$16),$47]

	move.l	a2,-(sp)                        	| [$71a1: push ix]

	move.l	a3,-(sp)                        	| [$71a3: push iy]
	move.b	#0x14,d0                        	| [$71a5: ld   a,$14]
	jbsr	suspend_this_task_B05A            	| [$71a7: call suspend_this_task_B05A]
	tst.b	d0                               	| [$71aa: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$71ab: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$71ae: pop  iy]
	move.l	(sp)+,a2                        	| [$71b0: pop  ix]
	jra	l_707a                             	| [$71b2: jp   $707A]
l_71b5:
	move.b	unknown_C914,d0                 	| [$71b5: ld   a,(unknown_C914)]
	cmp.b	#0xFF,d0                         	| [$71b8: cp   $FF]
	jne	l_71c8                             	| [$71ba: jp   nz,$71C8]
	lea	game_mem+0x754b,a0                  	| [$71bd: ld   hl,table_754b]
	lea	unknown_C7E4,a1                	| [$71c0: ld   de,unknown_C7E4]
	move.w	#0x0010,d1                      	| [$71c3: ld   bc,$0010] 16
	jbsr	ldir                              	| [$71c6: ldir]
l_71c8:
	move.b	background_and_state_bits_C911,d0	| [$71c8: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$71cb: res  7,a]
	sub.b	#0x30,d0                         	| [$71cd: sub  $30]
	add.b	d0,d0                            	| [$71cf: add  a,a]
	add.b	d0,d0                            	| [$71d0: add  a,a]
	clr.w	d1                               	| [$71d2: ld   b,$00]
	move.b	d0,d1                           	| [$71d1: ld   c,a]
	lea	game_mem+0x74eb,a2                  	| [$71d4: ld   ix,table_74eb]
	add.w	d1,a2                            	| [$71d8: add  ix,bc]
	move.b	(0x00,a2),d5                    	| [$71da: ld   h,(ix+$00)]
	move.b	(0x01,a2),d6                    	| [$71dd: ld   l,(ix+$01)]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$71e0: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$71e3: bit  2,a]
	jne	l_71ec                             	| [$71e5: jp   nz,$71EC]
	move.b	#0x40,d0                        	| [$71e8: ld   a,$40]
	add.b	d5,d0                            	| [$71ea: add  a,h]
	move.b	d0,d5                           	| [$71eb: ld   h,a]
l_71ec:
	move.b	(0x02,a2),d2                    	| [$71ec: ld   c,(ix+$02)]
	move.b	(0x03,a2),d1                    	| [$71ef: ld   b,(ix+$03)]
	lea	unknown_C77C,a3                	| [$71f2: ld   iy,unknown_C77C]
	move.b	d5,(0x00,a3)                    	| [$71f6: ld   (iy+$00),h]
	move.b	d5,(0x04,a3)                    	| [$71f9: ld   (iy+$04),h]
	move.b	d6,(0x03,a3)                    	| [$71fc: ld   (iy+$03),l]
	move.b	#0x10,d0                        	| [$71ff: ld   a,$10]
	add.b	d6,d0                            	| [$7201: add  a,l]
	move.b	d0,(0x07,a3)                    	| [$7202: ld   (iy+$07),a]
	move.b	d2,(0x01,a3)                    	| [$7205: ld   (iy+$01),c]
	move.b	d1,(0x02,a3)                    	| [$7208: ld   (iy+$02),b]
	addq.b	#1,d2                           	| [$720b: inc  c]
	move.b	d2,(0x05,a3)                    	| [$720c: ld   (iy+$05),c]
	move.b	d1,(0x06,a3)                    	| [$720f: ld   (iy+$06),b]
	addq.b	#1,d2                           	| [$7212: inc  c]
	lea	task_struct_C1C0,a2                	| [$7213: ld   ix,task_struct_C1C0]
	move.b	d2,(0x09,a2)                    	| [$7217: ld   (ix+$09),c]

	movem.l	d5/d6,-(sp)                        	| [$721a: push hl]
	move.b	d5,d0                           	| [$721b: ld   a,h]
	sub.b	#0x20,d0                         	| [$721c: sub  $20]
	move.b	d0,d3                           	| [$721e: ld   d,a]
	move.b	d6,d0                           	| [$721f: ld   a,l]
	sub.b	#0x28,d0                         	| [$7220: sub  $28]
	move.b	d0,d4                           	| [$7222: ld   e,a]
	move.b	#0x05,d1
	move.b	#0xF4,d2                      	| [$7223: ld   bc,$05F4]
	move.b	#0x47,d5                        	| [$7226: ld   h,$47]
	jbsr	l_7a6a                            	| [$7228: call $7A6A]
	movem.l	(sp),d5/d6                        	| [$722b: pop  hl]

	                        	| [$722c: push hl]
	lea	unknown_C7BC,a3                	| [$722d: ld   iy,unknown_C7BC]
	move.b	#0x08,d0                        	| [$7231: ld   a,$08]
	add.b	d5,d0                            	| [$7233: add  a,h]
	move.b	d0,(0x00,a3)                    	| [$7234: ld   (iy+$00),a]
	move.b	d6,d0                           	| [$7237: ld   a,l]
	sub.b	#0x18,d0                         	| [$7238: sub  $18]
	move.b	d0,(0x03,a3)                    	| [$723a: ld   (iy+$03),a]
	move.b	#0x80,(0x01,a3)                 	| [$723d: ld   (iy+$01),$80]
	move.b	#0x47,(0x02,a3)                 	| [$7241: ld   (iy+$02),$47]
	move.m	(sp)+,d5/d6                        	| [$7245: pop  hl]
	move.b	d5,d0                           	| [$7246: ld   a,h]
	sub.b	#0x28,d0                         	| [$7247: sub  $28]
	move.b	d0,d1                           	| [$7249: ld   b,a]
	add.b	#0x10,d0                         	| [$724a: add  a,$10]
	move.b	d0,d2                           	| [$724c: ld   c,a]
	move.b	d6,d0                           	| [$724d: ld   a,l]
	sub.b	#0x20,d0                         	| [$724e: sub  $20]
	move.b	d0,d6                           	| [$7250: ld   l,a]
	lea	referee_x_pos_C700,a3          	| [$7251: ld   iy,referee_x_pos_C700]
	move.b	d1,(0x00,a3)                    	| [$7255: ld   (iy+$00),b]
	move.b	d1,(0x04,a3)                    	| [$7258: ld   (iy+$04),b]
	move.b	d2,(0x08,a3)                    	| [$725b: ld   (iy+$08),c]
	move.b	d1,(0x0c,a3)                    	| [$725e: ld   (iy+$0c),b]
	move.b	d2,(0x10,a3)                    	| [$7261: ld   (iy+$10),c]
	move.b	d1,(0x14,a3)                    	| [$7264: ld   (iy+$14),b]
	move.b	d2,(0x18,a3)                    	| [$7267: ld   (iy+$18),c]
	move.b	d1,(0x1c,a3)                    	| [$726a: ld   (iy+$1c),b]
	move.b	d2,(0x20,a3)                    	| [$726d: ld   (iy+$20),c]
	move.b	d6,(0x0b,a3)                    	| [$7270: ld   (iy+$0b),l]
	move.b	d6,(0x07,a3)                    	| [$7273: ld   (iy+$07),l]
	move.b	#0x10,d0                        	| [$7276: ld   a,$10]
	add.b	d6,d0                            	| [$7278: add  a,l]
	move.b	d0,(0x03,a3)                    	| [$7279: ld   (iy+$03),a]
	move.b	d0,(0x0f,a3)                    	| [$727c: ld   (iy+$0f),a]
	move.b	d0,(0x13,a3)                    	| [$727f: ld   (iy+$13),a]
	add.b	#0x10,d0                         	| [$7282: add  a,$10]
	move.b	d0,(0x17,a3)                    	| [$7284: ld   (iy+$17),a]
	move.b	d0,(0x1b,a3)                    	| [$7287: ld   (iy+$1b),a]
	add.b	#0x10,d0                         	| [$728a: add  a,$10]
	move.b	d0,(0x1f,a3)                    	| [$728c: ld   (iy+$1f),a]
	move.b	d0,(0x23,a3)                    	| [$728f: ld   (iy+$23),a]
	move.b	#0x81,d0                        	| [$7292: ld   a,$81]
	move.b	d0,(0x01,a3)                    	| [$7294: ld   (iy+$01),a]
	addq.b	#1,d0                           	| [$7297: inc  a]
	move.b	d0,(0x05,a3)                    	| [$7298: ld   (iy+$05),a]
	addq.b	#1,d0                           	| [$729b: inc  a]
	move.b	d0,(0x09,a3)                    	| [$729c: ld   (iy+$09),a]
	move.b	#0x01,d0                        	| [$729f: ld   a,$01]
	move.b	d0,(0x0d,a3)                    	| [$72a1: ld   (iy+$0d),a]
	addq.b	#1,d0                           	| [$72a4: inc  a]
	move.b	d0,(0x11,a3)                    	| [$72a5: ld   (iy+$11),a]
	addq.b	#1,d0                           	| [$72a8: inc  a]
	move.b	d0,(0x15,a3)                    	| [$72a9: ld   (iy+$15),a]
	addq.b	#1,d0                           	| [$72ac: inc  a]
	move.b	d0,(0x19,a3)                    	| [$72ad: ld   (iy+$19),a]
	addq.b	#1,d0                           	| [$72b0: inc  a]
	move.b	d0,(0x1d,a3)                    	| [$72b1: ld   (iy+$1d),a]
	addq.b	#1,d0                           	| [$72b4: inc  a]
	move.b	d0,(0x21,a3)                    	| [$72b5: ld   (iy+$21),a]
	move.b	#0x41,d0                        	| [$72b8: ld   a,$41]
	move.b	d0,(0x02,a3)                    	| [$72ba: ld   (iy+$02),a]
	move.b	d0,(0x06,a3)                    	| [$72bd: ld   (iy+$06),a]
	move.b	d0,(0x0a,a3)                    	| [$72c0: ld   (iy+$0a),a]
	move.b	#0x41,d1                        	| [$72c3: ld   b,$41]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$72c5: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$72c8: bit  2,a]
	jne	l_72cf                             	| [$72ca: jp   nz,$72CF]
	move.b	#0x42,d1                        	| [$72cd: ld   b,$42]
l_72cf:
	move.b	d1,(0x0e,a3)                    	| [$72cf: ld   (iy+$0e),b]
	move.b	d1,(0x12,a3)                    	| [$72d2: ld   (iy+$12),b]
	move.b	d1,(0x16,a3)                    	| [$72d5: ld   (iy+$16),b]
	move.b	d1,(0x1a,a3)                    	| [$72d8: ld   (iy+$1a),b]
	move.b	d1,(0x1e,a3)                    	| [$72db: ld   (iy+$1e),b]
	move.b	d1,(0x22,a3)                    	| [$72de: ld   (iy+$22),b]
	lea	unknown_C7D4,a3                	| [$72e1: ld   iy,unknown_C7D4]
	move.b	d5,d0                           	| [$72e5: ld   a,h]
	sub.b	#0x28,d0                         	| [$72e6: sub  $28]
	move.b	d0,(0x00,a3)                    	| [$72e8: ld   (iy+$00),a]
	move.b	d0,(0x08,a3)                    	| [$72eb: ld   (iy+$08),a]
	add.b	#0x10,d0                         	| [$72ee: add  a,$10]
	move.b	d0,(0x04,a3)                    	| [$72f0: ld   (iy+$04),a]
	move.b	d0,(0x0c,a3)                    	| [$72f3: ld   (iy+$0c),a]
	move.b	d6,d0                           	| [$72f6: ld   a,l]
	subq.b	#0x04,d0                        	| [$72f7: sub  $04]
	move.b	d0,(0x03,a3)                    	| [$72f9: ld   (iy+$03),a]
	move.b	d0,(0x07,a3)                    	| [$72fc: ld   (iy+$07),a]
	add.b	#0x10,d0                         	| [$72ff: add  a,$10]
	move.b	d0,(0x0b,a3)                    	| [$7301: ld   (iy+$0b),a]
	move.b	d0,(0x0f,a3)                    	| [$7304: ld   (iy+$0f),a]
	move.b	#0x41,(0x02,a3)                 	| [$7307: ld   (iy+$02),$41]
	move.b	#0xC1,(0x06,a3)                 	| [$730b: ld   (iy+$06),$C1]
	move.b	#0x45,(0x0a,a3)                 	| [$730f: ld   (iy+$0a),$45]
	move.b	#0xC5,(0x0e,a3)                 	| [$7313: ld   (iy+$0e),$C5]
	clr.b	d2                               	| [$7317: ld   c,$00]
l_7319:
	movem.w	d1/d2,-(sp)                    	| [$7319: push bc]
	lea	referee_x_pos_C700,a2          	| [$731a: ld   ix,referee_x_pos_C700]
	btst.b	#0,d2                           	| [$731e: bit  0,c]
	jne	l_7329                             	| [$7320: jp   nz,$7329]
	lea	game_mem+0x739f,a0                  	| [$7323: ld   hl,table_739f]
	jra	l_732c                             	| [$7326: jp   $732C]
l_7329:
	lea	game_mem+0x73a5,a0                  	| [$7329: ld   hl,table_73a5]
l_732c:
	lea	unknown_C701,a2                	| [$732c: ld   ix,unknown_C701]
	move.w	#0x0004,d3                      	| [$7330: ld   de,$0004] 4
	move.b	#0x06,d1                        	| [$7333: ld   b,$06]
l_7335:
	move.b	(a0)+,d0                         	| [$7335: ld   a,(hl)]
	move.b	d0,(0x00,a2)                    	| [$7336: ld   (ix+$00),a]
	add.w	d3,a2                            	| [$7339: add  ix,de]
	                           	| [$733b: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_7335                             	| [$733c: djnz $7335]
	move.b	#0x1B,d0                        	| [$733e: ld   a,$1B]
	jbsr	suspend_this_task_B05A            	| [$7340: call suspend_this_task_B05A]
	tst.b	d0                               	| [$7343: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$7344: call nz,display_error_text_B075]
0:
	lea	task_struct_C1C0,a2                	| [$7347: ld   ix,task_struct_C1C0]
	move.b	(0x09,a2),d0                    	| [$734b: ld   a,(ix+$09)]
	move.b	d0,unknown_C77D                 	| [$734e: ld   (unknown_C77D),a]
	movem.w	(sp)+,d1/d2                    	| [$7351: pop  bc]
	move.b	d2,d0                           	| [$7352: ld   a,c]
	cmp.b	#0x08,d0                         	| [$7353: cp   $08]
	jcc	l_7366                             	| [$7355: jp   nc,$7366]
	lea	unknown_C77C,a3                	| [$7358: ld   iy,unknown_C77C]
	subq.b	#1,(0x00,a3)                    	| [$735c: dec  (iy+$00)]
	subq.b	#1,(0x04,a3)                    	| [$735f: dec  (iy+$04)]
	addq.b	#1,d2                           	| [$7362: inc  c]
	jra	l_7319                             	| [$7363: jp   $7319]
l_7366:
	lea	unknown_C7D4,a3                	| [$7366: ld   iy,unknown_C7D4]
	move.b	#0x65,(0x01,a3)                 	| [$736a: ld   (iy+$01),$65]
	move.b	#0x65,(0x05,a3)                 	| [$736e: ld   (iy+$05),$65]
	move.b	#0x66,(0x09,a3)                 	| [$7372: ld   (iy+$09),$66]
	move.b	#0x66,(0x0d,a3)                 	| [$7376: ld   (iy+$0d),$66]

	move.l	a3,-(sp)                        	| [$737a: push iy]
	move.b	#0x10,d0                        	| [$737c: ld   a,$10]
	jbsr	suspend_this_task_B05A            	| [$737e: call suspend_this_task_B05A]
	move.l	(sp)+,a3                        	| [$7381: pop  iy]
	move.b	#0x67,(0x01,a3)                 	| [$7383: ld   (iy+$01),$67]
	move.b	#0x67,(0x05,a3)                 	| [$7387: ld   (iy+$05),$67]
	move.b	#0x68,(0x09,a3)                 	| [$738b: ld   (iy+$09),$68]
	move.b	#0x68,(0x0d,a3)                 	| [$738f: ld   (iy+$0d),$68]

	move.l	a3,-(sp)                        	| [$7393: push iy]
	move.b	#0x10,d0                        	| [$7395: ld   a,$10]
	jbsr	suspend_this_task_B05A            	| [$7397: call suspend_this_task_B05A]
	move.l	(sp)+,a3                        	| [$739a: pop  iy]
	jra	l_7366                             	| [$739c: jp   $7366]

l_73ab:
	move.b	background_and_state_bits_C911,d0	| [$73ab: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$73ae: res  7,a]
	sub.b	#0x40,d0                         	| [$73b0: sub  $40]
	clr.w	d1                               	| [$73b5: ld   b,$00]
	add.b	d0,d0                            	| [$73b2: add  a,a]
	add.b	d0,d0                            	| [$73b3: add  a,a]
	move.b	d0,d1                           	| [$73b4: ld   c,a]
	lea	game_mem+0x751b,a2                  	| [$73b7: ld   ix,table_751b]
	add.w	d1,a2                            	| [$73bb: add  ix,bc]
	move.b	(0x00,a2),d5                    	| [$73bd: ld   h,(ix+$00)]
	move.b	(0x01,a2),d6                    	| [$73c0: ld   l,(ix+$01)]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$73c3: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$73c6: bit  2,a]
	jne	l_73cf                             	| [$73c8: jp   nz,$73CF]
	move.b	#0x78,d0                        	| [$73cb: ld   a,$78]
	add.b	d5,d0                            	| [$73cd: add  a,h]
	move.b	d0,d5                           	| [$73ce: ld   h,a]
l_73cf:
	move.b	(0x02,a2),d2                    	| [$73cf: ld   c,(ix+$02)]
	move.b	(0x03,a2),d1                    	| [$73d2: ld   b,(ix+$03)]
	lea	unknown_C77C,a3                	| [$73d5: ld   iy,unknown_C77C]
	move.b	d5,(0x00,a3)                    	| [$73d9: ld   (iy+$00),h]
	move.b	d6,(0x03,a3)                    	| [$73dc: ld   (iy+$03),l]
	move.b	#0x10,d0                        	| [$73df: ld   a,$10]
	add.b	d6,d0                            	| [$73e1: add  a,l]
	move.b	d0,(0x07,a3)                    	| [$73e2: ld   (iy+$07),a]
	move.b	d5,(0x04,a3)                    	| [$73e5: ld   (iy+$04),h]
	move.b	d2,(0x01,a3)                    	| [$73e8: ld   (iy+$01),c]
	move.b	d1,(0x02,a3)                    	| [$73eb: ld   (iy+$02),b]
	addq.b	#1,d2                           	| [$73ee: inc  c]
	move.b	d2,(0x05,a3)                    	| [$73ef: ld   (iy+$05),c]
	move.b	d1,(0x06,a3)                    	| [$73f2: ld   (iy+$06),b]

	movem.l	d5/d6,-(sp)                        	| [$73f5: push hl]
	move.b	d5,d0                           	| [$73f6: ld   a,h]
	sub.b	#0x30,d0                         	| [$73f7: sub  $30]
	move.b	d0,d3                           	| [$73f9: ld   d,a]
	move.b	d6,d0                           	| [$73fa: ld   a,l]
	sub.b	#0x28,d0                         	| [$73fb: sub  $28]
	move.b	d0,d4                           	| [$73fd: ld   e,a]
	move.b	#0x05,d1
	move.b	#0xF9,d2                      	| [$73fe: ld   bc,$05F9]
	move.b	#0x4A,d5                        	| [$7401: ld   h,$4A]
	jbsr	l_7a6a                            	| [$7403: call $7A6A]
	movem.l	(sp),d5/d6                        	| [$7406: pop  hl]

										| [$7407: push hl]
	lea	unknown_C7BC,a3                	| [$7408: ld   iy,unknown_C7BC]
	move.b	#0x08,d0                        	| [$740c: ld   a,$08]
	add.b	d5,d0                            	| [$740e: add  a,h]
	move.b	d0,(0x00,a3)                    	| [$740f: ld   (iy+$00),a]
	move.b	d6,d0                           	| [$7412: ld   a,l]
	sub.b	#0x18,d0                         	| [$7413: sub  $18]
	move.b	d0,(0x03,a3)                    	| [$7415: ld   (iy+$03),a]
	move.b	#0x2C,(0x01,a3)                 	| [$7418: ld   (iy+$01),$2C]
	move.b	#0x45,(0x02,a3)                 	| [$741c: ld   (iy+$02),$45]
	movem.l	(sp)+,d5/d6                        	| [$7420: pop  hl]
	move.b	d5,d0                           	| [$7421: ld   a,h]
	sub.b	#0x28,d0                         	| [$7422: sub  $28]
	move.b	d0,d1                           	| [$7424: ld   b,a]
	add.b	#0x10,d0                         	| [$7425: add  a,$10]
	move.b	d0,d2                           	| [$7427: ld   c,a]
	move.b	d6,d0                           	| [$7428: ld   a,l]
	sub.b	#0x10,d0                         	| [$7429: sub  $10]
	lea	referee_x_pos_C700,a3          	| [$742b: ld   iy,referee_x_pos_C700]
	move.b	d1,(0x00,a3)                    	| [$742f: ld   (iy+$00),b]
	move.b	d2,(0x04,a3)                    	| [$7432: ld   (iy+$04),c]
	move.b	d1,(0x08,a3)                    	| [$7435: ld   (iy+$08),b]
	move.b	d2,(0x0c,a3)                    	| [$7438: ld   (iy+$0c),c]
	move.b	d1,(0x10,a3)                    	| [$743b: ld   (iy+$10),b]
	move.b	d2,(0x14,a3)                    	| [$743e: ld   (iy+$14),c]
	move.b	d0,(0x03,a3)                    	| [$7441: ld   (iy+$03),a]
	move.b	d0,(0x07,a3)                    	| [$7444: ld   (iy+$07),a]
	add.b	#0x10,d0                         	| [$7447: add  a,$10]
	move.b	d0,(0x0b,a3)                    	| [$7449: ld   (iy+$0b),a]
	move.b	d0,(0x0f,a3)                    	| [$744c: ld   (iy+$0f),a]
	add.b	#0x10,d0                         	| [$744f: add  a,$10]
	move.b	d0,(0x13,a3)                    	| [$7451: ld   (iy+$13),a]
	move.b	d0,(0x17,a3)                    	| [$7454: ld   (iy+$17),a]
	* select different tables
	move.b	#0x41,d5
	move.b	#0xCE,d6                      	| [$7457: ld   hl,$41CE] immediate
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$745a: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$745d: bit  2,a]
	jne	l_7465                             	| [$745f: jp   nz,$7465]
	move.b	#0x42,d5
	move.b	#0xCE,d6                      	| [$7462: ld   hl,$42CE] immediate
l_7465:
	move.b	d6,(0x01,a3)                    	| [$7465: ld   (iy+$01),l]
	move.b	d5,(0x02,a3)                    	| [$7468: ld   (iy+$02),h]
	addq.w	#1,d6                           	| [$746b: inc  hl]
	move.b	d6,(0x05,a3)                    	| [$746c: ld   (iy+$05),l]
	move.b	d5,(0x06,a3)                    	| [$746f: ld   (iy+$06),h]
	addq.w	#1,d6                           	| [$7472: inc  hl]
	move.b	d6,(0x09,a3)                    	| [$7473: ld   (iy+$09),l]
	move.b	d5,(0x0a,a3)                    	| [$7476: ld   (iy+$0a),h]
	addq.w	#1,d6                           	| [$7479: inc  hl]
	move.b	d6,(0x0d,a3)                    	| [$747a: ld   (iy+$0d),l]
	move.b	d5,(0x0e,a3)                    	| [$747d: ld   (iy+$0e),h]
	addq.w	#1,d6                           	| [$7480: inc  hl]
	move.b	d6,(0x11,a3)                    	| [$7481: ld   (iy+$11),l]
	move.b	d5,(0x12,a3)                    	| [$7484: ld   (iy+$12),h]
	addq.w	#1,d6                           	| [$7487: inc  hl]
	move.b	d6,(0x15,a3)                    	| [$7488: ld   (iy+$15),l]
	move.b	d5,(0x16,a3)                    	| [$748b: ld   (iy+$16),h]
l_748e:
	move.b	#0x28,d0                        	| [$748e: ld   a,$28]
	jbsr	suspend_this_task_B05A            	| [$7490: call suspend_this_task_B05A]
	tst.b	d0                               	| [$7493: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$7494: call nz,display_error_text_B075]
0:
	lea	referee_x_pos_C700,a3          	| [$7497: ld   iy,referee_x_pos_C700]
	move.b	#0xD4,(0x01,a3)                 	| [$749b: ld   (iy+$01),$D4]
	move.b	#0xD5,(0x05,a3)                 	| [$749f: ld   (iy+$05),$D5]
	move.b	#0x28,d0                        	| [$74a3: ld   a,$28]
	jbsr	suspend_this_task_B05A            	| [$74a5: call suspend_this_task_B05A]
	tst.b	d0                               	| [$74a8: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$74a9: call nz,display_error_text_B075]
0:
	lea	referee_x_pos_C700,a3          	| [$74ac: ld   iy,referee_x_pos_C700]
	move.b	#0xCE,(0x01,a3)                 	| [$74b0: ld   (iy+$01),$CE]
	move.b	#0xCF,(0x05,a3)                 	| [$74b4: ld   (iy+$05),$CF]
	jra	l_748e                             	| [$74b8: jp   $748E]

task_755b:
	clr.b	d0                               	| [$755b: ld   a,$00]
	move.b	d0,current_move_C24B            	| [$755d: ld   (current_move_C24B),a]
	move.b	background_and_state_bits_C911,d0	| [$7560: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$7563: res  7,a]
	cmp.b	#0x10,d0                         	| [$7565: cp   $10]
l_7567:
	jcs	fight_mainloop_A37B                	| [$7567: jp   c,fight_mainloop_A37B]
	move.b	d0,d1                           	| [$756a: ld   b,a]
	and.b	#0xF0,d0                         	| [$756b: and  $F0]
	cmp.b	#0x10,d0                         	| [$756d: cp   $10]
	jne	l_7586                             	| [$756f: jp   nz,$7586]
	move.b	d1,d0                           	| [$7572: ld   a,b]
	and.b	#0x0F,d0                         	| [$7573: and  $0F]
	add.b	d0,d0                            	| [$7575: add  a,a]
	add.b	d0,d0                            	| [$7575: add  a,a]
	clr.w	d1                               	| [$7577: ld   b,$00]
	move.b	d0,d1                           	| [$7576: ld   c,a]
	lea	table_759F(pc),a2                  	| [$7579: ld   ix,table_759F]
	move.l	(a2,d1.w),a0                            	| [$757d: add  ix,bc]
											| [$757f: ld   l,(ix+$00)]
											| [$7582: ld   h,(ix+$01)]
	jra	(a0)                               	| [$7585: jp   (hl)]
l_7586:
	cmp.b	#0x50,d0                         	| [$7586: cp   $50]
	jne	display_error_text_B075            	| [$7588: jp   nz,display_error_text_B075]
	move.b	d1,d0                           	| [$758b: ld   a,b]
	and.b	#0x0F,d0                         	| [$758c: and  $0F]
	add.b	d0,d0                            	| [$758e: add  a,a]
	add.b	d0,d0                            	| [$758e: add  a,a]
	clr.w	d1                               	| [$7590: ld   b,$00]
	move.b	d0,d1                           	| [$758f: ld   c,a]
	lea	table_75C1(pc),a2                  	| [$7592: ld   ix,table_75C1]
	move.l	(a2,d1.w),a0                            	| [$7596: add  ix,bc]
											| [$7598: ld   l,(ix+$00)]
											| [$759b: ld   h,(ix+$01)]
	jra	(a0)                               	| [$759e: jp   (hl)]
table_759F:
	.long	l_75cd                           	|  table_759F
	.long	l_75cd                           	|  $75a1
	.long	l_75cd                           	|  $75a3
	.long	l_75cd                           	|  $75a5
	.long	l_75cd                           	|  $75a7
	.long	l_75cd                           	|  $75a9
	.long	l_75cd                           	|  $75ab
	.long	l_75cd                           	|  $75ad
	.long	l_75cd                           	|  $75af
	.long	l_75cd                           	|  $75b1
	.long	l_75cd                           	|  $75b3
	.long	l_75cd                           	|  $75b5
	.long	l_75cd                           	|  $75b7
	.long	l_75cd                           	|  $75b9
	.long	l_75cd                           	|  $75bb
	.long	l_75cd                           	|  $75bd
	.long	display_error_text_B075          	|  $75bf
table_75C1:
	.long	fight_mainloop_A37B              	|  table_75C1
	.long	0                           	|  $75c3
	.long	0                           	|  $75c5
	.long	l_75cd                           	|  $75c7
	.long	0                           	|  $75c9
	.long	display_error_text_B075          	|  $75cb
l_75cd:
	clr.b	d0                               	| [$75cd: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$75cf: call suspend_this_task_B05A]
	* reached when practice starts
	cmp.b	#0x09,d0                         	| [$75d2: cp   $09]
	jeq	l_75cd                             	| [$75d4: jp   z,$75CD]
	cmp.b	#0x0C,d0                         	| [$75d7: cp   $0C]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$75d9: call nz,display_error_text_B075]
0:
	* crashes!!!!! FUCK FUCK
	jbsr	l_3db7                            	| [$75dc: call $3DB7]
	move.b	d0,current_move_C24B            	| [$75df: ld   (current_move_C24B),a]
	clr.b	d0                               	| [$75e2: xor  a]
	move.b	d0,unknown_C24C                 	| [$75e3: ld   (unknown_C24C),a]
	move.b	#0x0A,d0                        	| [$75e6: ld   a,$0A]
	move.b	#0x0D,d1                        	| [$75e8: ld   b,$0D]
	jbsr	task_manipulation_B05D            	| [$75ea: call task_manipulation_B05D]
	tst.b	d0                               	| [$75ed: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$75ee: call nz,display_error_text_B075]
0:
	jra	l_75cd                             	| [$75f1: jp   $75CD]
	lea	table_7652(pc),a2                  	| [$75f4: ld   ix,table_7652]

	move.l	a2,-(sp)                        	| [$75f8: push ix]
	move.b	(0x01,a2),d1                    	| [$75fa: ld   b,(ix+$01)]
	movem.w	d1/d2,-(sp)                    	| [$75fd: push bc]
l_75fe:
	clr.b	d0                               	| [$75fe: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$7600: call suspend_this_task_B05A]
	cmp.b	#0x0C,d0                         	| [$7603: cp   $0C]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$7605: call nz,display_error_text_B075]
0:
	movem.w	(sp)+,d1/d2                    	| [$7608: pop  bc]
	move.l	(sp)+,a2                        	| [$7609: pop  ix]
	move.b	(0x00,a2),d0                    	| [$760b: ld   a,(ix+$00)]
	move.b	d0,current_move_C24B            	| [$760e: ld   (current_move_C24B),a]
	subq.b	#1,d1                           	| [$7611: dec  b]
	jeq	l_7626                             	| [$7612: jp   z,$7626]

	move.l	a2,-(sp)                        	| [$7615: push ix]
	movem.w	d1/d2,-(sp)                    	| [$7617: push bc]
	move.b	#0x0A,d0                        	| [$7618: ld   a,$0A]
	move.b	#0x0D,d1                        	| [$761a: ld   b,$0D]
	jbsr	task_manipulation_B05D            	| [$761c: call task_manipulation_B05D]
	tst.b	d0                               	| [$761f: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$7620: call nz,display_error_text_B075]
0:
	jra	l_75fe                             	| [$7623: jp   $75FE]
l_7626:

	move.l	a2,-(sp)                        	| [$7626: push ix]
	move.b	#0x0A,d0                        	| [$7628: ld   a,$0A]
	move.b	#0x0D,d1                        	| [$762a: ld   b,$0D]
	jbsr	task_manipulation_B05D            	| [$762c: call task_manipulation_B05D]
	tst.b	d0                               	| [$762f: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$7630: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a2                        	| [$7633: pop  ix]
	addq.w	#2,a2                           	| [$7635: inc  ix] * 2
	move.b	(a2),d0                    	| [$7639: ld   a,(ix+$00)]
	cmp.b	#0xFF,d0                         	| [$763c: cp   $FF]
	bne.b	0f
	jbsr	l_764a                            	| [$763e: call z,$764A]
0:

	move.l	a2,-(sp)                        	| [$7641: push ix]
	movem.w	d1/d2,-(sp)                    	| [$7643: push bc]
	move.b	(0x01,a2),d1                    	| [$7644: ld   b,(ix+$01)]
	jra	l_75fe                             	| [$7647: jp   $75FE]
l_764a:
	clr.b	d0                               	| [$764a: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$764c: call suspend_this_task_B05A]
	jra	l_764a                             	| [$764f: jp   $764A]
table_7652:
	dc.b	0x17,0x0c,0x13,0x0c,0xff | table_7652
	.align	2

task_7657:
	clr.b	d0                               	| [$7657: ld   a,$00]
	move.b	d0,current_move_p2_C26B                 	| [$7659: ld   (current_move_p2_C26B),a]
	move.b	background_and_state_bits_C911,d0	| [$765c: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$765f: res  7,a]
	cmp.b	#0x10,d0                         	| [$7661: cp   $10]
	jcs	fight_mainloop_A37B                	| [$7663: jp   c,fight_mainloop_A37B]
	move.b	d0,d1                           	| [$7666: ld   b,a]
	and.b	#0xF0,d0                         	| [$7667: and  $F0]
	cmp.b	#0x10,d0                         	| [$7669: cp   $10]
	jne	l_7682                             	| [$766b: jp   nz,$7682]
	move.b	d1,d0                           	| [$766e: ld   a,b]
	and.b	#0x0F,d0                         	| [$766f: and  $0F]
	clr.w	d1                               	| [$7673: ld   b,$00]
	add.b	d0,d0                            	| [$7671: add  a,a]
	add.b	d0,d0                            	| [$7671: add  a,a]
	move.b	d0,d1                           	| [$7672: ld   c,a]
	lea	table_769B(pc),a2                  	| [$7675: ld   ix,table_769B]
	add.w	d1,a2                            	| [$7679: add  ix,bc]

	move.l	(0x00,a2),a0                    	| [$767b: ld   l,(ix+$00)]
												| [$767e: ld   h,(ix+$01)]
	jra	(a0)                               	| [$7681: jp   (hl)]
l_7682:
	cmp.b	#0x50,d0                         	| [$7682: cp   $50]
	jne	display_error_text_B075            	| [$7684: jp   nz,display_error_text_B075]
	move.b	d1,d0                           	| [$7687: ld   a,b]
	and.b	#0x0F,d0                         	| [$7688: and  $0F]
	clr.w	d1                               	| [$768c: ld   b,$00]
	add.b	d0,d0                            	| [$768a: add  a,a]
	add.b	d0,d0                            	| [$768a: add  a,a]
	move.b	d0,d1                           	| [$768b: ld   c,a]
	lea	table_76BD(pc),a2                  	| [$768e: ld   ix,table_76BD]
	add.w	d1,a2                            	| [$7692: add  ix,bc]
	move.l	(0x00,a2),a0                    	| [$7694: ld   l,(ix+$00)]
												| [$7697: ld   h,(ix+$01)]
	jra	(a0)                               	| [$769a: jp   (hl)]
table_769B:
	.long	l_772c                           	|  table_769B
	.long	l_772c                           	|  $769d
	.long	l_772c                           	|  $769f
	.long	l_772c                           	|  $76a1
	.long	l_772c                           	|  $76a3
	.long	l_772c                           	|  $76a5
	.long	l_772c                           	|  $76a7
	.long	l_772c                           	|  $76a9
	.long	l_772c                           	|  $76ab
	.long	l_772c                           	|  $76ad
	.long	l_772c                           	|  $76af
	.long	l_772c                           	|  $76b1
	.long	l_772c                           	|  $76b3
	.long	l_772c                           	|  $76b5
	.long	l_772c                           	|  $76b7
	.long	l_772c                           	|  $76b9
	.long	display_error_text_B075          	|  $76bb
table_76BD:
	.long	fight_mainloop_A37B              	|  table_76BD
	.long	0                           	|  $76bf
	.long	0                           	|  $76c1
	.long	l_606a                           	|  $76c3
	.long	0                           	|  $76c5
	.long	display_error_text_B075          	|  $76c7
	
l_772c:
	clr.b	d0                               	| [$772c: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$772e: call suspend_this_task_B05A]
	cmp.b	#0x09,d0                         	| [$7731: cp   $09]
	jeq	l_772c                             	| [$7733: jp   z,$772C]
	cmp.b	#0x0C,d0                         	| [$7736: cp   $0C]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$7738: call nz,display_error_text_B075]
0:
	jbsr	l_3db7                            	| [$773b: call $3DB7]
	move.b	d0,current_move_p2_C26B                 	| [$773e: ld   (current_move_p2_C26B),a]
	clr.b	d0                               	| [$7741: xor  a]
	move.b	d0,unknown_C26C                 	| [$7742: ld   (unknown_C26C),a]
	move.b	#0x0B,d0                        	| [$7745: ld   a,$0B]
	move.b	#0x0D,d1                        	| [$7747: ld   b,$0D]
	jbsr	task_manipulation_B05D            	| [$7749: call task_manipulation_B05D]
	tst.b	d0                               	| [$774c: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$774d: call nz,display_error_text_B075]
0:
	jra	l_772c                             	| [$7750: jp   $772C]
	
table_7799:
	dc.b	0x0c,0x0e,0x19,0x15,0x0a,0x22,0x0e,0x1b | table_7799
	dc.b	0x3c,0x01,0xff | $77a1
table_77a4:
	dc.b	0x0c,0x0e,0x19,0x15,0x0a,0x22,0x0e,0x1b | table_77a4
	dc.b	0x3c,0x02,0xff,0x17,0x07,0x1d,0x12,0x16 | $77ac
	dc.b	0x0e,0x3c,0x03,0x00,0xff | $77b4
table_77b9:
	dc.b	0x0a,0x0c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c | table_77b9
	dc.b	0x3c,0x3c,0x3c,0x3c,0x3c,0xfe,0x0a,0x0d | $77c1
	dc.b	0x3c,0x10,0x0a,0x16,0x0e,0x3c,0x18,0x1f | $77c9
	dc.b	0x0e,0x1b,0x3c,0xfe,0x0a,0x0e,0x3c,0x3c | $77d1
	dc.b	0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c | $77d9
	dc.b	0x3c,0xff | $77e1
table_77e3:
	dc.b	0x06,0x05,0xc1,0x92,0xc2,0x92,0xc3,0x92 | table_77e3
	dc.b	0xc4,0x92,0xc5,0x92,0xc6,0x92,0xc7,0x92 | $77eb
	dc.b	0xfe,0x06,0x06,0xc8,0x92,0x4f,0x92,0x50 | $77f3
	dc.b	0x92,0x51,0x92,0x52,0x92,0x53,0x92,0x54 | $77fb
	dc.b	0x92,0xfe,0x06,0x07,0x55,0x92,0x56,0x92 | $7803
	dc.b	0x57,0x92,0x58,0x92,0x59,0x92,0x5a,0x92 | $780b
	dc.b	0x5b,0x92,0xff | $7813
table_7816:
	dc.b	0x05,0x0a,0x15,0x18,0x1c,0x0e,0x1b,0x3c | table_7816
	dc.b	0x1d,0x18,0x3c,0x0c,0x18,0x17,0x1d,0x12 | $781e
	dc.b	0x17,0x1e,0x0e,0x3c,0x0f,0x12,0x10,0x11 | $7826
	dc.b	0x1d,0xfe,0x02,0x0c,0x12,0x17,0x1c,0x0e | $782e
	dc.b	0x1b,0x1d,0x3c,0x0c,0x18,0x12,0x17,0x3c | $7836
	dc.b	0x20,0x12,0x1d,0x11,0x12,0x17,0x3c,0x01 | $783e
	dc.b	0x05,0x3c,0x1c,0x0e,0x0c,0x18,0x17,0x0d | $7846
	dc.b	0xfe,0x05,0x0e,0x20,0x12,0x17,0x17,0x0e | $784e
	dc.b	0x1b,0x3c,0x1d,0x18,0x3c,0x0c,0x18,0x17 | $7856
	dc.b	0x1d,0x12,0x17,0x1e,0x0e,0xfe,0x09,0x10 | $785e
	dc.b	0x1c,0x12,0x17,0x10,0x15,0x0e,0x3c,0x19 | $7866
	dc.b	0x15,0x0a,0x22,0xfe,0x07,0x12,0x19,0x1b | $786e
	dc.b	0x0e,0x1c,0x1c,0x3c,0x01,0x19,0x3c,0x0b | $7876
	dc.b	0x1e,0x1d,0x1d,0x18,0x17 | $787e
table_7883:
	dc.b	0xff | table_7883
table_7884:
	dc.b	0x09,0x0c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c | table_7884
	dc.b	0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c | $788c
	dc.b	0xfe,0x09,0x0d,0x3c,0x02,0x19,0x3c,0x10 | $7894
	dc.b	0x0a,0x16,0x0e,0x3c,0x18,0x1f,0x0e,0x1b | $789c
	dc.b	0x3c,0xfe,0x09,0x0e,0x3c,0x3c,0x3c,0x3c | $78a4
	dc.b	0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c | $78ac
	dc.b	0x3c,0x3c,0xff | $78b4
table_78b7:
	dc.b	0x09,0x0c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c | table_78b7
	dc.b	0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c | $78bf
	dc.b	0xfe,0x09,0x0d,0x3c,0x01,0x19,0x3c,0x10 | $78c7
	dc.b	0x0a,0x16,0x0e,0x3c,0x18,0x1f,0x0e,0x1b | $78cf
	dc.b	0x3c,0xfe,0x09,0x0e,0x3c,0x3c,0x3c,0x3c | $78d7
	dc.b	0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c | $78df
	dc.b	0x3c,0x3c,0xff | $78e7
	.align	2
l_78ea:
	move.b	#0x01,d0                        	| [$78ea: ld   a,$01]
	jbsr	play_sound_B072                   	| [$78ec: call play_sound_B072]
	move.w	#0x103C,d1                      	| [$78ef: ld   bc,$103C]
	jbsr	fill_video_and_attribute_memory_B030	| [$78f2: call fill_video_and_attribute_memory_B030]
	lea	game_mem+0xa0ea,a0  	                	| [$78f5: ld   hl,table_a0ea]
	jbsr	display_multicolor_text_B03C      	| [$78f8: call display_multicolor_text_B03C]
	lea	product_of_data_east_str_7999(pc),a0	| [$78fb: ld   hl,product_of_data_east_str_7999]
	jbsr	display_multicolor_text_B03C      	| [$78fe: call display_multicolor_text_B03C]
	move.b	#0x1E,d0                        	| [$7901: ld   a,$1E]
	jbsr	suspend_this_task_B05A            	| [$7903: call suspend_this_task_B05A]
	tst.b	d0                               	| [$7906: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$7907: call nz,display_error_text_B075]
0:
	move.b	#0x08,d0                        	| [$790a: ld   a,$08]
	jbsr	schedule_task_to_start_B057       	| [$790c: call schedule_task_to_start_B057]
	move.b	#0x09,d0                        	| [$790f: ld   a,$09]
	jbsr	schedule_task_to_start_B057       	| [$7911: call schedule_task_to_start_B057]
	move.b	#0x0A,d0                        	| [$7914: ld   a,$0A]
	jbsr	schedule_task_to_start_B057       	| [$7916: call schedule_task_to_start_B057]
	move.b	#0x0B,d0                        	| [$7919: ld   a,$0B]
	jbsr	schedule_task_to_start_B057       	| [$791b: call schedule_task_to_start_B057]
	move.b	#0x1E,d1                        	| [$791e: ld   b,$1E]
l_7920:
	movem.w	d1/d2,-(sp)                    	| [$7920: push bc]
	lea	player_vs_player_str_7972(pc),a0   	| [$7921: ld   hl,player_vs_player_str_7972]
	jbsr	display_multicolor_text_B03C      	| [$7924: call display_multicolor_text_B03C]
	move.b	#0x14,d0                        	| [$7927: ld   a,$14]
	jbsr	suspend_this_task_B05A            	| [$7929: call suspend_this_task_B05A]
	lea	spaces_str_795D(pc),a0             	| [$792c: ld   hl,spaces_str_795D]
	move.b	#0x98,d3                        	| [$792f: ld   d,$98]
	jbsr	display_text_B039                 	| [$7931: call display_text_B039]
	move.b	#0x14,d0                        	| [$7934: ld   a,$14]
	jbsr	suspend_this_task_B05A            	| [$7936: call suspend_this_task_B05A]
	movem.w	(sp)+,d1/d2                    	| [$7939: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_7920                             	| [$793a: djnz $7920]
	move.b	#0x08,d0                        	| [$793c: ld   a,$08]
	jbsr	resume_task_B054                  	| [$793e: call resume_task_B054]
	move.b	#0x09,d0                        	| [$7941: ld   a,$09]
	jbsr	resume_task_B054                  	| [$7943: call resume_task_B054]
	move.b	#0x0A,d0                        	| [$7946: ld   a,$0A]
	jbsr	resume_task_B054                  	| [$7948: call resume_task_B054]
	move.b	#0x0B,d0                        	| [$794b: ld   a,$0B]
	jbsr	resume_task_B054                  	| [$794d: call resume_task_B054]
	move.b	#0x01,d0                        	| [$7950: ld   a,$01]
	move.b	d0,d1                           	| [$7952: ld   b,a]
	jbsr	task_manipulation_B05D            	| [$7953: call task_manipulation_B05D]
	tst.b	d0                               	| [$7956: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$7957: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                   	| [$795a: call task_yield_B051]
 * spaces
spaces_str_795D:
	dc.b	0x06,0x1c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c | spaces_str_795D
	dc.b	0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c | $7965
	dc.b	0x3c,0x3c,0x3c,0x3c,0xff | $796d
 * "player vs player"
player_vs_player_str_7972:
	dc.b	0x06,0x1c,0x3c,0x98,0x19,0x98,0x15,0x98 | player_vs_player_str_7972
	dc.b	0x0a,0x98,0x22,0x98,0x0e,0x98,0x1b,0x98 | $797a
	dc.b	0x3c,0x98,0x1f,0x98,0x1c,0x98,0x3c,0x98 | $7982
	dc.b	0x19,0x90,0x15,0x90,0x0a,0x90,0x22,0x90 | $798a
	dc.b	0x0e,0x90,0x1b,0x90,0x3c,0x90,0xff | $7992
 * "product of data east"
product_of_data_east_str_7999:
	dc.b	0x01,0x1f,0x3c,0x98,0x3c,0x98,0x3c,0x98 | product_of_data_east_str_7999
	dc.b	0x3c,0x98,0x3c,0x98,0x19,0x98,0x1b,0x98 | $79a1
	dc.b	0x18,0x98,0x0d,0x98,0x1e,0x98,0x0c,0x98 | $79a9
	dc.b	0x1d,0x98,0x3c,0x98,0x18,0x98,0x0f,0x98 | $79b1
	dc.b	0x3c,0x98,0x0d,0x98,0x0a,0x98,0x1d,0x98 | $79b9
	dc.b	0x0a,0x98,0x3c,0x98,0x0e,0x98,0x0a,0x98 | $79c1
	dc.b	0x1c,0x98,0x1d,0x98,0x3c,0x98,0x3c,0x98 | $79c9
	dc.b	0x3c,0x98,0x3c,0x98,0xff,0x01,0x06,0xff | $79d1	
	.align	2


l_7a4d:
	lea	unknown_C7BC,a0                	| [$7a4d: ld   hl,unknown_C7BC]
	move.b	#0x10,d1                        	| [$7a50: ld   b,$10]
l_7a52:
	clr.b	(a0)+                             	| [$7a52: ld   (hl),$00]
	                           	| [$7a54: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_7a52                             	| [$7a55: djnz $7A52]
	rts                                    	| [$7a57: ret]

or_50_to_C7BE_7A58:
	lea	unknown_C7BE,a0                	| [$7a58: ld   hl,unknown_C7BE]
	move.w	#0x0004,d3                      	| [$7a5b: ld   de,$0004] 4
	move.b	#0x04,d1                        	| [$7a5e: ld   b,$04]
	move.b	#0x50,d0                        	| [$7a60: ld   a,$50]
l_7a62:
	move.w	d0,-(sp)                        	| [$7a62: push af]
	or.b	(a0),d0                           	| [$7a63: or   (hl)]
	move.b	d0,(a0)                         	| [$7a64: ld   (hl),a]
	move.w	(sp)+,d0                        	| [$7a65: pop  af]
	add.w	d3,a0                            	| [$7a66: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_7a62                             	| [$7a67: djnz $7A62]
	rts                                    	| [$7a69: ret]

l_7a6a:
	lea	unknown_C7C0,a2                	| [$7a6a: ld   ix,unknown_C7C0]
l_7a6e:
	move.b	d3,(0x00,a2)                    	| [$7a6e: ld   (ix+$00),d]
	move.b	d2,(0x01,a2)                    	| [$7a71: ld   (ix+$01),c]
	move.b	d5,(0x02,a2)                    	| [$7a74: ld   (ix+$02),h]
	move.b	d4,(0x03,a2)                    	| [$7a77: ld   (ix+$03),e]
	                    	| [$7a7a: push bc]
										| [$7a7b: ld   bc,$0004] 4
	addq.w	#4,a2                            	| [$7a7e: add  ix,bc]
                    	| [$7a80: pop  bc]
	move.b	#0x10,d0                        	| [$7a81: ld   a,$10]
	add.b	d3,d0                            	| [$7a83: add  a,d]
	move.b	d0,d3                           	| [$7a84: ld   d,a]
	addq.b	#1,d2                           	| [$7a85: inc  c]
	subq.b	#1,d1                           	| [...]
	jne	l_7a6e                             	| [$7a86: djnz $7A6E]
	rts                                    	| [$7a88: ret]
	
display_background_picture_7A89:
	                  	| [$7a89: ld   ix,table_7B12]
	move.b	background_and_state_bits_C911,d0	| [$7a8d: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$7a90: res  7,a]
	cmp.b	#0x50,d0                         	| [$7a92: cp   $50]
	jcs	l_7a98                             	| [$7a94: jp   c,$7A98]
	rts                                    	| [$7a97: ret]
l_7a98:
	and.b	#0x0F,d0                         	| [$7a98: and  $0F]
	add.b	d0,d0                            	| [$7a9a: add  a,a]
	add.b	d0,d0                            	| [$7a9b: add  a,a]
	clr.w	d1                               	| [$7a9d: ld   b,$00]
	move.b	d0,d1                           	| [$7a9c: ld   c,a]
	* table containing pointers on background picture tiles
	lea	game_mem+0x7B12,a2                  	| [$7a9f: ld   ix,table_7B12]
	add.w	d1,a2                            	| [$7aa3: add  ix,bc]
	move.b	(a2),d0                    	| [$7aa5: ld   a,(ix+$00)]
	and.b	(0x01,a2),d0                     	| [$7aa8: and  (ix+$01)]
	cmp.b	#0xFF,d0                         	| [$7aab: cp   $FF]
	bne.b	0f
	rts                                    	| [$7aad: ret  z]
0:
	move.b	(0x00,a2),d2                    	| [$7aae: ld   c,(ix+$00)]
	move.b	(0x01,a2),d1                    	| [$7ab1: ld   b,(ix+$01)]

	move.l	a2,-(sp)                        	| [$7ab4: push ix]
	jbsr	fill_video_and_attribute_memory_B030	| [$7ab6: call fill_video_and_attribute_memory_B030]
	move.l	(sp)+,a2                        	| [$7ab9: pop  ix]
	bsr		load_a0_from_a2_structure_02_address    | [$7abb: ld   l,(ix+$02)]
												| [$7abe: ld   h,(ix+$03)]
	
l_7ac1:
	move.b	(a0)+,d0                         	| [$7ac1: ld   a,(hl)]
										| [$7ac2: inc  hl]
	and.b	(a0),d0                          	| [$7ac3: and  (hl)]
	cmp.b	#0xFF,d0                         	| [$7ac4: cp   $FF]
	bne.b	0f
	rts                                    	| [$7ac6: ret  z]
0:
	subq.w	#1,a0                           	| [$7ac7: dec  hl]

	move.l	a0,-(sp)                        	| [$7ac8: push hl]
	
	move.b	(a0)+,d4                         	| [$7ac9: ld   e,(hl)]
	                           	| [$7aca: inc  hl]
	move.b	(a0),d3                         	| [$7acb: ld   d,(hl)]
	bsr		change_d3_d4_to_a1
	exg	a1,a0                              	| [$7acc: ex   de,hl]
	jbsr	display_multicolor_text_B03C      	| [$7acd: call display_multicolor_text_B03C]
	move.l	(sp)+,a0                        	| [$7ad0: pop  hl]
	addq.w	#2,a0                           	| [$7ad1: inc  hl] * 2
	jra	l_7ac1                             	| [$7ad3: jp   $7AC1]
l_7ad6:
	move.b	unknown_C032,d0                 	| [$7ad6: ld   a,(unknown_C032)]
	btst.b	#1,d0                           	| [$7ad9: bit  1,a]
	bne.b	0f
	rts                                    	| [$7adb: ret  z]
0:
	move.b	background_and_state_bits_C911,d0	| [$7adc: ld   a,(background_and_state_bits_C911)]
	cmp.b	#0x54,d0                         	| [$7adf: cp   $54]
	jeq	l_7aee                             	| [$7ae1: jp   z,$7AEE]
	cmp.b	#0x53,d0                         	| [$7ae4: cp   $53]
	jeq	l_7aee                             	| [$7ae6: jp   z,$7AEE]
	jbsr	is_title_screen_demo_mode_B0B1    	| [$7ae9: call is_title_screen_demo_mode_B0B1]
	tst.b	d0                               	| [$7aec: and  a]
	bne.b	0f
	rts                                    	| [$7aed: ret  z]
0:
l_7aee:
	move.b	#0x14,d1
	move.b	#0x06,d2                      	| [$7aee: ld   bc,$1406]
	lea	two_p_color_text_7B02(pc),a0       	| [$7af1: ld   hl,two_p_color_text_7B02]
	movem.w	d1/d2,-(sp)                    	| [$7af4: push bc]
	jbsr	display_multicolor_text_B03C      	| [$7af5: call display_multicolor_text_B03C]
	movem.w	(sp)+,d1/d2                    	| [$7af8: pop  bc]
	lea	unknown_C0D0,a0                	| [$7af9: ld   hl,unknown_C0D0]
	move.b	#0x98,d3                        	| [$7afc: ld   d,$98]
	jbsr	display_text_color_2_B03F                            	| [$7afe: call $B03F]
	rts                                    	| [$7b01: ret]
two_p_color_text_7B02:
	dc.b	0x14,0x05,0x02,0x98,0x1e,0x98,0x19,0x98 | two_p_color_text_7B02
	dc.b	0xfe,0x18,0x06,0x00,0x98,0x00,0x98,0xff | $7b0a
	
display_start_message_7b92:
	move.b	nb_credits_minus_one_C024,d0    	| [$7b92: ld   a,(nb_credits_minus_one_C024)]
	lea	start_1P_message_7BA6(pc),a0       	| [$7b95: ld   hl,start_1P_message_7BA6]
	cmp.b	#0x00,d0                         	| [$7b98: cp   $00]
	jeq	l_7ba0                             	| [$7b9a: jp   z,$7BA0]
	lea	start_2P_message_7BCA(pc),a0       	| [$7b9d: ld   hl,start_2P_message_7BCA]
l_7ba0:
	move.b	#0x98,d3                        	| [$7ba0: ld   d,$98]
	jbsr	display_text_B039                 	| [$7ba2: call display_text_B039]
	rts                                    	| [$7ba5: ret]
start_1P_message_7BA6:
	dc.b	0x05,0x0a,0x19,0x1b,0x0e,0x1c,0x1c,0x3c | table_7BA6
	dc.b	0x01,0x19,0x3c,0x0b,0x1e,0x1d,0x1d,0x18 | $7bae
	dc.b	0x17,0x3c,0x0f,0x18,0x1b,0xfe,0x09,0x0c | $7bb6
	dc.b	0x1c,0x12,0x17,0x10,0x15,0x0e,0x3c,0x19 | $7bbe
	dc.b	0x15,0x0a,0x22,0xff | $7bc6
start_2P_message_7BCA:
	dc.b	0x05,0x0a,0x19,0x1b,0x0e,0x1c,0x1c,0x3c | table_7BCA
	dc.b	0x01,0x19,0x3c,0x0b,0x1e,0x1d,0x1d,0x18 | $7bd2
	dc.b	0x17,0x3c,0x0f,0x18,0x1b,0xfe,0x09,0x0c | $7bda
	dc.b	0x1c,0x12,0x17,0x10,0x15,0x0e,0x3c,0x19 | $7be2
	dc.b	0x15,0x0a,0x22,0xfe,0x05,0x0e,0x19,0x1b | $7bea
	dc.b	0x0e,0x1c,0x1c,0x3c,0x02,0x19,0x3c,0x0b | $7bf2
	dc.b	0x1e,0x1d,0x1d,0x18,0x17,0x3c,0x0f,0x18 | $7bfa
	dc.b	0x1b,0xfe,0x04,0x10,0x0f,0x12,0x10,0x11 | $7c02
	dc.b	0x1d,0x3c,0x0b,0x0e,0x1d,0x20,0x0e,0x0e | $7c0a
	dc.b	0x17,0x3c,0x19,0x15,0x0a,0x22,0x0e,0x1b | $7c12
	dc.b	0x1c,0xff | $7c1a

display_credits_7C1C:
	lea	credit_text_7C54(pc),a0            	| [$7c1c: ld   hl,credit_text_7C54]
	move.b	#0x98,d3                        	| [$7c1f: ld   d,$98]
	jbsr	display_text_B039                 	| [$7c21: call display_text_B039]
											| [$7c24: ld   hl,$1F1C]
	move.w	#0x1C1F,temp_numeric_buffer_CF00     	| [$7c27: ld   (temp_numeric_buffer_CF00),hl]
* at least during "press 1P button" screen
* check number of credits, maybe to display them
	move.b	nb_credits_minus_one_C024,d0    	| [$7c2a: ld   a,(nb_credits_minus_one_C024)]
	moveq	#1,d7
	abcd	d7,d0                        	| [$7c2d: add  a,$01]
	move.b	d0,d1                           	| [$7c30: ld   b,a]
	lea	temp_numeric_buffer_CF00,a2    	| [$7c31: ld   ix,temp_numeric_buffer_CF00]
	and.b	#0x0F,d0                         	| [$7c35: and  $0F]
	move.b	d0,(0x03,a2)                    	| [$7c37: ld   (ix+$03),a]
	move.b	d1,d0                           	| [$7c3a: ld   a,b]
	lsr.b	#4,d0                            	| [$7c3b: srl  a] * 4
	move.b	d0,(0x02,a2)                    	| [$7c43: ld   (ix+$02),a]
	st.b	d0                                	| [$7c46: ld   a,$FF]
	move.b	d0,(0x04,a2)                    	| [$7c48: ld   (ix+$04),a]
	lea	temp_numeric_buffer_CF00,a0    	| [$7c4b: ld   hl,temp_numeric_buffer_CF00]
	move.b	#0x98,d3                        	| [$7c4e: ld   d,$98]
	jbsr	display_text_B039                 	| [$7c50: call display_text_B039]
	rts                                    	| [$7c53: ret]
credit_text_7C54:
	dc.b	0x15,0x1f,0x0c,0x1b,0x0e,0x0d,0x12,0x1d | credit_7C54
	dc.b	0xff | $7c5c
	.align	2
	
task_7c5d:
	move.b	background_and_state_bits_C911,d0	| [$7c5d: ld   a,(background_and_state_bits_C911)]
	cmp.b	#0x54,d0                         	| [$7c60: cp   $54]
	move.b	#0x02,d0                        	| [$7c62: ld   a,$02]
	jeq	l_7c78                             	| [$7c64: jp   z,$7C78]
	move.b	background_and_state_bits_C911,d0	| [$7c67: ld   a,(background_and_state_bits_C911)]
	cmp.b	#0x53,d0                         	| [$7c6a: cp   $53]
	move.b	#0x02,d0                        	| [$7c6c: ld   a,$02]
	jeq	l_7c78                             	| [$7c6e: jp   z,$7C78]
	jbsr	is_title_screen_demo_mode_B0B1    	| [$7c71: call is_title_screen_demo_mode_B0B1]
	tst.b	d0                               	| [$7c74: and  a]
	bne	0f
	jbsr	task_yield_B051                   	| [$7c75: call z,task_yield_B051]
0:
l_7c78:
	subq.b	#1,d0                           	| [$7c78: dec  a]
	add.b	d0,d0                            	| [$7c79: add  a,a]
	add.b	d0,d0                            	| [$7c79: add  a,a]
	clr.w	d1                               	| [$7c7b: ld   b,$00]
	move.b	d0,d1                           	| [$7c7a: ld   c,a]
	lea	table_7D06(pc),a2                  	| [$7c7d: ld   ix,table_7D06]
	add.w	d1,a2                            	| [$7c81: add  ix,bc]

	move.l	(0x00,a2),a0                    	| [$7c83: ld   l,(ix+$00)]
										| [$7c86: ld   h,(ix+$01)]

	move.l	a0,-(sp)                        	| [$7c89: push hl]
											| [$7c8a: ld   bc,$0004] 4
	addq.w	#8,a0                            	| [$7c8d: add  hl,bc]

	move.l	a0,a3                        	| [$7c8e: push hl]
										| [$7c8f: pop  iy]
	move.l	(sp)+,a0                        	| [$7c91: pop  hl]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$7c92: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$7c95: bit  2,a]
	jne	l_7c9e                             	| [$7c97: jp   nz,$7C9E]
											| [$7c9a: ld   bc,$0004] 4
	addq.w	#8,a0                            	| [$7c9d: add  hl,bc]
  
l_7c9e:

	move.l	a0,a2                        	| [$7c9e: push hl]
	                        	| [$7c9f: pop  ix]
l_7ca1:

	move.l	a2,-(sp)                        	| [$7ca1: push ix]

	move.l	a3,-(sp)                        	| [$7ca3: push iy]
	move.b	(0x00,a2),d6                    	| [$7ca5: ld   l,(ix+$00)]
	move.b	(0x01,a2),d5                    	| [$7ca8: ld   h,(ix+$01)]
	jbsr	display_multicolor_text_B03C      	| [$7cab: call display_multicolor_text_B03C]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$7cae: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x0C,d0                         	| [$7cb1: and  $0C]
	cmp.b	#0x0C,d0                         	| [$7cb3: cp   $0C]
	jne	l_7cc1                             	| [$7cb5: jp   nz,$7CC1]
	move.b	(0x00,a3),d6                    	| [$7cb8: ld   l,(iy+$00)]
	move.b	(0x01,a3),d5                    	| [$7cbb: ld   h,(iy+$01)]
	jbsr	display_multicolor_text_B03C      	| [$7cbe: call display_multicolor_text_B03C]
l_7cc1:
	move.b	#0x28,d0                        	| [$7cc1: ld   a,$28]
	jbsr	suspend_this_task_B05A            	| [$7cc3: call suspend_this_task_B05A]
	move.l	(sp)+,a3                        	| [$7cc6: pop  iy]
	move.l	(sp)+,a2                        	| [$7cc8: pop  ix]
	tst.b	d0                               	| [$7cca: and  a]
	jne	l_7cfa                             	| [$7ccb: jp   nz,$7CFA]

	move.l	a2,-(sp)                        	| [$7cce: push ix]

	move.l	a3,-(sp)                        	| [$7cd0: push iy]
	move.b	(0x02,a2),d6                    	| [$7cd2: ld   l,(ix+$02)]
	move.b	(0x03,a2),d5                    	| [$7cd5: ld   h,(ix+$03)]
	jbsr	display_multicolor_text_B03C      	| [$7cd8: call display_multicolor_text_B03C]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$7cdb: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x0C,d0                         	| [$7cde: and  $0C]
	cmp.b	#0x0C,d0                         	| [$7ce0: cp   $0C]
	jne	l_7cee                             	| [$7ce2: jp   nz,$7CEE]
	move.b	(0x02,a3),d6                    	| [$7ce5: ld   l,(iy+$02)]
	move.b	(0x03,a3),d5                    	| [$7ce8: ld   h,(iy+$03)]
	jbsr	display_multicolor_text_B03C      	| [$7ceb: call display_multicolor_text_B03C]
l_7cee:
	move.b	#0x28,d0                        	| [$7cee: ld   a,$28]
	jbsr	suspend_this_task_B05A            	| [$7cf0: call suspend_this_task_B05A]
	move.l	(sp)+,a3                        	| [$7cf3: pop  iy]
	move.l	(sp)+,a2                        	| [$7cf5: pop  ix]
	jra	l_7ca1                             	| [$7cf7: jp   $7CA1]
l_7cfa:

	move.l	a2,-(sp)                        	| [$7cfa: push ix]
	clr.b	d0                               	| [$7cfc: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$7cfe: call suspend_this_task_B05A]
	move.l	(sp)+,a2                        	| [$7d01: pop  ix]
	jra	l_7ca1                             	| [$7d03: jp   $7CA1]
table_7D06:
	.long	table_7d0a                       	|  $7d06
	.long	table_7d0a                       	|  $7d08
table_7d0a:
	.long	table_7d12                       	|  $7d0a
	.long	table_7d1b                       	|  $7d0c
	.long	table_7d24                       	|  $7d0e
	.long	table_7d2d                       	|  $7d10
table_7d12:
 * 1UP
	dc.b	0x14,0x03,0x01,0x98,0x1e,0x98,0x19,0x98 | $7d12
	dc.b	0xff | $7d1a
table_7d1b:
	dc.b	0x14,0x03,0x3c,0x98,0x3c,0x98,0x3c,0x98 | $7d1b
	dc.b	0xff | $7d23
table_7d24:
 * 2UP
	dc.b	0x14,0x05,0x02,0x98,0x1e,0x98,0x19,0x98 | $7d24
	dc.b	0xff | $7d2c
table_7d2d:
	dc.b	0x14,0x05,0x3c,0x98,0x3c,0x98,0x3c,0x98 | $7d2d
	dc.b	0xff | $7d35


move_human_player_A34D:
	move.b	background_and_state_bits_C911,d0	| [$a34d: ld   a,(background_and_state_bits_C911)]
	btst.b	#7,d0                           	| [$a350: bit  7,a]
	clr.b	d0                               	| [$a352: ld   a,$00]
	jne	l_a37a                             	| [$a354: jp   nz,$A37A] special screens, don't move human player
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$a357: ld   hl,players_type_human_or_cpu_flags_C02D]
	move.b	current_task_index_C028,d0   	| [$a35a: ld   a,(current_task_index_C028)]
	cmp.b	#0x09,d0                         	| [$a35d: cp   $09]
	clr.b	d0                               	| [$a35f: ld   a,$00]
	jne	l_a36c                             	| [$a361: jp   nz,$A36C]
	btst.b	#3,(a0)                         	| [$a364: bit  3,(hl)]
	jeq	l_a37a                             	| [$a366: jp   z,$A37A]
	jra	l_a371                             	| [$a369: jp   $A371]
l_a36c:
	btst.b	#2,(a0)                         	| [$a36c: bit  2,(hl)]
	jeq	l_a37a                             	| [$a36e: jp   z,$A37A]
l_a371:
	jbsr	l_3db7                            	| [$a371: call $3DB7]
* player (human) technique
	bsr		load_address_of_current_player_move_byte_CF04	| [$a374: ld   hl,(address_of_current_player_move_byte_CF04)]
* player 1: hl = C24B
	move.b	d0,(a0)                         	| [$a377: ld   (hl),a]
	st.b	d0                                	| [$a378: ld   a,$FF]
l_a37a:
	rts                                    	| [$a37a: ret]

* roughly called every 60th frames, sometimes 2 times in the frame
* probably not or loosely synchronized with 60Hz interrupt
fight_mainloop_A37B:
	jbsr	load_iy_with_player_structure_B04B	| [$a37b: call load_iy_with_player_structure_B04B]
	clr.b	(0x10,a3)                        	| [$a37e: ld   (iy+$10),$00]
	clr.b	d0                               	| [$a382: xor  a]
	jbsr	suspend_this_task_B05A            	| [$a383: call suspend_this_task_B05A]
	cmp.b	#0x09,d0                         	| [$a386: cp   $09]
	jeq	fight_mainloop_A37B                	| [$a388: jp   z,fight_mainloop_A37B]
	cmp.b	#0x0C,d0                         	| [$a38b: cp   $0C]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$a38d: call nz,display_error_text_B075]
0:
* this loops (outside the periodic interrupt)
* when players are shown and fight. either in the intro/demo
* or during a real fight
fight_mainloop_A390:
	jbsr	load_iy_with_player_structure_B04B	| [$a390: call load_iy_with_player_structure_B04B]
* now (1 player vs red CPU: iy = $C200)
	jbsr	update_players_struct_C2xx_A428   	| [$a393: call update_players_struct_C2xx_A428]
	jbsr	move_human_player_A34D            	| [$a396: call move_human_player_A34D]
	tst.b	d0                               	| [$a399: and  a]
	jne	cpu_move_done_A410                 	| [$a39a: jp   nz,cpu_move_done_A410] only humans: end
* 1 player mode: handle computer
	lea	walk_frames_list_AA3B(pc),a2       	| [$a39d: ld   ix,walk_frames_list_AA3B]
	move.b	(0x07,a3),d6                    	| [$a3a1: ld   l,(iy+$07)]
	move.b	(0x08,a3),d5                    	| [$a3a4: ld   h,(iy+$08)] <= what the computer frame is

	                        	| [$a3a7: push hl]
* the computer tries to find its own displayed frame in the various lists
* is the computer walking?
	jbsr	check_hl_in_ix_list_B009          	| [$a3a8: call check_hl_in_ix_list_B009]
	                        	| [$a3ab: pop  hl]
	tst.b	d0                               	| [$a3ac: and  a]
* if walking/stands guard, computer can attack the player
	jne	maybe_attack_opponent_A53B         	| [$a3ad: jp   nz,maybe_attack_opponent_A53B]
	lea	jump_frames_list_AA4D(pc),a2       	| [$a3b0: ld   ix,jump_frames_list_AA4D]

	                        	| [$a3b4: push hl]
	jbsr	check_hl_in_ix_list_B009          	| [$a3b5: call check_hl_in_ix_list_B009]
	                        	| [$a3b8: pop  hl]
	tst.b	d0                               	| [$a3b9: and  a]
	jne	handle_cpu_land_from_jump_ABCC     	| [$a3ba: jp   nz,handle_cpu_land_from_jump_ABCC]
	lea	hitting_frame_list_AA6D(pc),a2     	| [$a3bd: ld   ix,hitting_frame_list_AA6D]

	                        	| [$a3c1: push hl]
	jbsr	check_hl_in_ix_list_B009          	| [$a3c2: call check_hl_in_ix_list_B009]
	                        	| [$a3c5: pop  hl]
	tst.b	d0                               	| [$a3c6: and  a]
	jne	full_blown_hit_ABE3                	| [$a3c7: jp   nz,full_blown_hit_ABE3] missed cpu hit: let player react
* the rest of the routine is used to maintain block as long as needed
* (as long as opponent is performing the same menacing move or another
* move of the same attack height)
	lea	blocking_frame_list_AA8D(pc),a2    	| [$a3ca: ld   ix,blocking_frame_list_AA8D]

	move.l	a0,-(sp)                        	| [$a3ce: push hl]
	jbsr	check_hl_in_ix_list_B009          	| [$a3cf: call check_hl_in_ix_list_B009]
	move.l	(sp)+,a0                        	| [$a3d2: pop  hl]
	tst.b	d0                               	| [$a3d3: and  a]
	jne	computer_completed_a_blocking_move_ABFF	| [$a3d4: jp   nz,computer_completed_a_blocking_move_ABFF] computer has completed a blocking move

	move.l	a0,-(sp)                        	| [$a3d7: push hl]
	move.l	(sp)+,a2                        	| [$a3d8: pop  ix]
	move.b	(0x08,a2),d0                    	| [$a3da: ld   a,(ix+$08)]
	tst.b	d0                               	| [$a3dd: and  a]
	jne	l_acc8                             	| [$a3de: jp   nz,$ACC8] move done
	jra	l_accb                             	| [$a3e1: jp   $ACCB] move done

cpu_move_done_opponent_can_react_A3E4:
	move.b	background_and_state_bits_C911,d0	| [$a3e4: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$a3e7: res  7,a] clears bit 7
* this is during demo mode (blue "karate champ" background), 2 cpu players
* during cpu vs cpu demo (bridge), it's not $50
	cmp.b	#0x50,d0                         	| [$a3e9: cp   $50]
	jeq	cpu_move_done_A410                 	| [$a3eb: jp   z,cpu_move_done_A410]
	btst.b	#0,(0x10,a3)                    	| [$a3ee: bit  0,(iy+$10)]
	jne	cpu_move_done_A410                 	| [$a3f2: jp   nz,cpu_move_done_A410]
* we enter here when computer is about to attack, but (in lower difficulty levels < 16)
* it lets the opponent a chance to counter attack just before the attack
* the time for the opponent to react is smaller and smaller with increasing skill level
* attack has been already decided by functions that end up
* calling A3E4
	lea	counter_attack_timer_table_AD67(pc),a0	| [$a3f5: ld   hl,counter_attack_timer_table_AD67]
	jbsr	let_opponent_react_depending_on_skill_level_ACCE	| [$a3f8: call let_opponent_react_depending_on_skill_level_ACCE]
* something animation related must have been set up to handle the special (why?)
* case of counter attack with jump. Otherwise return code doesn't matter much
	cmp.b	#0x09,d0                         	| [$a3fb: cp   $09]
	jeq	fight_mainloop_A37B                	| [$a3fd: jp   z,fight_mainloop_A37B] jump attack: loop back (without attacking)
	tst.b	d0                               	| [$a400: and  a]
	jeq	l_a409                             	| [$a401: jp   z,$A409] 0
	cmp.b	#0xFF,d0                         	| [$a404: cp   $FF]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$a406: call nz,display_error_text_B075]
0:
* a = $FF: non jump counter attack has been launched by opponent
* iy is C220
* the attack move is already loaded in cpu C26B
l_a409:
	bset.b	#0,(0x10,a3)                    	| [$a409: set  0,(iy+$10)]
	jra	fight_mainloop_A390                	| [$a40d: jp   fight_mainloop_A390]

* called after a non-attacking move (walk, sommersault, turn back...)
* but can also be called after deciding an attack...
cpu_move_done_A410:
	move.b	current_task_index_C028,d0   	| [$a410: ld   a,(current_task_index_C028)]
	cmp.b	#0x09,d0                         	| [$a413: cp   $09]
	move.b	#0x0B,d0                        	| [$a415: ld   a,$0B]
	jeq	l_a41c                             	| [$a417: jp   z,$A41C]
	move.b	#0x0A,d0                        	| [$a41a: ld   a,$0A]
l_a41c:
	move.b	#0x0D,d1                        	| [$a41c: ld   b,$0D]
	jbsr	task_manipulation_B05D            	| [$a41e: call task_manipulation_B05D]
	tst.b	d0                               	| [$a421: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$a422: call nz,display_error_text_B075]
0:
	jra	fight_mainloop_A37B                	| [$a425: jp   fight_mainloop_A37B]


update_players_struct_C2xx_A428:
	jbsr	disable_interrupts_B0BD           	| [$a428: call disable_interrupts_B0BD] calls disable_interrupts_BBE2 ???
	move.w	unknown_C247,d3             	| [$a42b: ld   de,(unknown_C247)] load animation/position of player 1
	move.w	unknown_C249,d5             	| [$a42f: ld   hl,(unknown_C249)] load xy for player 1
	exg		d3,d4  | EXX exchanges BC, DE, and HL with shadow registers with BC', DE', and HL'.
	exg		d5,d6
	move.w	unknown_C267,d3             	| [$a433: ld   de,(unknown_C267)] load animation/position of player 2
	move.w	unknown_C269,d5             	| [$a437: ld   hl,(unknown_C269)] load xy for player 2
	move.b	current_task_index_C028,d0   	| [$a43a: ld   a,(current_task_index_C028)]
	cmp.b	#0x09,d0                         	| [$a43d: cp   $09]
	jeq	l_a443                             	| [$a43f: jp   z,$A443]
	exg		d3,d4
	exg		d5,d6	| depending on the configuration (which is the human opponent), swap values
* frame ID (16 bit) in e and d
l_a443:
	* now move D3.W and D5.W properly (respecting original endianness damn)
	* and preserving D3 & D5 values!
	SWAP_WORD	d3
	move.b	d3,(0x07,a3)                    	| [$a443: ld   (iy+$07),e]
	SWAP_WORD	d3								| second swap restores original D3 value
	move.b	d3,(0x08,a3)                    	| [$a446: ld   (iy+$08),d]
* l: x coord (player 1: $C209) min $20
	SWAP_WORD	d5
	move.b	d5,(0x09,a3)                    	| [$a449: ld   (iy+$09),l]
	SWAP_WORD	d5
	move.b	d5,(0x0a,a3)                    	| [$a44c: ld   (iy+$0a),h]
	exg		d3,d4
	exg		d5,d6
** copy coords to opponent structure
	SWAP_WORD	d3
	move.b	d3,(0x0b,a3)                    	| [$a450: ld   (iy+$0b),e]
	SWAP_WORD	d3	
	move.b	d3,(0x0c,a3)                    	| [$a453: ld   (iy+$0c),d]
	SWAP_WORD	d5
	move.b	d5,(0x0d,a3)                    	| [$a456: ld   (iy+$0d),l]
	SWAP_WORD	d5
	move.b	d5,(0x0e,a3)                    	| [$a459: ld   (iy+$0e),h]
	jbsr	enable_interrupts_b0c0            	| [$a45c: call enable_interrupts_b0c0]
	btst.b	#7,(0x08,a3)                    	| [$a45f: bit  7,(iy+$08)]
	jeq	l_a480                             	| [$a463: jp   z,$A480]
	bclr.b	#7,(0x08,a3)                    	| [$a466: res  7,(iy+$08)]
	move.b	(0x09,a3),d0                    	| [$a46a: ld   a,(iy+$09)]
	not.b	d0                               	| [$a46d: cpl]
	move.b	d0,(0x09,a3)                    	| [$a46e: ld   (iy+$09),a]
	move.b	(0x0c,a3),d0                    	| [$a471: ld   a,(iy+$0c)]
	eor.b	#0x80,d0                         	| [$a474: xor  $80]
	move.b	d0,(0x0c,a3)                    	| [$a476: ld   (iy+$0c),a]
	move.b	(0x0d,a3),d0                    	| [$a479: ld   a,(iy+$0d)]
	not.b	d0                               	| [$a47c: cpl]
	move.b	d0,(0x0d,a3)                    	| [$a47d: ld   (iy+$0d),a]
l_a480:
	lea	current_move_p2_C26B,a0                	| [$a480: ld   hl,current_move_p2_C26B]
	move.b	current_task_index_C028,d0   	| [$a483: ld   a,(current_task_index_C028)]
	cmp.b	#0x09,d0                         	| [$a486: cp   $09]
	jeq	l_a48e                             	| [$a488: jp   z,$A48E]
	lea	current_move_C24B,a0           	| [$a48b: ld   hl,current_move_C24B]
l_a48e:
	jbsr	store_address_of_current_player_move_byte_CF04	| [$a48e: ld   (address_of_current_player_move_byte_CF04),hl]
	addq.w	#1,a0                           	| [$a491: inc  hl]
	jbsr	compute_attack_disntace_a496                            	| [$a492: call $A496]
	rts                                    	| [$a495: ret]

* sets attack distance (0,1,2)
compute_attack_disntace_a496:
	move.l	a0,-(sp)                        	| [$a496: push hl]
	clr.b	(a0)                             	| [$a497: ld   (hl),$00]
	* load distance with max val plus 1
	move.b	#0x09,(0x0f,a3)                 	| [$a499: ld   (iy+$0f),$09]
	lea	temp_numeric_buffer_CF00,a2    	| [$a49d: ld   ix,temp_numeric_buffer_CF00]
	                  	| [$a4a1: ld   hl,($A539)]
	* I don't think that this is useful. Storing contents of A539 in CF02...
	* A539 is in ROM and contains 00,FF
	move.b	#0x00,unknown_CF02                 	| [$a4a4: ld   (unknown_CF02),hl]
	move.b	#0xFF,unknown_CF03                 	| [$a4a4: ld   (unknown_CF02),hl]
	lea	table_A529(pc),a0                  	| [$a4a7: ld   hl,table_A529]
	move.b	(0x0d,a3),d3                    	| [$a4aa: ld   d,(iy+$0d)]
	move.b	(0x0e,a3),d4                    	| [$a4ad: ld   e,(iy+$0e)]
l_a4b0:
	clr.b	d0                               	| [$a4b0: xor  a]
	* decrease distance
	subq.b	#1,(0x0f,a3)                    	| [$a4b1: dec  (iy+$0f)]
	* if zero, closest => quit
	jeq	l_a4e5                             	| [$a4b4: jp   z,$A4E5]
	jbsr	l_a50a                            	| [$a4b7: call $A50A]
	tst.b	d0                               	| [$a4ba: and  a]
	jeq	l_a4c3                             	| [$a4bb: jp   z,$A4C3]
	addq.w	#2,a0                           	| [$a4be: inc  hl] * 2
	jra	l_a4b0                             	| [$a4c0: jp   $A4B0]
l_a4c3:
	move.b	(0x09,a3),d0                    	| [$a4c3: ld   a,(iy+$09)]
	add.b	(a0)+,d0                          	| [$a4c6: add  a,(hl)]
	move.b	d0,(0x00,a2)                    	| [$a4c7: ld   (ix+$00),a]
	                           	| [$a4ca: inc  hl]
	move.b	(a0)+,d0                         	| [$a4cb: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$a4cc: ld   (ix+$01),a]
	                           	| [$a4cf: inc  hl]
	jbsr	is_point_in_rectangle_B042        	| [$a4d0: call is_point_in_rectangle_B042]
	tst.b	d0                               	| [$a4d3: and  a]
	jeq	l_a4b0                             	| [$a4d4: jp   z,$A4B0]
	move.b	#0x09,d0                        	| [$a4d7: ld   a,$09]
	sub.b	(0x0f,a3),d0                     	| [$a4d9: sub  (iy+$0f)]
	move.b	d0,(0x0f,a3)                    	| [$a4dc: ld   (iy+$0f),a]
	lsr.b	#1,d0                            	| [$a4df: srl  a]
	jcc	l_a4e5                             	| [$a4e1: jp   nc,$A4E5]
	addq.b	#1,d0                           	| [$a4e4: inc  a]
l_a4e5:
	move.l	(sp)+,a0                        	| [$a4e5: pop  hl]
	move.b	d0,(a0)                         	| [$a4e6: ld   (hl),a]
	move.b	(0x0d,a3),d0                    	| [$a4e7: ld   a,(iy+$0d)] opponent x
	cmp.b	(0x09,a3),d0                     	| [$a4ea: cp   (iy+$09)] player x
	jcs	l_a4fe                             	| [$a4ed: jp   c,$A4FE]
* opponent is on the right
	btst.b	#7,(0x0c,a3)                    	| [$a4f0: bit  7,(iy+$0c)]
	jne	l_a509                             	| [$a4f4: jp   nz,$A509]
	bset.b	#7,(0x0f,a3)                    	| [$a4f7: set  7,(iy+$0f)]
	jra	l_a509                             	| [$a4fb: jp   $A509]
l_a4fe:
	btst.b	#7,(0x0c,a3)                    	| [$a4fe: bit  7,(iy+$0c)]
	jeq	l_a509                             	| [$a502: jp   z,$A509]
	bset.b	#7,(0x0f,a3)                    	| [$a505: set  7,(iy+$0f)]
l_a509:
	rts                                    	| [$a509: ret]

l_a50a:
	move.b	(a0),d0                         	| [$a50a: ld   a,(hl)]
	tst.b	d0                               	| [$a50b: and  a]
	jmi	l_a51a                             	| [$a50c: jp   m,$A51A]
	add.b	(0x09,a3),d0                     	| [$a50f: add  a,(iy+$09)]
	jcc	l_a528                             	| [$a514: jp   nc,$A528]
	jra	l_a526                             	| [$a517: jp   $A526]
l_a51a:
	neg.b	d0                               	| [$a51a: neg]
	move.b	d0,d1                           	| [$a51c: ld   b,a]
	move.b	(0x09,a3),d0                    	| [$a51d: ld   a,(iy+$09)]
	sub.b	d1,d0                            	| [$a520: sub  b]
	jcc	l_a528                             	| [$a523: jp   nc,$A528]
l_a526:
	st.b	d0                                	| [$a526: ld   a,$FF]
	rts
l_a528:
	clr.b	d0                               	| [$a512: ld   a,$00]
	rts                                    	| [$a528: ret]

table_A529:
	dc.b	0x58,0x17,0x40,0x17,0x28,0x17,0x00,0x27 | table_A529
	dc.b	0xa0,0x17,0xb8,0x17,0xd0,0x17,0xe8,0x17 | $a531
	dc.b	0x00,0xff | $a539

* jump table depending on the value of iy+0xF
* this jumps to another jump table selector (which is not very performant
* as all the routines jumped to just load ix to a different value, a double
* jump could probably have been avoided. But who am I to criticize Z80 code ?
*
* note: block moves are probably triggered when cpu decides to move back and
* the player attacks at the same time (code $01)
*
maybe_attack_opponent_A53B:
	lea	table_A54F(pc),a2                  	| [$a53b: ld   ix,table_A54F]
	clr.w	d1                               	| [$a53f: ld   b,$00]
	* distance
	move.b	(0x0f,a3),d1                    	| [$a541: ld   c,(iy+$0f)] iy = C220: algebraic distance index (0-8 + facing direction bit 7)
	asl.b	#1,d1                            	| [$a544: sla  c] times 2 (and gets rid of the direction bit)
	add.w	d1,d1								| once more for long!
	add.w	d1,a2                            	| [$a546: add  ix,bc]
	move.l	(a2),a0     		               	| [$a548: ld   l,(ix+$00)]
											| [$a54b: ld   h,(ix+$01)]
	jra	(a0)                               	| [$a54e: jp   (hl)]

* fine distance 0-8 see table at the start of the file
table_A54F:
	.long	ai_load_table_opp_faces_very_far_A561	|  0
	.long	ai_load_table_opp_faces_far_A568 	|  1
	.long	ai_load_table_opp_faces_close_A56F	|  2
	.long	ai_load_table_opp_faces_closer_A576	|  3
	.long	ai_load_table_opp_faces_closest_A57D	|  4
	.long	ai_load_table_opp_turns_back_far_A584	|  5
	.long	ai_load_table_opp_turns_back_close_A58B	|  6
	.long	ai_load_table_opp_turns_back_closer_A592	|  7
	.long	ai_load_table_opp_turns_back_closest_A599	|  8

* p1 left, p2 right, far away (C20F = 0)
ai_load_table_opp_faces_very_far_A561:
	lea	computer_ai_jump_table_all_move_towards_opponent_A651(pc),a2	| [$a561: ld   ix,computer_ai_jump_table_all_move_towards_opponent_A651]
	jra	jump_to_routine_from_table_A59D    	| [$a565: jp   jump_to_routine_from_table_A59D]

* p1 left, p2 right, less far away (1)
ai_load_table_opp_faces_far_A568:
	lea	ai_jump_table_opp_faces_far_A5C5(pc),a2	| [$a568: ld   ix,ai_jump_table_opp_faces_far_A5C5]
	jra	jump_to_routine_from_table_A59D    	| [$a56c: jp   jump_to_routine_from_table_A59D]
* p1 left, p2 right, less far away (2)
ai_load_table_opp_faces_close_A56F:
	lea	ai_jump_table_opp_faces_close_A5D9(pc),a2	| [$a56f: ld   ix,ai_jump_table_opp_faces_close_A5D9]
	jra	jump_to_routine_from_table_A59D    	| [$a573: jp   jump_to_routine_from_table_A59D]
* p1 left, p2 right, less far away (3)
ai_load_table_opp_faces_closer_A576:
	lea	ai_jump_table_opp_faces_closer_A5ED(pc),a2	| [$a576: ld   ix,ai_jump_table_opp_faces_closer_A5ED]
	jra	jump_to_routine_from_table_A59D    	| [$a57a: jp   jump_to_routine_from_table_A59D]
* p1 left, p2 right, very close (4)
ai_load_table_opp_faces_closest_A57D:
	lea	ai_jump_table_opp_faces_closest_A601(pc),a2	| [$a57d: ld   ix,ai_jump_table_opp_faces_closest_A601]
	jra	jump_to_routine_from_table_A59D    	| [$a581: jp   jump_to_routine_from_table_A59D]
* p1 right, p2 left, far away (5)
ai_load_table_opp_turns_back_far_A584:
	lea	ai_jump_table_A615(pc),a2          	| [$a584: ld   ix,ai_jump_table_A615]
	jra	jump_to_routine_from_table_A59D    	| [$a588: jp   jump_to_routine_from_table_A59D]
* 6
ai_load_table_opp_turns_back_close_A58B:
	lea	ai_jump_table_A629(pc),a2          	| [$a58b: ld   ix,ai_jump_table_A629]
	jra	jump_to_routine_from_table_A59D    	| [$a58f: jp   jump_to_routine_from_table_A59D]
* 7
ai_load_table_opp_turns_back_closer_A592:
	lea	ai_jump_table_A63D(pc),a2          	| [$a592: ld   ix,ai_jump_table_A63D]
	jra	jump_to_routine_from_table_A59D    	| [$a596: jp   jump_to_routine_from_table_A59D]
* p1 right, p2 left, very close (8)
* turn back (to face opponent)
ai_load_table_opp_turns_back_closest_A599:
	lea	computer_ai_jump_table_all_turn_back_A651(pc),a2	| [$a599: ld   ix,computer_ai_jump_table_all_turn_back_A651]
jump_to_routine_from_table_A59D:
	move.l	a2,-(sp)                        	| [$a59d: push ix]
	jbsr	classify_opponent_move_start_A665 	| [$a59f: call classify_opponent_move_start_A665] retrieve value 1 -> 9
	move.l	(sp)+,a2                        	| [$a5a2: pop  ix]
* a is the index of the routine in selected computer_ai_jump_table
* it cannot be 0
	add.b	d0,d0                            	| [$a5a4: add  a,a]
	clr.w	d1                               	| [$a5a5: ld   b,$00]
	move.b	d0,d1                           	| [$a5a7: ld   c,a]
	add.w	d1,d1
	add.w	d1,a2                            	| [$a5a8: add  ix,bc]
	move.l	(a2),a0
											| [$a5aa: ld   l,(ix+$00)]
											| [$a5ad: ld   h,(ix+$01)]
* jump to the routine
	jra	(a0)                               	| [$a5b0: jp   (hl)]

* makes sense: players are far away, CPU just tries to get closer to player
* but can also change direction
computer_ai_jump_table_all_move_towards_opponent_A651:
	.long	display_error_text_B075          	|  what opponent does:
	.long	cpu_move_forward_towards_enemy_far_away_A6D4	|  1: no particular stuff
	.long	cpu_move_forward_towards_enemy_far_away_A6D4	|  2: frontal attack
	.long	cpu_move_forward_towards_enemy_far_away_A6D4	|  3: rear attack
	.long	cpu_move_forward_towards_enemy_far_away_A6D4	|  4: crouch
	.long	cpu_move_forward_towards_enemy_far_away_A6D4	|  5 in-jump
	.long	cpu_move_forward_towards_enemy_far_away_A6D4	|  6: sommersault forward
	.long	cpu_move_forward_towards_enemy_far_away_A6D4	|  7: sommersault backwards
	.long	cpu_move_forward_towards_enemy_far_away_A6D4	|  8: starting a jump
	.long	cpu_move_forward_towards_enemy_far_away_A6D4	|  9: move not in list

ai_jump_table_opp_faces_far_A5C5:
	.long	display_error_text_B075          	|  what opponent does:
	.long	cpu_move_forward_towards_enemy_A6E7	|  1: no particular stuff
	.long	cpu_forward_or_stop_if_facing_A6EF	|  2: frontal attack
	.long	cpu_forward_or_stop_if_not_facing_A700	|  3: rear attack
	.long	cpu_move_forward_towards_enemy_A6E7	|  4: crouch ($A711 jumps there)
	.long	cpu_move_forward_towards_enemy_A6E7	|  5 in-jump ($A714 jumps there)
	.long	cpu_forward_or_backward_depending_on_facing_A7D5	|  6: sommersault forward $A717	jumps there
	.long	cpu_backward_or_forward_depending_on_facing_A7E6	|  7: sommersault backwards $A71A	jumps there
	.long	cpu_move_forward_towards_enemy_A71D	|  8: starting a jump
	.long	cpu_move_forward_towards_enemy_A71D	|  9: move not in list

ai_jump_table_opp_faces_close_A5D9:
	.long	display_error_text_B075          	|  what opponent does:
	.long	attack_once_out_of_16_frames_else_walk_A725	|  1: no particular stuff
	.long	cpu_avoids_low_attack_if_facing_else_maybe_attacks_A73F	|  2: frontal attack
	.long	cpu_maybe_attacks_if_facing_else_avoids_low_attack_A786	|  3: rear attack
	.long	just_walk_A7C5                   	|  4: crouch
	.long	just_walk_A7CD                   	|  5 in-jump
	.long	cpu_forward_or_backward_depending_on_facing_A7D5	|  6: sommersault forward
	.long	cpu_backward_or_forward_depending_on_facing_A7E6	|  7: sommersault backwards
	.long	attack_once_out_of_16_frames_else_walk_A725	|  8: starting a jump  $A7F7	jumps there
	.long	cpu_move_forward_towards_enemy_A7FA	|  9: move not in list

ai_jump_table_opp_faces_closer_A5ED:
	.long	display_error_text_B075          	|  what opponent does:
	.long	pick_cpu_attack_A802             	|  1: no particular stuff
	.long	cpu_reacts_to_low_attack_if_facing_else_attacks_A80C	|  2: frontal attack
	.long	cpu_react_to_low_attack_or_perform_attack_A85B	|  3: rear attack
	.long	cpu_small_chance_of_low_kick_else_walk_A893	|  4: crouch
	.long	pick_cpu_attack_A802 | was $A8A8                    ; 5 in-jump
	.long	pick_cpu_attack_A802 | was $A8A8                    ; 6: sommersault forward
	.long	move_fwd_or_bwd_checking_sommersault_and_dir_A8E8	|  7: sommersault backwards
	.long	pick_cpu_attack_A802
	.long	pick_cpu_attack_A802

ai_jump_table_opp_faces_closest_A601:
	.long	display_error_text_B075          	|  what opponent does:
	.long	get_out_of_edge_or_low_kick_A917 	|  1: no particular stuff
	.long	cpu_reacts_to_low_attack_if_facing_else_attacks_A80C	|  2: frontal attack $A92F
	.long	front_kick_or_fwd_sommersault_to_recenter_A94E
	.long	perform_low_kick_A935
	.long	front_kick_or_fwd_sommersault_to_recenter_A94E
	.long	high_attack_if_forward_sommersault_or_walk_A8AB
	.long	move_fwd_or_bwd_checking_sommersault_and_dir_A8E8
	.long	perform_walk_back_A946           	|  8: starting a jump
	.long	front_kick_or_fwd_sommersault_to_recenter_A94E	|  9: move not in list

ai_jump_table_A615:
	.long	display_error_text_B075
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
ai_jump_table_A629:
	.long	display_error_text_B075
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
	.long	cpu_move_turn_around_A966
ai_jump_table_A63D:
	.long	display_error_text_B075          	|  what opponent does:
	.long	pick_cpu_attack_A96E             	|  1: no particular stuff
	.long	cpu_complex_reaction_to_front_attack_A980	|  2: frontal attack
	.long	cpu_complex_reaction_to_rear_attack_A9D6	|  3: rear attack
	.long	foot_sweep_back_AA10             	|  4: crouch
	.long	pick_cpu_attack_A96E             	|  5 in-jump    $AA22
	.long	cpu_turn_back_AA25               	|  6: sommersault forward
	.long	cpu_turn_back_AA25               	|  7: sommersault backwards
	.long	pick_cpu_attack_A96E             	|  8: starting a jump     $AA2D
	.long	pick_cpu_attack_A96E             	|  9: move not in list      $AA30
computer_ai_jump_table_all_turn_back_A651:
	.long	display_error_text_B075
	.long	cpu_turn_back_AA33
	.long	cpu_turn_back_AA33
	.long	cpu_turn_back_AA33
	.long	cpu_turn_back_AA33
	.long	cpu_turn_back_AA33
	.long	cpu_turn_back_AA33
	.long	cpu_turn_back_AA33
	.long	cpu_turn_back_AA33
	.long	cpu_turn_back_AA33


* given opponent moves (not distance), return a value between 1 and 9
* to be used in a per-distance/facing configuration jump table
* iy: points on C220 (the A.I. structure)
* 1: no particular stuff
* 2: frontal high attack
* 3: rear attack
* 4: crouch
* 5: in-jump
* 6: sommersault forward
* 7: sommersault backwards
* 8: starting a jump
* 9: move not in list
classify_opponent_move_start_A665:
	move.b	(0x0b,a3),d6                    	| [$a665: ld   l,(iy+$0b)]
	move.b	(0x0c,a3),d5                    	| [$a668: ld   h,(iy+$0c)] hl <= opponent frame
	bclr.b	#7,d5                           	| [$a66b: res  7,h] remove last bit (facing direction)
	lea	walk_frames_list_AA3B(pc),a2       	| [$a66d: ld   ix,walk_frames_list_AA3B]

	move.l	a0,-(sp)                        	| [$a671: push hl]
	jbsr	check_hl_in_ix_list_B009          	| [$a672: call check_hl_in_ix_list_B009]
	move.l	(sp)+,a0                        	| [$a675: pop  hl]
	tst.b	d0                               	| [$a676: and  a]
	move.b	#0x01,d0                        	| [$a677: ld   a,$01]
	jne	move_found_A6D3                    	| [$a679: jp   nz,move_found_A6D3]
	lea	crouch_frame_list_AAB3(pc),a2      	| [$a67c: ld   ix,crouch_frame_list_AAB3] load a table, there are 7 tables like this

	move.l	a0,-(sp)                        	| [$a680: push hl]
	jbsr	check_hl_in_ix_list_B009          	| [$a681: call check_hl_in_ix_list_B009]
	move.l	(sp)+,a0                        	| [$a684: pop  hl]
	tst.b	d0                               	| [$a685: and  a]
	move.b	#0x04,d0                        	| [$a686: ld   a,$04]
	jne	move_found_A6D3                    	| [$a688: jp   nz,move_found_A6D3]
	lea	jump_frames_list_AA4D(pc),a2       	| [$a68b: ld   ix,jump_frames_list_AA4D]

	move.l	a0,-(sp)                        	| [$a68f: push hl]
	jbsr	check_hl_in_ix_list_B009          	| [$a690: call check_hl_in_ix_list_B009]
	move.l	(sp)+,a0                        	| [$a693: pop  hl]
	tst.b	d0                               	| [$a694: and  a]
	move.b	#0x05,d0                        	| [$a695: ld   a,$05]
	jne	move_found_A6D3                    	| [$a697: jp   nz,move_found_A6D3]
	lea	forward_sommersault_frame_list_AA95(pc),a2	| [$a69a: ld   ix,forward_sommersault_frame_list_AA95]

	move.l	a0,-(sp)                        	| [$a69e: push hl]
	jbsr	check_hl_in_ix_list_B009          	| [$a69f: call check_hl_in_ix_list_B009]
	move.l	(sp)+,a0                        	| [$a6a2: pop  hl]
	tst.b	d0                               	| [$a6a3: and  a]
	move.b	#0x06,d0                        	| [$a6a4: ld   a,$06] during forward sommersault (not at start)
	jne	move_found_A6D3                    	| [$a6a6: jp   nz,move_found_A6D3]
	lea	backwards_sommersault_frame_list_AAA5(pc),a2	| [$a6a9: ld   ix,backwards_sommersault_frame_list_AAA5]
	jbsr	check_hl_in_ix_list_B009          	| [$a6ad: call check_hl_in_ix_list_B009]
	tst.b	d0                               	| [$a6b0: and  a]
	move.b	#0x07,d0                        	| [$a6b1: ld   a,$07] during backwards sommersault (not at start)
	jne	move_found_A6D3                    	| [$a6b3: jp   nz,move_found_A6D3]
	jbsr	opponent_starting_frontal_attack_AADC	| [$a6b6: call opponent_starting_frontal_attack_AADC]
	tst.b	d0                               	| [$a6b9: and  a]
	move.b	#0x02,d0                        	| [$a6ba: ld   a,$02] frontal attack (very large move list!)
	jne	move_found_A6D3                    	| [$a6bc: jp   nz,move_found_A6D3]
	jbsr	opponent_starting_rear_attack_AAE7	| [$a6bf: call opponent_starting_rear_attack_AAE7]
	tst.b	d0                               	| [$a6c2: and  a]
	move.b	#0x03,d0                        	| [$a6c3: ld   a,$03]
	jne	move_found_A6D3                    	| [$a6c5: jp   nz,move_found_A6D3]
	jbsr	opponent_starting_a_sommersault_AB12	| [$a6c8: call opponent_starting_a_sommersault_AB12]
	tst.b	d0                               	| [$a6cb: and  a]
	move.b	#0x08,d0                        	| [$a6cc: ld   a,$08]
	jne	move_found_A6D3                    	| [$a6ce: jp   nz,move_found_A6D3]
	move.b	#0x09,d0                        	| [$a6d1: ld   a,$09]
move_found_A6D3:
	rts

* move forward with a special case
cpu_move_forward_towards_enemy_far_away_A6D4:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a6d4: ld   hl,(address_of_current_player_move_byte_CF04)]
* here writes to C26B (if player 2 CPU) to tell CPU to walk forward
* hl = C26B
	move.b	#0x02,(a0)                      	| [$a6d7: ld   (hl),$02] move forward
* iy=$C220
* C22D is roughly minus opponent x (CPL which inverts bits, performed at A47C)
* it actually is done to get 256-opponent x
	move.b	(0x0d,a3),d0                    	| [$a6d9: ld   a,(iy+$0d)]
	cmp.b	(0x09,a3),d0                     	| [$a6dc: cp   (iy+$09)] opponent x
	jcc	l_a6e4                             	| [$a6df: jp   nc,$A6E4]
* turn back if player is on the right (almost) half of the screen (difficult
* to achieve when both players are far away. Possible with well
* timed sommersaults)
	move.b	#0x07,(a0)                      	| [$a6e2: ld   (hl),$07]
l_a6e4:
	jra	cpu_move_done_A410                 	| [$a6e4: jp   cpu_move_done_A410]

* simplest & dumbest move forward
cpu_move_forward_towards_enemy_A6E7:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a6e7: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x02,(a0)                      	| [$a6ea: ld   (hl),$02]
	jra	cpu_move_done_A410                 	| [$a6ec: jp   cpu_move_done_A410]

* move if not facing, stop if facing
cpu_forward_or_stop_if_facing_A6EF:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a6ef: ld   hl,(address_of_current_player_move_byte_CF04)]
	clr.b	(a0)                             	| [$a6f2: ld   (hl),$00] stop
	btst.b	#7,(0x0f,a2)                    	| [$a6f4: bit  7,(ix+$0f)] are players facing or back to back
	jeq	l_a6fd                             	| [$a6f8: jp   z,$A6FD] facing
* back to back: move
	move.b	#0x02,(a0)                      	| [$a6fb: ld   (hl),$02]
l_a6fd:
	jra	cpu_move_done_A410                 	| [$a6fd: jp   cpu_move_done_A410]

* move if facing, stop if not facing
cpu_forward_or_stop_if_not_facing_A700:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a700: ld   hl,(address_of_current_player_move_byte_CF04)]
	clr.b	(a0)                             	| [$a703: ld   (hl),$00]
	btst.b	#7,(0x0f,a3)                    	| [$a705: bit  7,(iy+$0f)]
	jne	l_a70e                             	| [$a709: jp   nz,$A70E]
	move.b	#0x02,(a0)                      	| [$a70c: ld   (hl),$02]
l_a70e:
	jra	cpu_move_done_A410                 	| [$a70e: jp   cpu_move_done_A410]

	jra	cpu_move_forward_towards_enemy_A6E7	| [$a711: jp   cpu_move_forward_towards_enemy_A6E7]
	jra	cpu_move_forward_towards_enemy_A6E7	| [$a714: jp   cpu_move_forward_towards_enemy_A6E7]
	jra	cpu_forward_or_backward_depending_on_facing_A7D5	| [$a717: jp   cpu_forward_or_backward_depending_on_facing_A7D5]
	jra	cpu_backward_or_forward_depending_on_facing_A7E6	| [$a71a: jp   cpu_backward_or_forward_depending_on_facing_A7E6]
* send "walk forward", exactly the same as A6E7
cpu_move_forward_towards_enemy_A71D:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a71d: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x02,(a0)                      	| [$a720: ld   (hl),$02]
	jra	cpu_move_done_A410                 	| [$a722: jp   cpu_move_done_A410]

* called by a jp (hl) when distance between players is "medium" (C26C 0 -> 1)
attack_once_out_of_16_frames_else_walk_A725:
	move.b	periodic_counter_16bit_C02E,d0  	| [$a725: ld   a,(periodic_counter_16bit_C02E)]
	and.b	#0x0F,d0                         	| [$a728: and  $0F]
* periodic counter: decide an attack each 1/4s roughly
* (actually if reaches that point with the counter aligned on 16, not
* sure if it's each 1/4s)
	jne	l_a734                             	| [$a72a: jp   nz,$A734]
	jbsr	select_cpu_attack_AB2E            	| [$a72d: call select_cpu_attack_AB2E]
	tst.b	d0                               	| [$a730: and  a]
	jne	l_a73c                             	| [$a731: jp   nz,$A73C] a != 0 => attacked: always true
* returns 0: just walk, don't attack. Only reaches here because periodic
* counter is not a multiple of 16 (0x10)
l_a734:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a734: ld   hl,(address_of_current_player_move_byte_CF04)]
* just send walk forward order to CPU
	move.b	#0x02,(a0)                      	| [$a737: ld   (hl),$02]
	jra	cpu_move_done_A410                 	| [$a739: jp   cpu_move_done_A410]

l_a73c:
	jra	cpu_move_done_opponent_can_react_A3E4	| [$a73c: jp   cpu_move_done_opponent_can_react_A3E4]

* if not facing, either attack or walk forward (50% chance each)
* if facing, react to low attack by walking forward/backwards or jump
cpu_avoids_low_attack_if_facing_else_maybe_attacks_A73F:
	btst.b	#7,(0x0f,a3)                    	| [$a73f: bit  7,(iy+$0f)]
	jeq	l_a75d                             	| [$a743: jp   z,$A75D]
* not facing each other
	move.b	periodic_counter_16bit_C02E,d0  	| [$a746: ld   a,(periodic_counter_16bit_C02E)]
	and.b	#0x01,d0                         	| [$a749: and  $01]
* 50% chance attack
	jeq	l_a755                             	| [$a74b: jp   z,$A755]
	jbsr	select_cpu_attack_AB2E            	| [$a74e: call select_cpu_attack_AB2E]
	tst.b	d0                               	| [$a751: and  a]
	jne	l_a783                             	| [$a752: jp   nz,$A783] always true
* just walk, don't attack, one time out of 2
l_a755:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a755: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x02,(a0)                      	| [$a758: ld   (hl),$02]
	jra	l_a780                             	| [$a75a: jp   $A780] cpu_move_done_A410

* facing each other
l_a75d:
	jbsr	opponent_starting_low_kick_AB08   	| [$a75d: call opponent_starting_low_kick_AB08]
	tst.b	d0                               	| [$a760: and  a]
	jeq	l_a76c                             	| [$a761: jp   z,$A76C]
* low kick: just walk
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a764: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x02,(a0)                      	| [$a767: ld   (hl),$02]
	jra	l_a780                             	| [$a769: jp   $A780]
* react to foot sweep
l_a76c:
	jbsr	opponent_starting_low_attack_AAFD 	| [$a76c: call opponent_starting_low_attack_AAFD]
	tst.b	d0                               	| [$a76f: and  a]
	jeq	l_a77b                             	| [$a770: jp   z,$A77B]
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a773: ld   hl,(address_of_current_player_move_byte_CF04)]
* evasive jump up
	move.b	#0x03,(a0)                      	| [$a776: ld   (hl),$03]
	jra	l_a780                             	| [$a778: jp   $A780]
* move back / block possible attack
l_a77b:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a77b: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x01,(a0)                      	| [$a77e: ld   (hl),$01]

l_a780:
	jra	cpu_move_done_A410                 	| [$a780: jp   cpu_move_done_A410]
l_a783:
	jra	cpu_move_done_opponent_can_react_A3E4	| [$a783: jp   cpu_move_done_opponent_can_react_A3E4]

cpu_maybe_attacks_if_facing_else_avoids_low_attack_A786:
	btst.b	#7,(0x0f,a3)                    	| [$a786: bit  7,(iy+$0f)]
	jne	l_a7a4                             	| [$a78a: jp   nz,$A7A4]
* facing each other
	move.b	periodic_counter_16bit_C02E,d0  	| [$a78d: ld   a,(periodic_counter_16bit_C02E)]
* 50% chance, (but by checking bit 1, so not the same value as below)
	btst.b	#1,d0                           	| [$a790: bit  1,a]
	jeq	l_a79c                             	| [$a792: jp   z,$A79C]
	jbsr	select_cpu_attack_AB2E            	| [$a795: call select_cpu_attack_AB2E]
	tst.b	d0                               	| [$a798: and  a]
	jne	l_a7c2                             	| [$a799: jp   nz,$A7C2] always true
* just walk, don't attack
l_a79c:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a79c: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x02,(a0)                      	| [$a79f: ld   (hl),$02]
	jra	l_a7bf                             	| [$a7a1: jp   $A7BF]
* not facing each other: if low attack, 50% chance of jump,
* 50% ; move back / block possible attack

l_a7a4:
	jbsr	opponent_starting_low_attack_AAFD 	| [$a7a4: call opponent_starting_low_attack_AAFD]
	jeq	l_a7ba                             	| [$a7a7: jp   z,$A7BA]
	move.b	periodic_counter_16bit_C02E,d0  	| [$a7aa: ld   a,(periodic_counter_16bit_C02E)]
	btst.b	#0,d0                           	| [$a7ad: bit  0,a] 50% chance
	jne	l_a7ba                             	| [$a7af: jp   nz,$A7BA]
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a7b2: ld   hl,(address_of_current_player_move_byte_CF04)]
* 50% chance evasive jump
	move.b	#0x03,(a0)                      	| [$a7b5: ld   (hl),$03]
	jra	l_a7bf                             	| [$a7b7: jp   $A7BF]
* move back / block possible attack
l_a7ba:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a7ba: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x01,(a0)                      	| [$a7bd: ld   (hl),$01]
l_a7bf:
	jra	cpu_move_done_A410                 	| [$a7bf: jp   cpu_move_done_A410]
l_a7c2:
	jra	cpu_move_done_opponent_can_react_A3E4	| [$a7c2: jp   cpu_move_done_opponent_can_react_A3E4]

just_walk_A7C5:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a7c5: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x02,(a0)                      	| [$a7c8: ld   (hl),$02]
	jra	cpu_move_done_A410                 	| [$a7ca: jp   cpu_move_done_A410]

just_walk_A7CD:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a7cd: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x02,(a0)                      	| [$a7d0: ld   (hl),$02]
	jra	cpu_move_done_A410                 	| [$a7d2: jp   cpu_move_done_A410]

* move forward, except if back to back in which case
* move back / block possible attack
cpu_forward_or_backward_depending_on_facing_A7D5:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a7d5: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x02,(a0)                      	| [$a7d8: ld   (hl),$02]
	btst.b	#7,(0x0f,a3)                    	| [$a7da: bit  7,(iy+$0f)]
	jne	l_a7e3                             	| [$a7de: jp   nz,$A7E3]
	move.b	#0x01,(a0)                      	| [$a7e1: ld   (hl),$01]
l_a7e3:
	jra	cpu_move_done_A410                 	| [$a7e3: jp   cpu_move_done_A410]

* move backwards/block, except if back to back in which case move forwards
cpu_backward_or_forward_depending_on_facing_A7E6:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a7e6: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x02,(a0)                      	| [$a7e9: ld   (hl),$02]
	btst.b	#7,(0x0f,a3)                    	| [$a7eb: bit  7,(iy+$0f)]
	jeq	l_a7f4                             	| [$a7ef: jp   z,$A7F4]
	move.b	#0x01,(a0)                      	| [$a7f2: ld   (hl),$01]
l_a7f4:
	jra	cpu_move_done_A410                 	| [$a7f4: jp   cpu_move_done_A410]

	jra	attack_once_out_of_16_frames_else_walk_A725	| [$a7f7: jp   attack_once_out_of_16_frames_else_walk_A725]

* dumb move forward, same code exactly as A6E7
cpu_move_forward_towards_enemy_A7FA:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a7fa: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x02,(a0)                      	| [$a7fd: ld   (hl),$02]
	jra	cpu_move_done_A410                 	| [$a7ff: jp   cpu_move_done_A410]

* pick an attack
pick_cpu_attack_A802:
	jbsr	select_cpu_attack_AB2E            	| [$a802: call select_cpu_attack_AB2E]
	tst.b	d0                               	| [$a805: and  a]
	bne.b	0f
	jbsr	display_error_text_B075           	| [$a806: call z,display_error_text_B075] never called a != 0 always!
0:
	jra	cpu_move_done_opponent_can_react_A3E4	| [$a809: jp   cpu_move_done_opponent_can_react_A3E4]

cpu_reacts_to_low_attack_if_facing_else_attacks_A80C:
	btst.b	#7,(0x0f,a3)                    	| [$a80c: bit  7,(iy+$0f)] => C20F
	jne	l_a84e                             	| [$a810: jp   nz,$A84E] jumps if not facing each other
* players facing each other
	jbsr	opponent_starting_low_kick_AB08   	| [$a813: call opponent_starting_low_kick_AB08]
	tst.b	d0                               	| [$a816: and  a]
	jeq	l_a821                             	| [$a817: jp   z,$A821]
* opponent starting low kick: react with jumping side kick
	jbsr	perform_jumping_side_kick_if_level_2_AB88	| [$a81a: call perform_jumping_side_kick_if_level_2_AB88]
	tst.b	d0                               	| [$a81d: and  a]
	jne	l_a855                             	| [$a81e: jp   nz,$A855]
* low difficulty level or no low kick, check if starting low kick or foot sweep
l_a821:
	jbsr	opponent_starting_low_attack_AAFD 	| [$a821: call opponent_starting_low_attack_AAFD]
	tst.b	d0                               	| [$a824: and  a]
	jeq	l_a838                             	| [$a825: jp   z,$A838]
* react to foot sweep/low kick
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a828: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x03,(a0)                      	| [$a82b: ld   (hl),$03] evasive jump
	move.b	periodic_counter_16bit_C02E,d0  	| [$a82d: ld   a,(periodic_counter_16bit_C02E)]
	and.b	#0x03,d0                         	| [$a830: and  $03]
	jeq	l_a858                             	| [$a832: jp   z,$A858]
	jra	l_a846                             	| [$a835: jp   $A846]
l_a838:
	jbsr	opponent_starting_high_attack_AAF2	| [$a838: call opponent_starting_high_attack_AAF2]
	tst.b	d0                               	| [$a83b: and  a]
	jeq	l_a846                             	| [$a83c: jp   z,$A846]
	jbsr	perform_foot_sweep_if_level_3_AB99	| [$a83f: call perform_foot_sweep_if_level_3_AB99]
	tst.b	d0                               	| [$a842: and  a]
	jne	l_a855                             	| [$a843: jp   nz,$A855]
l_a846:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a846: ld   hl,(address_of_current_player_move_byte_CF04)]
* move back / block possible attack
	move.b	#0x01,(a0)                      	| [$a849: ld   (hl),$01]
	jra	l_a855                             	| [$a84b: jp   $A855] and opponent has some time to react...

* routine duplicated a lot... pick an attack fails if 0 (which never happens)
l_a84e:
	jbsr	select_cpu_attack_AB2E            	| [$a84e: call select_cpu_attack_AB2E]
	tst.b	d0                               	| [$a851: and  a]
	bne.b	0f
	jbsr	display_error_text_B075           	| [$a852: call z,display_error_text_B075]
0:
l_a855:
	jra	cpu_move_done_opponent_can_react_A3E4	| [$a855: jp   cpu_move_done_opponent_can_react_A3E4]

l_a858:
	jra	cpu_move_done_A410                 	| [$a858: jp   cpu_move_done_A410]

* if not facing, check if low attack: if low attack jump or move back/block (50%)
*                 if not low attack, then perform foot sweep if level >=3 else back
* if facing, select an attack
cpu_react_to_low_attack_or_perform_attack_A85B:
	btst.b	#7,(0x0f,a3)                    	| [$a85b: bit  7,(iy+$0f)]
	jeq	l_a886                             	| [$a85f: jp   z,$A886]
* not facing each other
	jbsr	opponent_starting_low_attack_AAFD 	| [$a862: call opponent_starting_low_attack_AAFD]
	tst.b	d0                               	| [$a865: and  a]
	jeq	l_a87b                             	| [$a866: jp   z,$A87B]
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a869: ld   hl,(address_of_current_player_move_byte_CF04)]
* avoid low attack by jump 50% of the time
	move.b	#0x03,(a0)                      	| [$a86c: ld   (hl),$03]
	move.b	periodic_counter_16bit_C02E,d0  	| [$a86e: ld   a,(periodic_counter_16bit_C02E)]
	btst.b	#0,d0                           	| [$a871: bit  0,a]
	jne	l_a890                             	| [$a873: jp   nz,$A890]
* else move back/block if player attacks
	move.b	#0x01,(a0)                      	| [$a876: ld   (hl),$01]
	jra	l_a88d                             	| [$a878: jp   $A88D]
* not starting low attack:
* move back/block unless skill level >= 3 in which case attacks with foot sweep
l_a87b:
	jbsr	perform_foot_sweep_if_level_3_AB99	| [$a87b: call perform_foot_sweep_if_level_3_AB99]
	jne	l_a88d                             	| [$a87e: jp   nz,$A88D]
* move back/block
	move.b	#0x01,(a0)                      	| [$a881: ld   (hl),$01]
	jra	l_a88d                             	| [$a883: jp   $A88D]

* facing each other... pick an attack
l_a886:
	jbsr	select_cpu_attack_AB2E            	| [$a886: call select_cpu_attack_AB2E]
	bne.b	0f
	jbsr	display_error_text_B075           	| [$abf9: call nz,display_error_text_B075]
0:
l_a88d:
	jra	cpu_move_done_opponent_can_react_A3E4	| [$a88d: jp   cpu_move_done_opponent_can_react_A3E4]

l_a890:
	jra	cpu_move_done_A410                 	| [$a890: jp   cpu_move_done_A410]

cpu_small_chance_of_low_kick_else_walk_A893:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a893: ld   hl,(address_of_current_player_move_byte_CF04)]
* decide a low kick once out of 8 ticks (12% chance of low kick)
	move.b	#0x14,(a0)                      	| [$a896: ld   (hl),$14]
	move.b	periodic_counter_16bit_C02E,d0  	| [$a898: ld   a,(periodic_counter_16bit_C02E)]
	and.b	#0x07,d0                         	| [$a89b: and  $07]
	jeq	l_a8a5                             	| [$a89d: jp   z,$A8A5]
* just walk
	move.b	#0x02,(a0)                      	| [$a8a0: ld   (hl),$02]
	jra	cpu_move_done_A410                 	| [$a8a2: jp   cpu_move_done_A410]

l_a8a5:
	jra	cpu_move_done_opponent_can_react_A3E4	| [$a8a5: jp   cpu_move_done_opponent_can_react_A3E4]

	jra	pick_cpu_attack_A802               	| [$a8a8: jp   pick_cpu_attack_A802]

high_attack_if_forward_sommersault_or_walk_A8AB:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a8ab: ld   hl,(address_of_current_player_move_byte_CF04)]
	btst.b	#7,(0x0f,a3)                    	| [$a8ae: bit  7,(iy+$0f)]
	jne	l_a8cf                             	| [$a8b2: jp   nz,$A8CF]
* not turning backs to each other

	move.l	a0,-(sp)                        	| [$a8b5: push hl]
	lea	forward_sommersault_frame_list_end_AA9B(pc),a2	| [$a8b6: ld   ix,forward_sommersault_frame_list_end_AA9B]
	move.b	(0x0b,a3),d6                    	| [$a8ba: ld   l,(iy+$0b)]
	move.b	(0x0c,a3),d5                    	| [$a8bd: ld   h,(iy+$0c)]
	bclr.b	#7,d5                           	| [$a8c0: res  7,h]
	jbsr	check_hl_in_ix_list_B009          	| [$a8c2: call check_hl_in_ix_list_B009]
	tst.b	d0                               	| [$a8c5: and  a]
	move.l	(sp)+,a0                        	| [$a8c6: pop  hl]
	jne	l_a8cf                             	| [$a8c7: jp   nz,$A8CF] end of forward sommersault: attack
* just walk forward
	move.b	#0x02,(a0)                      	| [$a8ca: ld   (hl),$02]
	jra	l_a8e5                             	| [$a8cc: jp   $A8E5]
* odds: lunge (0 - 25%), jumping kick (2,3 - 50%), round kick (1 - 25%)
l_a8cf:
	move.b	periodic_counter_16bit_C02E,d0  	| [$a8cf: ld   a,(periodic_counter_16bit_C02E)]
	move.b	#0x10,(a0)                      	| [$a8d2: ld   (hl),$10] rear+up lunge punch
	and.b	#0x03,d0                         	| [$a8d4: and  $03]
	jeq	l_a8e2                             	| [$a8d6: jp   z,$A8E2]
	move.b	#0x0D,(a0)                      	| [$a8d9: ld   (hl),$0D] rather a jumping side kick
	cmp.b	#0x01,d0                         	| [$a8db: cp   $01]
	jeq	l_a8e2                             	| [$a8dd: jp   z,$A8E2]
	move.b	#0x0F,(a0)                      	| [$a8e0: ld   (hl),$0F] rather a round kick
l_a8e2:
	jra	cpu_move_done_A410                 	| [$a8e2: jp   cpu_move_done_A410]

l_a8e5:
	jra	cpu_move_done_A410                 	| [$a8e5: jp   cpu_move_done_A410]

move_fwd_or_bwd_checking_sommersault_and_dir_A8E8:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a8e8: ld   hl,(address_of_current_player_move_byte_CF04)]
	btst.b	#7,(0x0f,a3)                    	| [$a8eb: bit  7,(iy+$0f)]
	jeq	l_a90c                             	| [$a8ef: jp   z,$A90C] not turning back to each other: goto "move back/block"

	move.l	a0,-(sp)                        	| [$a8f2: push hl]
* check if opponent is performing sommersault (back) while
* turning backs to each other
	lea	backwards_sommersault_frame_list_end_AAA9(pc),a2	| [$a8f3: ld   ix,backwards_sommersault_frame_list_end_AAA9]
	move.b	(0x0b,a3),d6                    	| [$a8f7: ld   l,(iy+$0b)]
	move.b	(0x0c,a3),d5                    	| [$a8fa: ld   h,(iy+$0c)]
	bclr.b	#7,d5                           	| [$a8fd: res  7,h]
	jbsr	check_hl_in_ix_list_B009          	| [$a8ff: call check_hl_in_ix_list_B009]
	tst.b	d0                               	| [$a902: and  a]
	move.l	(sp)+,a0                        	| [$a903: pop  hl]
	jne	l_a90c                             	| [$a904: jp   nz,$A90C]
* not performing sommersault: move forward
	move.b	#0x02,(a0)                      	| [$a907: ld   (hl),$02] move forward
	jra	l_a90e                             	| [$a909: jp   $A90E]
* opponent is performing back sommersault when same facing
* direction: move back to avoid being a target to rear attack when opponent lands
l_a90c:
	move.b	#0x01,(a0)                      	| [$a90c: ld   (hl),$01] move back
l_a90e:
	jra	cpu_move_done_A410                 	| [$a90e: jp   cpu_move_done_A410]

	*jra	pick_cpu_attack_A802               	| [$a911: jp   pick_cpu_attack_A802]
	*jra	pick_cpu_attack_A802               	| [$a914: jp   pick_cpu_attack_A802]

get_out_of_edge_or_low_kick_A917:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a917: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x14,(a0)                      	| [$a91a: ld   (hl),$14] low kick
	move.b	(0x09,a3),d0                    	| [$a91c: ld   a,(iy+$09)] opponent x
	cmp.b	#0x30,d0                         	| [$a91f: cp   $30] if opponent almost completely on the left, don't attack, perform sommersault
	jcc	l_a929                             	| [$a921: jp   nc,$A929]
	move.b	#0x17,(a0)                      	| [$a924: ld   (hl),$17] sommersault
	jra	cpu_move_done_A410                 	| [$a926: jp   cpu_move_done_A410] immediate (it's not an attack)
l_a929:
	jra	cpu_move_done_opponent_can_react_A3E4	| [$a929: jp   cpu_move_done_opponent_can_react_A3E4] opponent can react to low kick


	*jra	cpu_reacts_to_low_attack_if_facing_else_attacks_A80C	| [$a92f: jp   cpu_reacts_to_low_attack_if_facing_else_attacks_A80C]
	*jra	front_kick_or_fwd_sommersault_to_recenter_A94E	| [$a932: jp   front_kick_or_fwd_sommersault_to_recenter_A94E]

perform_low_kick_A935:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a935: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x14,(a0)                      	| [$a938: ld   (hl),$14]
	jra	cpu_move_done_opponent_can_react_A3E4	| [$a93a: jp   cpu_move_done_opponent_can_react_A3E4]

	*jra	front_kick_or_fwd_sommersault_to_recenter_A94E	| [$a93d: jp   front_kick_or_fwd_sommersault_to_recenter_A94E]

	*jra	high_attack_if_forward_sommersault_or_walk_A8AB	| [$a940: jp   high_attack_if_forward_sommersault_or_walk_A8AB]

	*jra	move_fwd_or_bwd_checking_sommersault_and_dir_A8E8	| [$a943: jp   move_fwd_or_bwd_checking_sommersault_and_dir_A8E8]

perform_walk_back_A946:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a946: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x01,(a0)                      	| [$a949: ld   (hl),$01]
	jra	cpu_move_done_A410                 	| [$a94b: jp   cpu_move_done_A410]

front_kick_or_fwd_sommersault_to_recenter_A94E:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a94e: ld   hl,(address_of_current_player_move_byte_CF04)]
* front kick
	move.b	#0x0A,(a0)                      	| [$a951: ld   (hl),$0A]
	move.b	(0x09,a3),d0                    	| [$a953: ld   a,(iy+$09)] C209: white player x coordinate
	cmp.b	#0x30,d0                         	| [$a956: cp   $30] far left?
	jcc	l_a960                             	| [$a958: jp   nc,$A960]
* front sommersault if player x < $30 to get outside the border
	move.b	#0x17,(a0)                      	| [$a95b: ld   (hl),$17]
	jra	cpu_move_done_A410                 	| [$a95d: jp   cpu_move_done_A410]
l_a960:
	jra	cpu_move_done_opponent_can_react_A3E4	| [$a960: jp   cpu_move_done_opponent_can_react_A3E4]

cpu_move_turn_around_A966:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a966: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x07,(a0)                      	| [$a969: ld   (hl),$07] turn around
	jra	cpu_move_done_A410                 	| [$a96b: jp   cpu_move_done_A410]

pick_cpu_attack_A96E:
	jbsr	select_cpu_attack_AB2E            	| [$a96e: call select_cpu_attack_AB2E]
*A971: A7          and  a
*A972: C2 D7 A3    jp   nz,$A97D   always true
* not reached so commented
*A975: 2A 04 6F    ld   hl,(address_of_current_player_move_byte_CF04)
*A978: 36 0D       ld   (hl),$07		; turn around
*A97A: C3 10 A4    jp   cpu_move_done_A410

	jra	cpu_move_done_opponent_can_react_A3E4	| [$a97d: jp   cpu_move_done_opponent_can_react_A3E4]


cpu_complex_reaction_to_front_attack_A980:
	btst.b	#7,(0x0f,a3)                    	| [$a980: bit  7,(iy+$0f)]
	jne	l_a9bb                             	| [$a984: jp   nz,$A9BB]
* facing opponent, who is turning its back to cpu
* (this routine is only called from distance 07 or 87)
* it probably doesn't end up here very frequently (or never)
* I played a lot and I never ended up there...
	jbsr	opponent_starting_low_kick_AB08   	| [$a987: call opponent_starting_low_kick_AB08]
	tst.b	d0                               	| [$a98a: and  a]
	jeq	l_a995                             	| [$a98b: jp   z,$A995]
* react to low kick by jumping back kick if facing
* (but, but... opponent is turning its back..., why????)
* the low kick, after that, cpu is turned the wrong way)
	jbsr	perform_jumping_back_kick_ABAA    	| [$a98e: call perform_jumping_back_kick_ABAA]
	tst.b	d0                               	| [$a991: and  a]
	jne	l_a9d3                             	| [$a992: jp   nz,$A9D3] always true
l_a995:
	jbsr	opponent_starting_low_attack_AAFD 	| [$a995: call opponent_starting_low_attack_AAFD]
	tst.b	d0                               	| [$a998: and  a]
	jeq	l_a9ac                             	| [$a999: jp   z,$A9AC]
* opponent is starting low attack
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a99c: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x03,(a0)                      	| [$a99f: ld   (hl),$03] jump to avoid low attack
	move.b	periodic_counter_16bit_C02E,d0  	| [$a9a1: ld   a,(periodic_counter_16bit_C02E)]
	and.b	#0x03,d0                         	| [$a9a4: and  $03]
	jeq	l_a9d0                             	| [$a9a6: jp   z,$A9D0] 25% chance: jump to avoid low attack
	jra	l_a9c1                             	| [$a9a9: jp   $A9C1] 75% chance: turn back (and maybe get hit)
l_a9ac:
	jbsr	opponent_starting_high_attack_AAF2	| [$a9ac: call opponent_starting_high_attack_AAF2]
	jeq	l_a9c1                             	| [$a9af: jp   z,$A9C1]
* react to high attack by foot sweep, back (has a chance to land)
	jbsr	perform_foot_sweep_back_ABBB      	| [$a9b2: call perform_foot_sweep_back_ABBB]
	jne	l_a9d3                             	| [$a9b5: jp   nz,$A9D3] always true: end move
	jra	l_a9c1                             	| [$a9b8: jp   $A9C1]
* back to back (not facing, but this routine is only used
* with distance $87 so computer is turning its back too)
* it happens sometimes, but opponent has to perform some frontal
* attack that cannot connect, like low kick...
l_a9bb:
	jbsr	select_cpu_attack_AB2E            	| [$a9bb: call select_cpu_attack_AB2E]
	jne	l_a9d3                             	| [$a9be: jp   nz,$A9D3]
l_a9c1:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a9c1: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x07,(a0)                      	| [$a9c4: ld   (hl),$07]
	move.b	periodic_counter_16bit_C02E,d0  	| [$a9c6: ld   a,(periodic_counter_16bit_C02E)]
	btst.b	#0,d0                           	| [$a9c9: bit  0,a]
	jeq	l_a9d0                             	| [$a9cb: jp   z,$A9D0]
* turn back or walk forward (50% chance)
	move.b	#0x02,(a0)                      	| [$a9ce: ld   (hl),$02]
l_a9d0:
	jra	cpu_move_done_A410                 	| [$a9d0: jp   cpu_move_done_A410]
l_a9d3:
	jra	cpu_move_done_opponent_can_react_A3E4	| [$a9d3: jp   cpu_move_done_opponent_can_react_A3E4]


cpu_complex_reaction_to_rear_attack_A9D6:
	btst.b	#7,(0x0f,a3)                    	| [$a9d6: bit  7,(iy+$0f)]
	jeq	pick_cpu_attack_A9FE               	| [$a9da: jp   z,pick_cpu_attack_A9FE]
	jbsr	opponent_starting_low_attack_AAFD 	| [$a9dd: call opponent_starting_low_attack_AAFD]
	tst.b	d0                               	| [$a9e0: and  a]
	jeq	l_a9f4                             	| [$a9e1: jp   z,$A9F4]
* starting low attack: jump to avoid it (75% chance)
* or turn back (25% chance)
	jbsr   load_address_of_current_player_move_byte_CF04	| [$a9e4: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x03,(a0)                      	| [$a9e7: ld   (hl),$03]
	move.b	periodic_counter_16bit_C02E,d0  	| [$a9e9: ld   a,(periodic_counter_16bit_C02E)]
	and.b	#0x03,d0                         	| [$a9ec: and  $03]
	jeq	l_aa0a                             	| [$a9ee: jp   z,$AA0A]
	jra	l_aa05                             	| [$a9f1: jp   $AA05]
* not starting low attack: perform foot sweep
l_a9f4:
	jbsr	perform_foot_sweep_back_ABBB      	| [$a9f4: call perform_foot_sweep_back_ABBB]
	tst.b	d0                               	| [$a9f7: and  a]
	jne	l_aa0d                             	| [$a9f8: jp   nz,$AA0D] always true
	jra	l_aa05                             	| [$a9fb: jp   $AA05] never reached
* facing each other: pick an attack
pick_cpu_attack_A9FE:
	jbsr	select_cpu_attack_AB2E            	| [$a9fe: call select_cpu_attack_AB2E]
	tst.b	d0                               	| [$aa01: and  a]
	jne	l_aa0d                             	| [$aa02: jp   nz,$AA0D]
* turn back
l_aa05:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$aa05: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x07,(a0)                      	| [$aa08: ld   (hl),$07]
l_aa0a:
	jra	cpu_move_done_A410                 	| [$aa0a: jp   cpu_move_done_A410]
l_aa0d:
	jra	cpu_move_done_opponent_can_react_A3E4	| [$aa0d: jp   cpu_move_done_opponent_can_react_A3E4]

foot_sweep_back_AA10:
	jbsr	perform_foot_sweep_back_ABBB      	| [$aa10: call perform_foot_sweep_back_ABBB]
*AA13: A7          and  a
*AA14: C2 1F AA    jp   nz,$AA1F	; always true
*AA17: 2A 04 6F    ld   hl,(address_of_current_player_move_byte_CF04)
*AA1A: 36 0D       ld   (hl),$07
*AA1C: C3 10 A4    jp   cpu_move_done_A410
	jra	cpu_move_done_opponent_can_react_A3E4	| [$aa1f: jp   cpu_move_done_opponent_can_react_A3E4]
	jra	pick_cpu_attack_A96E               	| [$aa22: jp   pick_cpu_attack_A96E]

cpu_turn_back_AA25:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$aa25: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x07,(a0)                      	| [$aa28: ld   (hl),$07]
	jra	cpu_move_done_A410                 	| [$aa2a: jp   cpu_move_done_A410]

	jra	pick_cpu_attack_A96E               	| [$aa2d: jp   pick_cpu_attack_A96E]
	jra	pick_cpu_attack_A96E               	| [$aa30: jp   pick_cpu_attack_A96E]

cpu_turn_back_AA33:
	jbsr   load_address_of_current_player_move_byte_CF04	| [$aa33: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x07,(a0)                      	| [$aa36: ld   (hl),$07]
	jra	cpu_move_done_A410                 	| [$aa38: jp   cpu_move_done_A410]



* collection of tables exploited by B009 at various points of the A.I. code
* probably specific animation frames of techniques so the computer
* can counter attack / react on them
*
* for example 890A (0A89 first item of the first list) is: stand guard facing left
* facing right this would be 8A89
* 8B22 would be the value in C22B if player starts a jump (joy up) facing right

walk_frames_list_AA3B:
	dc.b	0x89,0x0a,0x92,0x0a,0x9b,0x0a,0xa4,0x0a | walk_frames_list_AA3B
	dc.b	0xad,0x0a,0xb6,0x0a,0xbf,0x0a,0xc8,0x0a | $aa43
	dc.b	0xff,0xff | $aa4b
jump_frames_list_AA4D:
	dc.b	0x22,0x0b,0x8e,0x0b,0x97,0x0b,0xa0,0x0b | jump_frames_list_AA4D
	dc.b	0xa9,0x0b,0xb2,0x0b,0xbb,0x0b,0xc4,0x0b | $aa55
	dc.b	0xcd,0x0b,0xd6,0x0b,0xdf,0x0b,0xe8,0x0b | $aa5d
	dc.b	0xf1,0x0b,0xfa,0x0b,0x73,0x0b,0xff,0xff | $aa65
 * frames where the blow reaches its end/is full blown (including jumping side kick...)
hitting_frame_list_AA6D:
	dc.b	0xc0,0x0c,0xd2,0x0c,0x47,0x0d,0xd7,0x0d | hitting_frame_list_AA6D
	dc.b	0x4c,0x0e,0xaf,0x0e,0x1b,0x0f,0x90,0x0f | $aa75
	dc.b	0x0e,0x10,0x9e,0x10,0x0a,0x11,0x6d,0x11 | $aa7d
	dc.b	0xe2,0x11,0xd5,0x12,0x4a,0x13,0xff,0xff | $aa85
  * final moves of blocks
blocking_frame_list_AA8D:
	dc.b	0x88,0x1a,0xd0,0x1a,0x18,0x1b,0xff,0xff | blocking_frame_list_AA8D
 *       uchiuke   sotouke     gedanbarai
 *       (high)    (medium)    (low)
forward_sommersault_frame_list_AA95:
	dc.b	0xad,0x13,0xb6,0x13,0xbf,0x13,0xc8,0x13 | forward_sommersault_frame_list_AA95
	dc.b	0xd1,0x13,0xda,0x13,0xe3,0x13,0xff,0xff | $aa9d
forward_sommersault_frame_list_end_AA9B:
	dc.b	0xad,0x13,0xb6,0x13,0xbf,0x13,0xc8,0x13 | forward_sommersault_frame_list_AA95
	dc.b	0xd1,0x13,0xda,0x13,0xe3,0x13,0xff,0xff | $aa9d
backwards_sommersault_frame_list_AAA5:
	dc.b	0x45,0x12,0x4e,0x12 | backwards_sommersault_frame_list_AAA5
  *     start  next frame
backwards_sommersault_frame_list_end_AAA9:
	dc.b	0x57,0x12,0x60,0x12,0x72,0x12,0x7b,0x12 | backwards_sommersault_frame_list_end_AAA9
	dc.b	0xff,0xff | $aab1
  *       zenith         frame  almost    landing
  *     of bwdsommersault after  landing
* player gets down, including foot sweep
* all frames are final frames of the moves. transition frames
* aren't listed
crouch_frame_list_AAB3:
	dc.b	0x27,0x0c,0xe0,0x0d,0xa7,0x10,0xde,0x12 | crouch_frame_list_AAB3
	dc.b	0xff,0xff | $aabb
    *     crouch  fwsb   fswf   reverse punch (800)
* some other tables loaded by the code below (accessed by a table too)
* one byte per attack
*
* codes aren't the same as attack commands but that's not really a problem
* thanks to the debugger and conditionnal breakpoints!!!
* computer fetches them in frame ids at offset 8
* in identify_opponent_current_move_AB1D
*
* $01: back kick
* $02: jumping side kick
* $03: foot sweep back
* $04: front kick
* $05: small reverse punch
* $06: back round kick
* $07: lunge punch 400
* $08: jumping side kick   | side or back?????
* $09: foot sweep front
* $0A: round kick
* $0B: lunge punch 600
* $0C: lunge punch 1000
* $0D: reverse punch 800
* $0E: low kick
* $0F: ???? not in those tables
* $10: sommersault back/backwards
* $11: sommersault front/forward
* $12: sommersault back/backwards too!!

table_AABD:
	dc.b	0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b | table_AABD
	dc.b	0x0c,0x0d,0x0e,0xff | $aac5
table_AAC9:
	dc.b	0x01,0x02,0x03,0xff | table_AAC9
table_high_attacks_AACD:
	dc.b	0x02,0x06,0x08,0x0a,0x0b,0x0c,0xff | table_high_attacks_AACD
table_low_attacks_AAD4:
	dc.b	0x03,0x09,0x0e,0xff | table_low_attacks_AAD4
table_sommersaults_AAD8:
	dc.b	0x10,0x11,0x12,0xff | table_sommersaults_AAD8
	.align	2

opponent_starting_frontal_attack_AADC:
	jbsr	identify_opponent_current_move_AB1D	| [$aadc: call identify_opponent_current_move_AB1D]
	lea	table_AABD(pc),a2                  	| [$aadf: ld   ix,table_AABD]
	jbsr	table_linear_search_B00F          	| [$aae3: call table_linear_search_B00F]
	rts                                    	| [$aae6: ret]

* rear attack but not low attack. Just back kick jumping back kick
opponent_starting_rear_attack_AAE7:
	jbsr	identify_opponent_current_move_AB1D	| [$aae7: call identify_opponent_current_move_AB1D]
	lea	table_AAC9(pc),a2                  	| [$aaea: ld   ix,table_AAC9]
	jbsr	table_linear_search_B00F          	| [$aaee: call table_linear_search_B00F]
	rts                                    	| [$aaf1: ret]

opponent_starting_high_attack_AAF2:
	jbsr	identify_opponent_current_move_AB1D	| [$aaf2: call identify_opponent_current_move_AB1D]
	lea	table_high_attacks_AACD(pc),a2     	| [$aaf5: ld   ix,table_high_attacks_AACD]
	jbsr	table_linear_search_B00F          	| [$aaf9: call table_linear_search_B00F]
	rts                                    	| [$aafc: ret]

opponent_starting_low_attack_AAFD:
	jbsr	identify_opponent_current_move_AB1D	| [$aafd: call identify_opponent_current_move_AB1D]
	lea	table_low_attacks_AAD4(pc),a2      	| [$ab00: ld   ix,table_low_attacks_AAD4]
	jbsr	table_linear_search_B00F          	| [$ab04: call table_linear_search_B00F]
	rts                                    	| [$ab07: ret]

* return a = 0 if current frame is $0E (low kick)
opponent_starting_low_kick_AB08:
	jbsr	identify_opponent_current_move_AB1D	| [$ab08: call identify_opponent_current_move_AB1D]
	cmp.b	#0x0E,d0                         	| [$ab0b: cp   $0E]
	jeq	l_ab11                             	| [$ab0d: jp   z,$AB11]
	clr.b	d0                               	| [$ab10: xor  a]
l_ab11:
	rts                                    	| [$ab11: ret]

opponent_starting_a_sommersault_AB12:
	jbsr	identify_opponent_current_move_AB1D	| [$ab12: call identify_opponent_current_move_AB1D]
	lea	table_sommersaults_AAD8(pc),a2     	| [$ab15: ld   ix,table_sommersaults_AAD8]
	jbsr	table_linear_search_B00F          	| [$ab19: call table_linear_search_B00F]
	rts                                    	| [$ab1c: ret]

* iy=C220, loads ix with current frame pointer of opponent, then
* identifies opponent exact frame/move (starting move probably)
identify_opponent_current_move_AB1D:
* load current frame pointer
	bsr		load_a2_from_a3_structure_0b_address_mask
	                	| [$ab1d: ld   c,(iy+$0b)]
	                	| [$ab20: ld   b,(iy+$0c)]
* remove direction bit
	                          	| [$ab23: res  7,b]
	                    	| [$ab25: push bc]
	                     	| [$ab25: push bc]
	                     	| [$ab26: pop  ix]
* load at offset 8 to get move id. Ex 4 = front kick
	move.b	(0x08,a2),d0                    	| [$ab28: ld   a,(ix+$08)]
* reset move direction bit
	bclr.b	#7,d0                           	| [$ab2b: res  7,a]
	rts                                    	| [$ab2d: ret]

* > a: attack id (cf table at start of the source file)
* but this routine cannot return 0 because tables it points to don't contain 0
* furthermore, this routine is sometimes followed by a sanity check crashing with
* an error message if a is 0 on exit. Since it's random, how could the sanity check NOT fail?
*
* injecting values performs the move... or the move is discarded by caller

select_cpu_attack_AB2E:
	lea	master_cpu_move_table_AB58(pc),a2  	| [$ab2e: ld   ix,master_cpu_move_table_AB58] table of pointers of move tables
* choose the proper move list depending on facing & distance
	bsr  load_address_of_current_player_move_byte_CF04	| [$ab32: ld   hl,(address_of_current_player_move_byte_CF04)] <= C26B
	addq.w	#1,a0                           	| [$ab35: inc  hl]
	move.b	(a0),d0                         	| [$ab36: ld   a,(hl)] get value in C26C: facing configuration/rough distance 0-4
	add.b	d0,d0                            	| [$ab37: add  a,a]
	clr.w	d1                               	| [$ab39: ld   b,$00]
	move.b	d0,d1                           	| [$ab38: ld   c,a]
	add.w	d1,d1
	add.w	d1,a2                            	| [$ab3b: add  ix,bc]
	
	move.l	(a2),a0                    	| [$ab3d: ld   l,(ix+$00)]
* get msb of 16 bit counter for randomness
* random_B006 needs D3 and D4 (D4 is max value)
	move.w	periodic_counter_16bit_C02E,d3	| [$ab43: ld   de,(periodic_counter_16bit_C02E)]
	SWAP_WORD	d3
	move.b	(a0)+,d4                         	| [$ab47: ld   e,(hl)] pick a number 0-value of hl (not included)
											| [$ab48: inc  hl] skip number of values

	move.l	a0,-(sp)                        	| [$ab49: push hl]
	jbsr	random_B006                       	| [$ab4a: call random_B006]
	move.l	(sp)+,a0                        	| [$ab4d: pop  hl]
	clr.w	d1                               	| [$ab4e: ld   b,$00]
	move.b	d0,d1                           	| [$ab50: ld   c,a]
	add.w	d1,a0                            	| [$ab51: add  hl,bc]
    * gets CPU move to make
	move.b	(a0),d0                         	| [$ab52: ld   a,(hl)]
	bsr		load_address_of_current_player_move_byte_CF04	| [$ab53: ld   hl,(address_of_current_player_move_byte_CF04)]
* gives attack order to the CPU
* only attack moves (not walk moves) are given here
	move.b	d0,(a0)                         	| [$ab56: ld   (hl),a]
	rts                                    	| [$ab57: ret]

* some moves are done or not depending on how the players are
* located and if current player can reach opponent with a blow
* (the CPU isn't going to perform a back move in the void)
* the direction of opponent isn't considered here
* (the 5 values relate to player struct + $0C)

master_cpu_move_table_AB58:
	.long	move_list_far_away_AB62          	|  far away (we don't care much about facing)
	.long	move_list_facing_mid_range_AB70  	|  mid-range, cpu faces opponent (who can face cpu or not...)
	.long	move_list_facing_close_range_AB7B	|  close-range, cpu faces opponent
	.long	move_list_turning_back_AB84      	|  mid-range, cpu has its back turned on opponent
	.long	move_list_turning_back_AB84      	|  close-range, cpu has its back turned on opponent (same as above)

* move list starts by number of moves (for random pick)
* not the same move indexes as above, move indexes are listed at start of
* document
move_list_far_away_AB62:
 * 13 moves: back, jbk, footsweep, front kick/punch, back round, lunge, jsk, round, lunge, lunge, revpunch, lowk
 * the move doesn't really matter as it cannot connect (too far)
	dc.b	0x0d,0x05,0x08,0x09,0x0a,0x0b,0x0c,0x0d | move_list_far_away_AB62
	dc.b	0x0e,0x0f,0x10,0x11,0x13,0x14 | $ab6a
 * lunge backroundkick lungemedium jsk 0E(???) round lunge, lunge, revpunch, lowkick
move_list_facing_mid_range_AB70:
	dc.b	0x0a,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10 | move_list_facing_mid_range_AB70
	dc.b	0x11,0x13,0x14 | $ab78
 * front kick, back round, lungemedium, jsk, round, lunge, revpunch, lowkick
move_list_facing_close_range_AB7B:
 * small reverse, back round, lungemediumj sk,...
	dc.b	0x08,0x0a,0x0b,0x0c,0x0d,0x0f,0x10,0x13 | move_list_facing_close_range_AB7B
	dc.b	0x14 | $ab83
 * list of only reverse attacks (mostly defensive, cpu turns its back on the opponent)
 * back kick jbk foot sweep back
move_list_turning_back_AB84:
	dc.b	0x03,0x05,0x08,0x09 | move_list_turning_back_AB84

perform_jumping_side_kick_if_level_2_AB88:
	move.b	computer_skill_C910,d0          	| [$ab88: ld   a,(computer_skill_C910)]
	cmp.b	#0x01,d0                         	| [$ab8b: cp   $01]
	clr.b	d0                               	| [$ab8d: ld   a,$00]
	jcs	l_ab98                             	| [$ab8f: jp   c,$AB98]
* if level >= 1, perform jumping side kick, else do nothing
	bsr  load_address_of_current_player_move_byte_CF04	| [$ab92: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x0D,d0                        	| [$ab95: ld   a,$0D]
	move.b	d0,(a0)                         	| [$ab97: ld   (hl),a]
l_ab98:
	rts                                    	| [$ab98: ret]

* reacting to jumping side kick at close distance
perform_foot_sweep_if_level_3_AB99:
	move.b	computer_skill_C910,d0          	| [$ab99: ld   a,(computer_skill_C910)]
	cmp.b	#0x02,d0                         	| [$ab9c: cp   $02]
	clr.b	d0                               	| [$ab9e: ld   a,$00]
	jcs	l_aba9                             	| [$aba0: jp   c,$ABA9]
* if level >= 2 perform a foot sweep
	bsr  load_address_of_current_player_move_byte_CF04	| [$aba3: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x0E,d0                        	| [$aba6: ld   a,$0E]
	move.b	d0,(a0)                         	| [$aba8: ld   (hl),a]
l_aba9:
	rts                                    	| [$aba9: ret]

perform_jumping_back_kick_ABAA:
* useless, skill level is always >= 0
* maybe difficulty was pumped up since kchamp
* asm used defines for a level threshold
*ABAA: 3A 10 63   ld   a,(computer_skill_C910)
*ABAD: FE 00       cp   $00
*ABAF: 3E 00       ld   a,$00
*ABB1: DA BA AB    jp   c,$ABBA
	bsr  load_address_of_current_player_move_byte_CF04	| [$abb4: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x08,d0                        	| [$abb7: ld   a,$08]
	move.b	d0,(a0)                         	| [$abb9: ld   (hl),a]
	rts                                    	| [$abba: ret]

perform_foot_sweep_back_ABBB:
* useless, skill level is always >= 0
*ABBB: 3A 10 63    ld   a,(computer_skill_C910)
*ABBE: FE 00       cp   $00
*ABC0: 3E 00       ld   a,$00
*ABC2: DA 6B AB    jp   c,$ABCB
	bsr  load_address_of_current_player_move_byte_CF04	| [$abc5: ld   hl,(address_of_current_player_move_byte_CF04)]
	move.b	#0x09,d0                        	| [$abc8: ld   a,$09]
	move.b	d0,(a0)                         	| [$abca: ld   (hl),a]
	rts                                    	| [$abcb: ret]

* computer is jumping
handle_cpu_land_from_jump_ABCC:

	move.b	(0x08,a3),d5                    	| [$abcf: ld   h,(iy+$08)]
	lsl.w	#8,d5
	move.b	(0x07,a3),d5                    	| [$abcc: ld   l,(iy+$07)]
											| [$abd2: ld   de,$0B73] jump frame
											| [$abd5: and  a]
	cmp.w	#0xB73,d5						| [sbc  hl,de]
	jne	l_abe0                             	| [$abd8: jp   nz,$ABE0]
	bsr   load_address_of_current_player_move_byte_CF04  | [$abdb: ld   hl,(address_of_current_player_move_byte_CF04)]
* land if reaches a given point
	clr.b	(a0)                             	| [$abde: ld   (hl),$00]
l_abe0:
	jra	cpu_move_done_A410                 	| [$abe0: jp   cpu_move_done_A410]

* computer just tried to hit player but failed
* now wait for player response (or not, if skill level is high enough)
full_blown_hit_ABE3:
	bsr  load_address_of_current_player_move_byte_CF04	| [$abe3: ld   hl,(address_of_current_player_move_byte_CF04)]
* tell CPU to stop moving / stand guard
	clr.b	(a0)                             	| [$abe6: ld   (hl),$00]
	lea	counter_attack_time_table_ADEF(pc),a0	| [$abe8: ld   hl,counter_attack_time_table_ADEF]
	jbsr	let_opponent_react_depending_on_skill_level_ACCE	| [$abeb: call let_opponent_react_depending_on_skill_level_ACCE]
	cmp.b	#0x09,d0                         	| [$abee: cp   $09]
	jeq	fight_mainloop_A37B                	| [$abf0: jp   z,fight_mainloop_A37B]
	tst.b	d0                               	| [$abf3: and  a]
	jeq	l_abfc                             	| [$abf4: jp   z,$ABFC]
	cmp.b	#0xFF,d0                         	| [$abf7: cp   $FF]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$abf9: call nz,display_error_text_B075]
0:
l_abfc:
	jra	cpu_move_done_A410                 	| [$abfc: jp   cpu_move_done_A410]

* called if the computer blocks, checks if computer must
* maintain the block depending on opponent current frame/move
* it will stop blocking as soon as the current opponent blow
* doesn't match the current computer block
computer_completed_a_blocking_move_ABFF:
	lea	game_mem+0xAC83,a2        	| [$abff: ld   ix,block_key_table_AC83]
	move.b	(0x07,a3),d4                    	| [$ac03: ld   e,(iy+$07)]
	move.b	(0x08,a3),d3                    	| [$ac06: ld   d,(iy+$08)]
* look for de (computer current block frame) in key/value table
* the frames match high/medium/low attack moves that can be blocked
	jbsr	key_value_linear_search_B00C      	| [$ac09: call key_value_linear_search_B00C]
	tst.b	d0                               	| [$ac0c: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$ac0d: call nz,display_error_text_B075]
0:
	* table returns a pointer D5/D6 on 16-bit ROM
	* convert to a pointer
	* so we can read from
	bsr		change_d5_d6_to_a0
	move.l	a0,a2                        	| [$ac10: push hl]
											| [$ac11: pop  ix]
* ix contains the corresponding pointer
* now load opponent frame
	move.b	(0x0b,a3),d6                    	| [$ac13: ld   l,(iy+$0b)]
	move.b	(0x0c,a3),d5                    	| [$ac16: ld   h,(iy+$0c)]
	bclr.b	#7,d5                           	| [$ac19: res  7,h]
* check if opponent performs some moves (facing computer block)...
	jbsr	check_hl_in_ix_list_B009          	| [$ac1b: call check_hl_in_ix_list_B009]
	tst.b	d0                               	| [$ac1e: and  a]
	jeq	l_ac3e                             	| [$ac1f: jp   z,$AC3E] opponent doesn't perform one of the moves
	bsr		load_address_of_current_player_move_byte_CF04	| [$ac22: ld   hl,(address_of_current_player_move_byte_CF04)]
	clr.b	(a0)                             	| [$ac25: ld   (hl),$00]
	lea	counter_attack_time_table_AE17(pc),a0	| [$ac27: ld   hl,counter_attack_time_table_AE17]
	jbsr	let_opponent_react_depending_on_skill_level_ACCE	| [$ac2a: call let_opponent_react_depending_on_skill_level_ACCE]
	cmp.b	#0x09,d0                         	| [$ac2d: cp   $09]
	jeq	fight_mainloop_A37B                	| [$ac2f: jp   z,fight_mainloop_A37B]
	tst.b	d0                               	| [$ac32: and  a]
	jeq	l_ac80                             	| [$ac33: jp   z,$AC80]
	cmp.b	#0xFF,d0                         	| [$ac36: cp   $FF]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$ac38: call nz,display_error_text_B075]
0:
	jra	l_ac80                             	| [$ac3b: jp   $AC80]

* search for the same moves, but by attack id this time (not by frame id)
* 7 bit is set but it's still attack id
* it looks that the frame/move search isn't very reliable, this search
* looks very redundant (and in a lot of other parts of the code it's
* also done that way)
l_ac3e:
	lea		game_mem+0xACAD,a2        	| [$ac3e: ld   ix,block_key_table_ACAD]
	move.b	(0x07,a3),d4                    	| [$ac42: ld   e,(iy+$07)]
	move.b	(0x08,a3),d3                    	| [$ac45: ld   d,(iy+$08)]
	jbsr	key_value_linear_search_B00C      	| [$ac48: call key_value_linear_search_B00C]
	tst.b	d0                               	| [$ac4b: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$ac4c: call nz,display_error_text_B075]
0:

	move.l	a0,-(sp)                        	| [$ac4f: push hl]
	bsr		load_a0_from_a3_structure_07_address_mask                    	| [$ac50: ld   l,(iy+$0b)]
	                 	| [$ac53: ld   h,(iy+$0c)]
	                 	| [$ac56: res  7,h]

	move.l	a0,a2                        	| [$ac58: push hl]
										| [$ac59: pop  ix]
	move.b	(0x08,a2),d0                    	| [$ac5b: ld   a,(ix+$08)]
	move.l	(sp)+,a2                        	| [$ac5e: pop  ix]
	jbsr	table_linear_search_B00F          	| [$ac60: call table_linear_search_B00F]
	tst.b	d0                               	| [$ac63: and  a]
* if opponent is performing a move matching the block
	jne	l_ac80                             	| [$ac64: jp   nz,$AC80]
* move not found: stand guard, wait for opponent reaction
	bsr  load_address_of_current_player_move_byte_CF04	| [$ac67: ld   hl,(address_of_current_player_move_byte_CF04)]
	clr.b	(a0)                             	| [$ac6a: ld   (hl),$00]
	lea	counter_attack_time_table_AE17(pc),a0	| [$ac6c: ld   hl,counter_attack_time_table_AE17]
	jbsr	let_opponent_react_depending_on_skill_level_ACCE	| [$ac6f: call let_opponent_react_depending_on_skill_level_ACCE]
	cmp.b	#0x09,d0                         	| [$ac72: cp   $09]
	jeq	fight_mainloop_A37B                	| [$ac74: jp   z,fight_mainloop_A37B]
	tst.b	d0                               	| [$ac77: and  a]
	jeq	l_ac80                             	| [$ac78: jp   z,$AC80]
	cmp.b	#0xFF,d0                         	| [$ac7b: cp   $FF]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$ac7d: call nz,display_error_text_B075]
0:
l_ac80:
	jra	cpu_move_done_A410                 	| [$ac80: jp   cpu_move_done_A410]


*block_key_table_AC83:
*	.long	l_1a88,table_AC91                	|  high block
*	.long	l_1ad0,table_AC9D                	|  medium block
*	.long	l_1b18,table_ACA3                	|  low block
*	.long	-1
* hitting points of high techniques
*        brkick (and next frame)    jskick (and landing)
table_AC91:
*	.byte	0X5,0x0D,0x24,0x0F,0x17,0x10
    *      lpunch 600      lpunch 1000
*    .byte  0x76,0x11,0xEB,0x11,0xFF,0xFF
* hitting points of medium techniques
*table_AC9D:
*	.byte	0XB8,0x0E,0x99,0x0F,0xFF,0xFF
* hitting points of low techniques
*table_ACA3:
*	.byte	0xC9,0x0C,0xDB,0x0C,0x55,0x0E,0xDE,0x12,0xFF,0xFF
*	.align	2
*block_key_table_ACAD:
*	.long	l_1a88,high_attacks_ACBB         	|  high block
*	.long	l_1ad0,medium_attacks_ACC1       	|  medium block
*	.long	l_1b18,low_attacks_ACC4          	|  low block
*	.long	-1
*high_attacks_ACBB:
*	.byte	0x82,0x86,0x88,0x8B,0x8C,0xFF | jskick brkick jbkick lp600 lp1000
*medium_attacks_ACC1:
*	.byte	0x85,0x87,0xFF | weak reverse, lunge punch 400
*low_attacks_ACC4:
*	.byte	0x81,0x84,0x8D,0xFF  | back kick, front kick, revpunch 800

	.align	2

l_acc8:
	jra	cpu_move_done_A410                 	| [$acc8: jp   cpu_move_done_A410]
l_accb:
	jra	cpu_move_done_A410                 	| [$accb: jp   cpu_move_done_A410]

* blocks a given number of frames (depending on table and level) during which
* the opponent has time to pre-react before the computed already decided
* attack is launched
* < a0 pointer on a 4 pointer table containing each $20 values of data; each
* table corresponds to a difficulty setting (4 total)
* if upper-hard championship level >= 16: no time for player to react just before
* an attack
* > d0: $00: attacks
* > d0: $09: doesn't attack
let_opponent_react_depending_on_skill_level_ACCE:
	move.b	computer_skill_C910,d0          	| [$acce: ld   a,(computer_skill_C910)]
	cmp.b	#0x10,d0                         	| [$acd1: cp   $10]
	clr.b	d0                               	| [$acd3: ld   a,$00]
	jcc	l_ad16                             	| [$acd5: jp   nc,$AD16] if level >= $10, skip the routine altogether

* this is called when skill level is < 16 (under high level of champ)
* game checks difficulty level at that point
* (in CMP high mode it doesn't matter)
	move.b	dip_switches_copy_C030,d0       	| [$acd8: ld   a,(dip_switches_copy_C030)]
	lsr.b	#3,d0                            	| [$acdb: srl  a] * 3
	and.b	#0x06,d0                         	| [$ace1: and  $06]
* a = 0: difficulty: easy
* a = 2: difficulty: medium
* a = 4: difficulty: hard
* a = 6: difficulty: hardest
	clr.w	d1                               	| [$ace3: ld   b,$00]
	move.b	d0,d1                           	| [$ace5: ld   c,a]
	add.w	d1,d1		| 4 byte pointer
	add.w	d1,a0                            	| [$ace6: add  hl,bc]

	move.l	(a0),a1                         	| [$ace7: ld   e,(hl)]
												| [$ace9: ld   d,(hl)]
* proper table (matching skill level) is loaded in de
* one of the table addresses is $AD8F for instance
* check skill level again
	move.b	computer_skill_C910,d0          	| [$acea: ld   a,(computer_skill_C910)]
	asl.b	#1,d0                            	| [$aced: sla  a] times 2
	clr.w	d5                               	| [$acf0: ld   h,$00]
	move.b	d0,d5                           	| [$acef: ld   l,a]
* offset for the byte value in the table
	add.w	d5,a1                            	| [$acf2: add  hl,de]
	move.l	a1,a0		| we need a pointer on A0 in the end
* check those mysterious C148, C147 values that look = 0
* everywhere in the code it seems that the only thing that is done with
* them is that they're set to 0 so the code below is useless
* (a!=b!=0 would crank the difficulty up slightly, letting the program
* pick the (shorter) delay value after the current one (they come in pairs)
	move.b	unknown_C148,d0                 	| [$acf3: ld   a,(unknown_C148)]
	move.b	d0,d1                           	| [$acf6: ld   b,a]
	move.b	unknown_C147,d0                 	| [$acf7: ld   a,(unknown_C147)]
	or.b	d1,d0                             	| [$acfa: or   b]
	jeq	l_acff                             	| [$acfb: jp   z,$ACFF] a=b=0: don't increase hl (harder)
	addq.w	#1,a0                           	| [$acfe: inc  hl]
l_acff:
	move.b	(a0),d0                         	| [$acff: ld   a,(hl)]
	move.b	d0,d1                           	| [$ad00: ld   b,a]
	tst.b	d0                               	| [$ad01: and  a]
	| setting D0 now would break flags										| [$ad02: ld   a,$00] return value if a<=0
	jeq	l_ad16                             	| [$ad04: jp   z,$AD16] if a=0, exit, attack immediately
	jmi	l_ad16                             	| [$ad07: jp   m,$AD16] if a<0 exit, attack immediately
* D0 is strictly positive
	move.b	d1,d0                           	| [$ad0a: ld   a,b] restore read value of a (number of waiting frames)
											| [$ad0b: and  a]
	bne.b	0f
	jbsr	display_error_text_B075           	| [$ad0c: call z,display_error_text_B075] can't happen! we just testedf it
0:

	move.l	a3,-(sp)                        	| [$ad0f: push iy]
* this can block cpu moves up to 1/2 second at low skill level
	jbsr	let_opponent_react_AD19           	| [$ad11: call let_opponent_react_AD19]
	move.l	(sp)+,a3                        	| [$ad14: pop  iy]
	rts
l_ad16:
	clr.b	d0
	rts                                    	| [$ad16: ret]


* never called in CMP hardest mode (level >= 16)
* < b # of frames to wait for opponent reaction. 30 frames = 1/2 second (easiest setting)
* > a:00 no opponent reaction
*    :09 opponent reacted with a jump (front/back) (from observation)
*    :ff opponent reacted with some other attack(exits before timeout)
*
* to clock that, I've used MAME breakpoint commands
* bpset AD19,1,{printf "enter: "; time; g}
* bpset AD64,1,{printf "exit: %02x ",a; time; g}

let_opponent_react_AD19:
* load proper opponent structure
	lea	player_1_struct_C240,a3        	| [$ad19: ld   iy,player_1_struct_C240]
	move.b	current_task_index_C028,d0   	| [$ad1d: ld   a,(current_task_index_C028)]
	cmp.b	#0x09,d0                         	| [$ad20: cp   $09]
	jeq	l_ad29                             	| [$ad22: jp   z,$AD29]
	lea	player_2_struct_C260,a3        	| [$ad25: ld   iy,player_2_struct_C260]
l_ad29:
	bsr		load_a0_from_a3_structure_07_address_mask               	| [$ad29: ld   l,(iy+$07)]
                 	| [$ad2c: ld   h,(iy+$08)] current player frame/stance id in hl
                 	| [$ad2f: res  7,h] remove direction of frame

	move.l	a0,a2                        	| [$ad31: push hl]
											| [$ad32: pop  ix]
	move.b	(0x13,a3),d0                    	| [$ad34: ld   a,(iy+$13)]
												| [$ad37: and  a]
	jeq	l_ad53                             	| [$ad38: jp   z,$AD53]
	cmp.b	(0x08,a2),d0                     	| [$ad3b: cp   (ix+$08)]
	jeq	l_ad4e                             	| [$ad3e: jp   z,$AD4E]
	move.b	(0x12,a3),d0                    	| [$ad41: ld   a,(iy+$12)]
												| [$ad44: and  a]
	jeq	l_ad53                             	| [$ad45: jp   z,$AD53]
	cmp.b	(0x0b,a3),d0                     	| [$ad48: cp   (iy+$0b)]
	jne	l_ad53                             	| [$ad4b: jp   nz,$AD53]
l_ad4e:
	st.b	d0                                	| [$ad4e: ld   a,$FF] opponent reacted: exit loop
	jra	l_ad64                             	| [$ad50: jp   $AD64]
l_ad53:

	move.l	a3,-(sp)                        	| [$ad53: push iy]
	movem.w	d1/d2,-(sp)                    	| [$ad55: push bc]
	move.b	#0x01,d0                        	| [$ad56: ld   a,$01]
	jbsr	suspend_this_task_B05A            	| [$ad58: call suspend_this_task_B05A]
	movem.w	(sp)+,d1/d2                    	| [$ad5b: pop  bc]
	move.l	(sp)+,a3                        	| [$ad5c: pop  iy]
	tst.b	d0                               	| [$ad5e: and  a]
	jne	l_ad64                             	| [$ad5f: jp   nz,$AD64]
	subq.b	#1,d1                           	| [...]
	jne	l_ad29                             	| [$ad62: djnz $AD29]
l_ad64:
	rts                                    	| [$ad64: ret]


* this is used for computer reaction, but also in a different way
* for animation speedup depending on the difficulty level
*
* for animation, only negative values are considered. Positive values
* are seen as 0 (no frame count decrease = no speed increase)
*
* for reaction time, negative values count as 0 (no time to react
* after a CPU attack)
*

* this is used for computer reaction, but also in a different way
* for animation speedup depending on the difficulty level
*
* for animation, only negative values are considered. Positive values
* are seen as 0 (no frame count decrease = no speed increase)
*
* for reaction time, negative values count as 0 (no time to react
* after a CPU attack)
*
counter_attack_timer_table_AD67:
	.long	l_ad6f                           	|  easy
	.long	l_ad8f                           	|  medium
	.long	l_adaf                           	|  hard
	.long	l_adcf                           	|  hardest



* $20 values per entry, number of frames to wait for opponent response
* just before cpu attacks (when an attack has been decided)
* first value matches skill 0, and so on. The values go in pair,
* a mysterious C148/C147 memory location allows to pick the second item,
* otherwise each skill level shifts 2 by 2. And after level 16, it's maxed out
* to -2 ($FE) for animation and 0 for reaction time
l_ad6f:
	dc.b	0x30,0x2d,0x2a,0x26,0x23,0x20,0x1d,0x1a | $ad6f
	dc.b	0x17,0x14,0x10,0x0d,0x0a,0x07,0x04,0x00 | $ad77
	dc.b	0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff | $ad7f
	dc.b	0xff,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe | $ad87
l_ad8f:
	dc.b	0x30,0x26,0x20,0x1b,0x17,0x13,0x10,0x0d | $ad8f
	dc.b	0x0b,0x08,0x06,0x05,0x03,0x02,0x01,0x00 | $ad97
	dc.b	0x00,0x00,0x00,0xff,0xff,0xff,0xfe,0xfe | $ad9f
	dc.b	0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe | $ada7
l_adaf:
	dc.b	0x30,0x20,0x10,0x0e,0x0b,0x09,0x07,0x06 | $adaf
	dc.b	0x05,0x04,0x03,0x02,0x02,0x01,0x00,0x00 | $adb7
	dc.b	0x00,0x00,0xff,0xff,0xfe,0xfe,0xfe,0xfe | $adbf
	dc.b	0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe | $adc7
l_adcf:
	dc.b	0x30,0x14,0x08,0x07,0x06,0x05,0x04,0x03 | $adcf
	dc.b	0x02,0x02,0x01,0x01,0x00,0x00,0x00,0x00 | $add7
	dc.b	0xff,0xff,0xff,0xfe,0xfe,0xfe,0xfe,0xfe | $addf
	dc.b	0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe | $ade7


counter_attack_time_table_ADEF:
	.long	l_adf7
	.long	l_adf7
	.long	l_adf7
	.long	l_adf7


l_adf7:
	dc.b	0x20,0x20,0x18,0x18,0x18,0x18,0x10,0x10 | $adf7
	dc.b	0x08,0x08,0x07,0x07,0x06,0x06,0x04,0x03 | $adff
	dc.b	0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 | $ae07
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 | $ae0f

counter_attack_time_table_AE17:
	.long	l_ae1f
	.long	l_ae1f
	.long	l_ae1f
	.long	l_ae1f

l_ae1f:
	dc.b	0x20,0x20,0x20,0x20,0x18,0x18,0x10,0x10 | $ae1f
	dc.b	0x08,0x08,0x07,0x07,0x06,0x06,0x05,0x05 | $ae27
	dc.b	0x04,0x04,0x03,0x03,0x02,0x02,0x01,0x01 | $ae2f
	dc.b	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01 | $ae37
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 | $ae3f
	* rest is zeroes
	.align 	2

multiply_de_b000:
	jra	multiply_de_B0C3                   	| [$b000: jp   multiply_de_B0C3]

divide_hl_by_d_b003:
	jra	divide_hl_by_d_b0db                             	| [$b003: jp   $B0DB]

random_B006:
	jra	random_B0EE                        	| [$b006: jp   random_B0EE]


table_linear_search_B00F:
	jra	table_linear_search_B148           	| [$b00f: jp   table_linear_search_B148]

clear_player_structure_partial_b012:
	jra	clear_player_structure_partial_b15c	| [$b012: jp   clear_player_structure_partial_b15c]

resume_tasks_b015:
	jra	resume_tasks_b171                             	| [$b015: jp   resume_tasks_b171]

l_b018:
	jra	l_b1ab                             	| [$b018: jp   $B1AB]


clear_sprite_shadow_ram_C7xx_B01E:
	jra	clear_C7xx_B2B2                    	| [$b01e: jp   clear_C7xx_B2B2]
clear_zone_B021:
	jra	clear_zone_B2BD                    	| [$b021: jp   clear_zone_B2BD]

fill_video_and_attribute_memory_B030:
	jra	fill_video_and_attribute_memory_B316	| [$b030: jp   fill_video_and_attribute_memory_B316]

display_text_B039:
	jra	display_text_B357                  	| [$b039: jp   display_text_B357]

display_text_color_2_B03F:
	jra	display_text_color_2_B3CE          	| [$b03f: jp   display_text_color_2_B3CE]

is_point_in_rectangle_B042:
	jra	is_point_in_rectangle_B440         	| [$b042: jp   is_point_in_rectangle_B440]

startup_B045:
	jra	startup_B469                       	| [$b045: jp   startup_B469]


resume_task_B054:
	jra	resume_task_B5CD                	| [$b054: jp   resume_task_B5CD]

schedule_task_to_start_B057:
	jra	schedule_task_to_start_B620                  	| [$b057: jp   schedule_task_to_start_B620]

load_struct_C100_from_A_index_B04E:
	jra	load_struct_C100_from_A_index_B58E 	| [$b04e: jp   load_struct_C100_from_A_index_B58E]

task_yield_B051:
	jra		task_yield_B5A5
	
task_manipulation_B05D:
	jra	task_manipulation_B6AE             	| [$b05d: jp   task_manipulation_B6AE]

set_normal_screen_b060:
	jra	set_normal_screen_bb72                             	| [$b060: jp   $BB72]

play_sound_B072:
	jbsr	osd_sound_start
	rts
	
display_error_text_B075:
	jra	display_error_text_B186            	| [$b075: jp   display_error_text_B186]

l_b07b:
	jra	l_e029                             	| [$b07b: jp   $E029]

l_b084:
	jra	l_e000                             	| [$b084: jp   $E000]
l_b087:
	jra	l_e000                             	| [$b087: jp   $E000]
l_b08a:
	jra	l_e000                             	| [$b08a: jp   $E000]

task_b099:
	jra	l_e1de                             	| [$b099: jp   $E1DE]

task_b09c:
	jra	l_e1fb                             	| [$b09c: jp   $E1FB]
task_b09f:
	jra	l_e1fb                             	| [$b09f: jp   $E1FB]

l_b0a2:
	jra	animate_guided_character_F75D                             	| [$b0a2: jp   $F75D]


stop_sound_b0ae:
	jra	stop_sound_BBDF                    	| [$b0ae: jp   stop_sound_BBDF]

is_title_screen_demo_mode_B0B1:
	jra	is_title_screen_demo_mode_B27E     	| [$b0b1: jp   is_title_screen_demo_mode_B27E]

read_p1_controls_B0B7:
	jbsr	osd_read_inputs
	bra.b	rpc_bbaf
	
read_p2_controls_B0BA:
	jbsr	osd_read_inputs
	lsr.w	#8,d0
rpc_bbaf:
	not.b	d0                               	| [$bbaf: cpl]
	rol.b	#4,d0                            	| [$bbb0: rlca] * 4
	rts
	

* > d3: term 1
* > d4: term 2
* > d3.w: product

multiply_de_B0C3:
	move.w	#0xFF,d0
	and.w	d0,d4
	and.w	d0,d3
	* why bother with adapting the algorithm? we have MULU
	mulu	d4,d3
	rts                                    	| [$b0da: ret]

* > d5/d6: input
* > d3.b: divisor
* > d5/d6: result
* > d0: quotient?
divide_hl_by_d_b0db:
	clr.b	d0                               	| [$b0db: xor  a]
	move.b	#0x10,d1                        	| [$b0dc: ld   b,$10]
l_b0de:
	asl.b	#1,d6                            	| [$b0de: sla  l]
	roxl.b	#1,d5                           	| [$b0e0: rl   h]
	roxl.b	#1,d0                           	| [$b0e2: rl   a]
	cmp.b	d3,d0                            	| [$b0e4: cp   d]
	jcs	l_b0eb                             	| [$b0e5: jp   c,$B0EB]
	sub.b	d3,d0                            	| [$b0e8: sub  d]
	bset.b	#0,d6                           	| [$b0e9: set  0,l]
l_b0eb:
	subq.b	#1,d1                           	| [...]
	jne	l_b0de                             	| [$b0eb: djnz $B0DE]
	rts                                    	| [$b0ed: ret]


* random method
* < d: seed from timer
* < e: max value (not included)
* > a: value between 0 and e (not included)
* > d
random_B0EE:
	clr.b	d0                               	| [$b0ee: xor  a]  clears a
	move.b	#0x08,d1                        	| [$b0ef: ld   b,$08] b <- $08	| do it 8 times at least
l_b0f1:
	asl.b	#1,d3                            	| [$b0f1: sla  d] d *= 2
	roxl.b	#1,d0                           	| [$b0f3: rl   a] a <- 1 if carry set else 0
	cmp.b	d4,d0                            	| [$b0f5: cp   e] compare a with e
	jcs	l_b0fc                             	| [$b0f6: jp   c,$B0FC] if e >= a skip to djnz, repeat only if a == e
	sub.b	d4,d0                            	| [$b0f9: sub  e] a <- a-e
	bset.b	#0,d3                           	| [$b0fa: set  0,d] d &= 1
l_b0fc:
	subq.b	#1,d1                           	| [...]
	jne	l_b0f1                             	| [$b0fc: djnz $B0F1] repeat 8 times
	rts                                    	| [$b0fe: ret]

* < ix: table like walk_frames_list_AA3B, jump_frames_list_AA4D... 2 value list ending with FF FF
* < hl: frame word
* > a 0 or $FF depending on value in hl & 0x7FFF found in list pointed in ix
check_hl_in_ix_list_B009:
check_hl_in_ix_list_B0FF:
* heavily simplified thanks to cmp.b dx,dy (no value change)
l_b101:
	move.b	(0x00,a2),d4                    	| [$b103: ld   e,(ix+$00)] load first value of table e
	move.b	(0x01,a2),d3                    	| [$b106: ld   d,(ix+$01)] load second value of table in d
	move.b	d3,d0                           	| [$b109: ld   a,d]
	and.b	d4,d0                            	| [$b10a: and  e]
	cmp.b	#0xFF,d0                         	| [$b10b: cp   $FF] check if both e and d are $FF
	jeq	l_b122                             	| [$b10d: jp   z,$B122] if so, end of scan
	tst.b	d0                               	| [$b110: and  a] clear carry for sbc operation
	cmp.b	d3,d5
	bne.b	0f
	cmp.b	d4,d6	| did we match de with hl ?
	jeq	l_b11d                             	| [$b113: jp   z,$B11D] if so end, putting FF in a (found)
0:
	addq.w	#2,a2                           	| [$b116: inc  ix] * 2
	jra	l_b101                             	| [$b11a: jp   $B101] next value to scan
l_b11d:
	st.b	d0                                	| [$b11d: ld   a,$FF] found
	jra	l_b123                             	| [$b11f: jp   $B123]
* not found
l_b122:
	clr.b	d0                               	| [$b122: xor  a] a <= 0
l_b123:
	rts                                    	| [$b123: ret]

* another search routine (key value)
* < d3/d4: word to look for
* < a2: table to look into
* > a=0 found
* > if found loads hl with the word after
* the value of de found in ix list
key_value_linear_search_B00C:
key_value_linear_search_B124:
	moveq	#0x0004,d1                      	| [$b124: ld   bc,$0004] 4
l_b127:
	move.b	(0x00,a2),d6                    	| [$b127: ld   l,(ix+$00)]
	move.b	(0x01,a2),d5                    	| [$b12a: ld   h,(ix+$01)]
	move.b	d6,d0                           	| [$b12d: ld   a,l]
	and.b	d5,d0                            	| [$b12e: and  h]
	cmp.b	#0xFF,d0                         	| [$b12f: cp   $FF]
	jeq	l_b147                             	| [$b131: jp   z,$B147] h=a=$FF => end
	                               	| [$b134: and  a]
	cmp.b	d3,d5
	bne.b	0f
	cmp.b	d4,d6
	jeq	l_b13f                             	| [$b137: jp   z,$B13F]
0:
	add.w	d1,a2                            	| [$b13a: add  ix,bc] add 4 to ix
	jra	l_b127                             	| [$b13c: jp   $B127]
l_b13f:
	move.b	(0x02,a2),d6                    	| [$b13f: ld   l,(ix+$02)]
	move.b	(0x03,a2),d5                    	| [$b142: ld   h,(ix+$03)]
	clr.b	d0                               	| [$b145: ld   a,$00]
l_b147:
	rts                                    	| [$b147: ret]

* < ix: pointer on table (ends with $FF)
* < a: value to look for
* > a = 0 if not found, else a is unchanged

table_linear_search_B148:
	move.b	(0x00,a2),d1                    	| [$b148: ld   b,(ix+$00)]
* (clever way to test b against $FF without changing a probably)
	addq.b	#1,d1                           	| [$b14b: inc  b]
	jeq	l_b15a                             	| [$b14c: jp   z,$B15A] table ends by $FF: if 0 => end
	cmp.b	(a2),d0                     	| [$b14f: cp   (ix+$00)] check if A == (ix)
	jeq	l_b15b                             	| [$b152: jp   z,$B15B] found => exit
	addq.w	#1,a2                           	| [$b155: inc  ix] else keep searching
	jra	table_linear_search_B148           	| [$b157: jp   table_linear_search_B148]
l_b15a:
	clr.b	d0                               	| [$b15a: xor  a] not found: set a to zero
l_b15b:
	rts                                    	| [$b15b: ret]
* same start as load_iy_with_player_structure_B574 except that here we multiply
* and add 7 as offset... it really seems that 2 programmers were competing here...
clear_player_structure_partial_b15c:
	move.b	current_task_index_C028,d0   	| [$b15c: ld   a,(current_task_index_C028)]
	move.b	d0,d3                           	| [$b15f: ld   d,a]
	move.b	#0x20,d4                        	| [$b160: ld   e,$20]
	jbsr	multiply_de_B0C3                  	| [$b162: call multiply_de_B0C3]
	lea	task_struct_C100+7,a0                	| [$b165: ld   hl,unknown_C107]
	add.w	d3,a0                            	| [$b168: add  hl,de]
	move.b	#0x19,d1                        	| [$b169: ld   b,$19]
l_b16b:
	clr.b	(a0)+                             	| [$b16b: ld   (hl),$00]
	                           	| [$b16d: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_b16b                             	| [$b16e: djnz $B16B]
	rts                                    	| [$b170: ret]
	
resume_tasks_b171:
	cmp.b	#0x18,d0                         	| [resume_tasks_b171: cp   $18]
	bcs.b	0f
	jbsr	display_error_text_B186           	| [$b173: call nc,display_error_text_B186]
0:
	move.l	a3,-(sp)                        	| [$b176: push iy]
l_b178:
	move.w	d0,-(sp)                        	| [$b178: push af]
	jbsr	resume_task_B5CD               	| [$b179: call resume_task_B5CD]
	move.w	(sp)+,d0                        	| [$b17c: pop  af]
	addq.b	#1,d0                           	| [$b17d: inc  a]
	cmp.b	#0x18,d0                         	| [$b17e: cp   $18]
	jne	l_b178                             	| [$b180: jp   nz,$B178]
	move.l	(sp)+,a3                        	| [$b183: pop  iy]
	rts                                    	| [$b185: ret]

display_error_text_B186:
	move.l	(sp)+,a2                        	| [$b186: pop  ix]
	jbsr	disable_interrupts_BBE2           	| [$b188: call disable_interrupts_BBE2]
	move.w	d0,-(sp)                        	| [$b18b: push af]
	movem.w	d1/d2,-(sp)                    	| [$b18c: push bc]
	movem.w	d3/d4,-(sp)                    	| [$b18d: push de]
	move.l	a1,-(sp)                        	| [$b18d: push de]

	move.l	a0,-(sp)                        	| [$b18e: push hl]

	move.l	a3,-(sp)                        	| [$b18f: push iy]
	lea	error_text_B1A3(pc),a0             	| [$b191: ld   hl,error_text_B1A3] ERROR
	move.b	#0x98,d3                        	| [$b194: ld   d,$98]
	jbsr	display_text_B357                 	| [$b196: call display_text_B357]
	move.l	(sp)+,a3                        	| [$b199: pop  iy]
	move.l	(sp)+,a0                        	| [$b19b: pop  hl]
	move.l	(sp)+,a1                        	| [$b19c: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$b19c: pop  de]
	movem.w	(sp)+,d1/d2                    	| [$b19d: pop  bc]
	move.w	(sp)+,d0                        	| [$b19e: pop  af]
* infinite loop, all registers are preserved, inc. call address
* probably used by the devs as an "assert failed" routine, where they could
* track down abnormal values before it really crashes
l_b19f:
	jra	l_b19f                             	| [$b1a0: jp   $B19F]

error_text_B1A3:
	dc.b	0x0e,0x10,0x0e,0x1b,0x1b,0x18,0x1b,0xff  | "ERROR"
	.align	2
	
l_b1ab:
	move.l	a3,-(sp)                        	| [$b1ab: push iy]
	move.w	d0,-(sp)                        	| [$b1ad: push af]
	lea	unknown_C0C8,a2                	| [$b1ae: ld   ix,unknown_C0C8]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$b1b2: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x0C,d0                         	| [$b1b5: and  $0C]
	cmp.b	#0x0C,d0                         	| [$b1b7: cp   $0C]
	jeq	l_b1c4                             	| [$b1b9: jp   z,$B1C4]
	btst.b	#2,d0                           	| [$b1bc: bit  2,a]
	jne	l_b1de                             	| [$b1be: jp   nz,$B1DE]
	jra	l_b1da                             	| [$b1c1: jp   $B1DA]
l_b1c4:
	move.b	current_task_index_C028,d0   	| [$b1c4: ld   a,(current_task_index_C028)]
	cmp.b	#0x0A,d0                         	| [$b1c7: cp   $0A]
	jeq	l_b1de                             	| [$b1c9: jp   z,$B1DE]
	cmp.b	#0x0B,d0                         	| [$b1cc: cp   $0B]
	jeq	l_b1da                             	| [$b1ce: jp   z,$B1DA]
	move.w	(sp)+,d0                        	| [$b1d1: pop  af]
	move.w	d0,-(sp)                        	| [$b1d2: push af]
	tst.b	d0                               	| [$b1d3: and  a]
	beq.b	0f
	jbsr	display_error_text_B186           	| [$b1d4: call nz,display_error_text_B186]
0:
	jra	l_b1de                             	| [$b1d7: jp   $B1DE]
l_b1da:
	lea	unknown_C0D0,a2                	| [$b1da: ld   ix,unknown_C0D0]
l_b1de:
	move.w	(sp)+,d0                        	| [$b1de: pop  af]
	move.b	(0x01,a2),d7
	abcd	d7,d0                     	| [$b1df: add  a,(ix+$01)]
	move.b	d0,(0x01,a2)                    	| [$b1e3: ld   (ix+$01),a]
	move.b	(0x00,a2),d0
	moveq	#0,d7
	abcd	d7,d0                    	| [$b1e6: ld   a,(ix+$00)]
	move.b	d0,(0x00,a2)                    	| [$b1ec: ld   (ix+$00),a]
	move.w	#0xC0,d5		             	| [$b1ef: ld   hl,(unknown_C0C0)]
	move.w	#0xC0,d6		             	| [$b1ef: ld   hl,(unknown_C0C0)]
	move.b	d6,d0                           	| [$b1f2: ld   a,l]
	move.b	d5,d6                           	| [$b1f3: ld   l,h]
	move.b	d0,d5                           	| [$b1f4: ld   h,a]
	move.w	(0x00,a2),d1                    	| [$b1f5: ld   b,(ix+$00)]
												| [$b1f8: ld   c,(ix+$01)]
												| [$b1fb: and  a]
	bsr		change_d5_d6_to_d5_16
	sub.w	d1,d5											| [sbc  hl,bc]
	jcc	l_b20c                             	| [$b1fe: jp   nc,$B20C]
	move.w	#0xC0,d2               	| [$b201: ld   de,unknown_C0C0]
	move.w	#0xC0,d3               	| [$b201: ld   de,unknown_C0C0]

	move.l	a2,a0                        	| [$b204: push ix]
											| [$b206: pop  hl]
	move.w	#0x0003,d1                      	| [$b207: ld   bc,$0003] 3
	jbsr	ldir                              	| [$b20a: ldir]
l_b20c:
	move.b	#0xC0,d5                	| [$b20c: ld   hl,unknown_C0C0]
	move.b	#0xC0,d6                	| [$b20c: ld   hl,unknown_C0C0]
	move.b	#0x98,d3                        	| [$b20f: ld   d,$98]
	move.b	background_and_state_bits_C911,d0	| [$b211: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$b214: res  7,a]
	cmp.b	#0x54,d0                         	| [$b216: cp   $54]
	jeq	l_b227                             	| [$b218: jp   z,$B227]
	cmp.b	#0x53,d0                         	| [$b21b: cp   $53]
	jeq	l_b227                             	| [$b21d: jp   z,$B227]
	jbsr	is_title_screen_demo_mode_B27E    	| [$b220: call is_title_screen_demo_mode_B27E]
	tst.b	d0                               	| [$b223: and  a]
	jeq	l_b27b                             	| [$b224: jp   z,$B27B]
l_b227:
	move.b	#0x14,d1                      	| [$b227: ld   bc,$1402]
	move.b	#0x02,d2                      	| [$b227: ld   bc,$1402]
	jbsr	display_text_color_2_B3CE         	| [$b22a: call display_text_color_2_B3CE]
	move.b	#0x14,d1                      	| [$b22d: ld   bc,$1404]
	move.b	#0x04,d2                      	| [$b22d: ld   bc,$1404]
	move.b	background_and_state_bits_C911,d0	| [$b230: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$b233: res  7,a]
	cmp.b	#0x54,d0                         	| [$b235: cp   $54]
	jeq	l_b248                             	| [$b237: jp   z,$B248]
	cmp.b	#0x53,d0                         	| [$b23a: cp   $53]
	jeq	l_b248                             	| [$b23c: jp   z,$B248]
	jbsr	is_title_screen_demo_mode_B27E    	| [$b23f: call is_title_screen_demo_mode_B27E]
	move.b	#0x14,d1                      	| [$b242: ld   bc,$1404]
	move.b	#0x04,d2                      	| [$b242: ld   bc,$1404]
	cmp.b	#0x02,d0                         	| [$b245: cp   $02]
	beq.b	0f
	rts                                    	| [$b247: ret  nz]
0:
l_b248:
	move.b	#0x98,d3                        	| [$b248: ld   d,$98]
	move.b	#0xC0,d5                	| [$b24a: ld   hl,unknown_C0C8]
	move.b	#0xC8,d6                	| [$b24a: ld   hl,unknown_C0C8]
	jbsr	display_text_color_2_B3CE         	| [$b24d: call display_text_color_2_B3CE]
	move.b	unknown_C032,d0                 	| [$b250: ld   a,(unknown_C032)]
	btst.b	#1,d0                           	| [$b253: bit  1,a]
	jeq	l_b27b                             	| [$b255: jp   z,$B27B]
	move.b	#0x14,d1                      	| [$b258: ld   bc,$1406]
	move.b	#0x06,d2                      	| [$b258: ld   bc,$1406]
	move.b	background_and_state_bits_C911,d0	| [$b25b: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$b25e: res  7,a]
	cmp.b	#0x54,d0                         	| [$b260: cp   $54]
	jeq	l_b273                             	| [$b262: jp   z,$B273]
	cmp.b	#0x53,d0                         	| [$b265: cp   $53]
	jeq	l_b273                             	| [$b267: jp   z,$B273]
	jbsr	is_title_screen_demo_mode_B27E    	| [$b26a: call is_title_screen_demo_mode_B27E]
	move.b	#0x14,d1                      	| [$b26d: ld   bc,$1406]
	move.b	#0x06,d2                      	| [$b26d: ld   bc,$1406]
	cmp.b	#0x02,d0                         	| [$b270: cp   $02]
	beq.b	0f
	rts                                    	| [$b272: ret  nz]
0:
l_b273:
	move.b	#0xC0,d5                	| [$b273: ld   hl,unknown_C0D0]
	move.b	#0xD0,d6                	| [$b273: ld   hl,unknown_C0D0]
	move.b	#0x98,d3                        	| [$b276: ld   d,$98]
	jbsr	display_text_color_2_B3CE         	| [$b278: call display_text_color_2_B3CE]
l_b27b:
	move.l	(sp)+,a3                        	| [$b27b: pop  iy]
	rts                                    	| [$b27d: ret]

is_title_screen_demo_mode_B27E:
	move.b	background_and_state_bits_C911,d0	| [$b27e: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$b281: res  7,a]
	cmp.b	#0x50,d0                         	| [$b283: cp   $50] demo mode?
	jcs	l_b28b                             	| [$b285: jp   c,$B28B]
	clr.b	d0                               	| [$b288: ld   a,$00]
	rts                                    	| [$b28a: ret]
l_b28b:
	move.b	#0x02,d0                        	| [$b28b: ld   a,$02]
	rts                                    	| [$b28d: ret]

* < D1/D2: number of row/colums
* < D3/D4: D=character, E=attribute
* < D5/D6: start coords X,Y
fill_rectangle_B01B:
fill_rectangle_B28E:
	movem.w	d1/d2,-(sp)                    	| [$b28e: push bc]

	movem.w	d5/D6,-(sp)                        	| [$b28f: push hl]
	movem.w	d1/d2,-(sp)                    	| [$b290: push bc]
	movem.w	d3/d4,-(sp)                    	| [$b291: push de]
	move.l	a1,-(sp)                        	| [$b291: push de]
	jbsr	compute_screen_address_from_XY_B2F6	| [$b292: call compute_screen_address_from_XY_B2F6]
	move.l	(sp)+,a1                        	| [$b295: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$b295: pop  de]
	movem.w	(sp)+,d1/d2                    	| [$b296: pop  bc]
l_b297:
	movem.w	d1/d2,-(sp)                    	| [$b297: push bc]
	move.w	d0,-(sp)
	move.b	d4,d0                         	| [$b298: ld   (hl),e]
	jbsr	osd_w_videoram
	move.w	#0x400,d1                     	| [$b299: ld   bc,$0400]
	add.w	d1,d6                            	| [$b29c: add  hl,bc]
	move.b	d3,d0                         	| [$b29d: ld   (hl),d]
	jbsr	osd_w_colorram
	move.w	(sp)+,d0
	move.w	#0x03FF,d1                      	| [$b29e: ld   bc,$03FF]
											| [$b2a1: and  a]
	sub.w	d1,d6							| [sbc  hl,bc]
	movem.w	(sp)+,d1/d2                    	| [$b2a4: pop  bc]
	subq.b	#1,d1                           	| [$b2a5: dec  b]
	jne	l_b297                             	| [$b2a6: jp   nz,$B297]
	movem.w	(sp)+,d5/D6                        	| [$b2a9: pop  hl]
	subq.b	#1,d5                           	| [$b2aa: dec  h]
	movem.w	(sp)+,d1/d2                    	| [$b2ab: pop  bc]
	subq.b	#1,d2                           	| [$b2ac: dec  c]
	jne	fill_rectangle_B28E                             	| [$b2ad: jp   nz,$B28E]
	rts                                    	| [$b2b0: ret]
l_b2b1:
	rts                                    	| [$b2b1: ret]

clear_C7xx_B2B2:
	clr.b	d0                               	| [$b2b2: xor  a]
	lea	referee_x_pos_C700,a0          	| [$b2b3: ld   hl,referee_x_pos_C700]
	lea	unknown_C7FB,a4                	| [$b2b6: ld   bc,unknown_C7FB]
	jbsr	fill_zone_with_a_B2CA             	| [$b2b9: call fill_zone_with_a_B2CA]
	rts                                    	| [$b2bc: ret]

* < HL: pointer on zone to clear
* < BC: size
clear_zone_B2BD:
	move.l	(sp)+,a2                        	| [$b2bd: pop  ix] return address in ix
l_b2bf:
	clr.b	(a0)+                             	| [$b2bf: ld   (hl),$00] set to 0
									| [$b2c1: inc  hl] increment hl
	subq.w	#1,d1                           	| [$b2c2: dec  bc] decrement bc counter
											| [$b2c3: ld   a,b] test b=c=0
												| [$b2c4: or   c]
	jne	l_b2bf                             	| [$b2c5: jp   nz,$B2BF] not 0, keep looping
	jra	(a2)      
	

* < a: character to store
* < a0: start address
* < a4: end address (included)
fill_zone_with_a_B2CA:
	addq.w	#1,a4                           	| [$b2ca: inc  bc]
	move.b	d0,d3                           	| [$b2cb: ld   d,a]
l_b2cc:
	move.b	d3,(a0)+                         	| [$b2cc: ld   (hl),d]
	cmp.l	a0,a4										| [$b2cd: inc  hl]
	jne	l_b2cc                             	| [$b2d0: jp   nz,$B2CC]
	rts                                    	| [$b2d8: ret]
	
* < D5/D6: X,Y
* > D6: screen address
compute_screen_address_from_XY_B2F6:
	clr.b	d3                               	| [$b2f6: ld   d,$00]
	move.b	d5,d4                           	| [$b2f8: ld   e,h]
	asl.b	#1,d4                            	| [$b2f9: sla  e]
	roxl.b	#1,d3                           	| [$b2fb: rl   d]
	asl.b	#1,d4                            	| [$b2fd: sla  e]
	roxl.b	#1,d3                           	| [$b2ff: rl   d]
	asl.b	#1,d4                            	| [$b301: sla  e]
	roxl.b	#1,d3                           	| [$b303: rl   d]
	asl.b	#1,d4                            	| [$b305: sla  e]
	roxl.b	#1,d3                           	| [$b307: rl   d]
	asl.b	#1,d4                            	| [$b309: sla  e]
	roxl.b	#1,d3                           	| [$b30b: rl   d] results in DE = H*32
	clr.b	d0                               	| [$b30d: xor  a]
	move.b	d0,d5                           	| [$b30e: ld   h,a]
	lsl.w	#8,d5
	move.b	d6,d5
	
	lsl.w	#8,d3
	move.b	d4,d3
	move.w	#0xD3E0,d6                      	| [$b30f: ld   bc,$D3E0] screen address
	add.w	d5,d6                            	| [$b312: add  hl,bc]

	sub.w	d3,d6							| [sbc  hl,de]
	rts                                    	| [$b315: ret]


* fill video & attribute memory with an uniform value
* < d1.W: what to set in attribute memory / what to set in video memory

fill_video_and_attribute_memory_B316:
	move.w	#0xD000,d4                      	| [$b316: ld   hl,$D000]
	move.w	#0xD400,d5                      	| [$b316: ld   hl,$D000]
	move.w	#0x400,d3                      	| [$b31d: ld   de,$0400]
	move.b	d1,d2
	lsr.w	#8,d1
l_b320:
	move.w	d4,d6
	move.b	d2,d0                        	| [$b320: ld   (hl),c]
	jbsr	osd_w_videoram
	move.w	d5,d6
	move.b	d1,d0                    	| [$b324: ld   (ix+$00),b]
	jbsr	osd_w_colorram
	addq.w	#1,d4                           	| [$b327: inc  hl]
	addq.w	#1,d5                           	| [$b328: inc  ix]
	subq.w	#1,d3                           	| [$b32a: dec  de]
	jne	l_b320                             	| [$b32d: jp   nz,$B320]
	rts                                    	| [$b330: ret]

* display text
* <  hl pointer on text
* : format x y text (not in ASCII, tile-index based), ends by $FF
* codes are:
* 0-9: digits
* 10-35: A-Z
* 0x3C: space
* 0xFE: line feed, goto next line
* 0xFF: end

* <  d  color attribute

display_text_B357:

	move.l	a3,-(sp)                        	| [$b357: push iy]
	move.l	a0,a3                        	| [$b359: push hl]
	                        	| [$b35a: pop  iy]
	* a3 points on coords , color, + text
l_b35c:
	* get X
	move.b	(a3)+,d0                    	| [$b35c: ld   a,(iy+$00)]
	move.b	d0,d5                           	| [$b35f: ld   h,a]
											| [$b360: inc  iy]
	* get Y
	move.b	(a3),d0                    	| [$b362: ld   a,(iy+$00)]
	move.b	d0,d6                           	| [$b365: ld   l,a]
	movem.w	d3/d4,-(sp)                    	| [$b366: push de]
	move.l	a1,-(sp)                        	| [$b366: push de]
	jbsr	compute_screen_address_from_XY_B2F6	| [$b367: call compute_screen_address_from_XY_B2F6]
	move.l	(sp)+,a1                        	| [$b36a: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$b36a: pop  de]
l_b36b:
	addq.w	#1,a3                           	| [$b36b: inc  iy]
	move.b	(a3),d0                    	| [$b36d: ld   a,(iy+$00)]
	cmp.b	#0xFF,d0                         	| [$b370: cp   $FF] end of string?
	jeq	l_b38e                             	| [$b372: jp   z,$B38E]
* FE: end of string
	cmp.b	#0xFE,d0                         	| [$b375: cp   $FE]
	jne	l_b37f                             	| [$b377: jp   nz,$B37F]
	addq.w	#1,a3                           	| [$b37a: inc  iy]
	jra	l_b35c                             	| [$b37c: jp   $B35C]
l_b37f:
	jbsr	osd_w_videoram                 	| [$b37f: ld   (hl),a]
											| [$b380: ld   bc,$0400]
	add.w	#0x400,d6                            	| [$b383: add  hl,bc] attribute memory
	move.b	d3,d0
	jbsr	osd_w_colorram                         	| [$b384: ld   (hl),d]
	                      	| [$b385: ld   bc,$0420] next char
	                               	| [$b388: xor  a]
	sub.w	#0x420,d6				| [sbc  hl,bc]
	jra	l_b36b                             	| [$b38b: jp   $B36B]
l_b38e:
	move.l	(sp)+,a3                        	| [$b38e: pop  iy]
	rts                                    	| [$b390: ret]


* display text with possible color change
* <  hl pointer on text
* : format x y text/attribute (not in ASCII, tile-index based), ends by $FF
display_multicolor_text_B03C:
display_multicolor_text_B391:
	move.l	a3,-(sp)                        	| [$b391: push iy]
	move.l	a0,a3                        	| [$b393: push hl]
	                        	| [$b394: pop  iy]
l_b396:
	move.b	(a3)+,d0                    	| [$b396: ld   a,(iy+$00)]
	move.b	d0,d5                           	| [$b399: ld   h,a]
	                           	| [$b39a: inc  iy]
	move.b	(a3),d0                    	| [$b39c: ld   a,(iy+$00)]
	move.b	d0,d6                           	| [$b39f: ld   l,a]
	jbsr	compute_screen_address_from_XY_B2F6	| [$b3a0: call compute_screen_address_from_XY_B2F6]
l_b3a3:
	addq.w	#1,a3                           	| [$b3a3: inc  iy]
	move.b	(a3),d0                    	| [$b3a5: ld   a,(iy+$00)]
	cmp.b	#0xFF,d0                         	| [$b3a8: cp   $FF]
	jeq	l_b3cb                             	| [$b3aa: jp   z,$B3CB]
	cmp.b	#0xFE,d0                         	| [$b3ad: cp   $FE]
	jne	l_b3b7                             	| [$b3af: jp   nz,$B3B7]
	addq.w	#1,a3                           	| [$b3b2: inc  iy]
	jra	l_b396                             	| [$b3b4: jp   $B396]
l_b3b7:
	jbsr	osd_w_videoram                         	| [$b3b7: ld   (hl),a]
	move.w	#0x400,d1                      	| [$b3b8: ld   bc,$0400]
	add.w	d1,d6                            	| [$b3bb: add  hl,bc]

	addq.w	#1,a3                           	| [$b3bc: inc  iy]
	move.b	(a3),d0                    	| [$b3be: ld   a,(iy+$00)]
	jbsr	osd_w_colorram                  	| [$b3c1: ld   (hl),a]
	move.w	#0x420,d1                      	| [$b3c2: ld   bc,$0420]
	clr.b	d0                               	| [$b3c5: xor  a]
	sub.w	d1,d6							| [sbc  hl,bc]
	jra	l_b3a3                             	| [$b3c8: jp   $B3A3]
l_b3cb:
	move.l	(sp)+,a3                        	| [$b3cb: pop  iy]
	rts                                    	| [$b3cd: ret]

* not sure of what it exactly does. It displays text pointed by A0 at D1/D2
display_text_color_2_B3CE:
	move.l	a0,-(sp)                        	| [$b3ce: push hl]
	movem.w	d3/d4,-(sp)                    	| [$b3cf: push de]
	move.b	d1,d5                           	| [$b3d0: ld   h,b]
	move.b	d2,d6                           	| [$b3d1: ld   l,c]
	jbsr	compute_screen_address_from_XY_B2F6	| [$b3d2: call compute_screen_address_from_XY_B2F6]
	movem.w	(sp)+,d3/d4                    	| [$b3d5: pop  de]
	move.b	#0x03,d1                        	| [$b3d6: ld   b,$03]
	move.l	(sp)+,a3                        	| [$b3d8: pop  iy]
	clr.b	d2                               	| [$b3da: ld   c,$00]
l_b3dc:
	move.b	(a3),d0                    	| [$b3dc: ld   a,(iy+$00)]
	and.b	#0xF0,d0                         	| [$b3df: and  $F0]
	lsr.b	#4,d0                            	| [$b3e1: srl  a] * 4
	tst.b	d0                               	| [$b3e9: and  a]
	jeq	l_b3f2                             	| [$b3ea: jp   z,$B3F2]
	move.b	#0x01,d2                        	| [$b3ed: ld   c,$01]
	jra	l_b3fe                             	| [$b3ef: jp   $B3FE]
l_b3f2:
	addq.b	#1,d2                           	| [$b3f2: inc  c]
	subq.b	#1,d2                           	| [$b3f3: dec  c]
	jne	l_b3fe                             	| [$b3f4: jp   nz,$B3FE]
	subq.b	#1,d1                           	| [$b3f7: dec  b]
	jeq	l_b3fd                             	| [$b3f8: jp   z,$B3FD]
	move.b	#0x3C,d0                        	| [$b3fb: ld   a,$3C]
l_b3fd:
	addq.b	#1,d1                           	| [$b3fd: inc  b]
l_b3fe:
	jbsr	osd_w_videoram                         	| [$b3fe: ld   (hl),a]
	movem.w	d1/d2,-(sp)                    	| [$b3ff: push bc]
	move.w	#0x400,d1                      	| [$b400: ld   bc,$0400]
	add.w	d1,d6                            	| [$b403: add  hl,bc]
	move.w	d0,-(sp)
	move.b	d3,d0
	jbsr	osd_w_colorram                         	| [$b404: ld   (hl),d]
	move.w	(sp)+,d0
	tst.b	d0                               	| [$b405: and  a]
	sub.w	d1,d6							| [sbc  hl,bc]
	move.w	#0x20,d1     	| [$b408: ld   bc,task_address_table_0020]
	clr.b	d0                               	| [$b40b: xor  a]
	sub.w	d1,d6							| [sbc  hl,bc]
	movem.w	(sp)+,d1/d2                    	| [$b40e: pop  bc]
	move.b	(a3),d0                    	| [$b40f: ld   a,(iy+$00)]
	and.b	#0x0F,d0                         	| [$b412: and  $0F]
	jeq	l_b41c                             	| [$b414: jp   z,$B41C]
	move.b	#0x01,d2                        	| [$b417: ld   c,$01]
	jra	l_b428                             	| [$b419: jp   $B428]
l_b41c:
	addq.b	#1,d2                           	| [$b41c: inc  c]
	subq.b	#1,d2                           	| [$b41d: dec  c]
	jne	l_b428                             	| [$b41e: jp   nz,$B428]
	subq.b	#1,d1                           	| [$b421: dec  b]
	jeq	l_b427                             	| [$b422: jp   z,$B427]
	move.b	#0x3C,d0                        	| [$b425: ld   a,$3C]
l_b427:
	addq.b	#1,d1                           	| [$b427: inc  b]
l_b428:
	jbsr	osd_w_videoram                         	| [$b428: ld   (hl),a]
	movem.w	d1/d2,-(sp)                    	| [$b429: push bc]
	move.w	#0x400,d1                      	| [$b42a: ld   bc,$0400]
	add.w	d1,d6                            	| [$b42d: add  hl,bc]
	move.w	d0,-(sp)
	move.b	d3,d0
	jbsr	osd_w_colorram                         	| [$b404: ld   (hl),d]
	move.w	(sp)+,d0
	tst.b	d0                               	| [$b42f: and  a]
	sub.w	d1,d6							| [sbc  hl,bc]
	move.w	#0x0020,d1     	| [$b432: ld   bc,0x20]
	clr.b	d0                               	| [$b435: xor  a]
	sub.w	d1,d6							| [sbc  hl,bc]
	movem.w	(sp)+,d1/d2                    	| [$b438: pop  bc]
	addq.w	#1,a3                           	| [$b439: inc  iy]
	subq.b	#1,d1                           	| [$b43b: dec  b]
	jne	l_b3dc                             	| [$b43c: jp   nz,$B3DC]
	rts                                    	| [$b43f: ret]

* < ix: struct containing x,width,y,height
* < d: X
* < e: Y
* > a: 0 or FF
is_point_in_rectangle_B440:
	move.b	(0x00,a2),d0                    	| [$b440: ld   a,(ix+$00)]
	cmp.b	d3,d0                            	| [$b443: cp   d]
	jeq	l_b44a                             	| [$b444: jp   z,$B44A]
	jcc	l_b467                             	| [$b447: jp   nc,$B467]
l_b44a:
	add.b	(0x01,a2),d0                     	| [$b44a: add  a,(ix+$01)]
	cmp.b	d3,d0                            	| [$b44d: cp   d]
	jcs	l_b467                             	| [$b44e: jp   c,$B467] X out of range
	move.b	(0x02,a2),d0                    	| [$b451: ld   a,(ix+$02)]
	cmp.b	d4,d0                            	| [$b454: cp   e]
	jeq	l_b45b                             	| [$b455: jp   z,$B45B]
	jcc	l_b467                             	| [$b458: jp   nc,$B467]
l_b45b:
	add.b	(0x03,a2),d0                     	| [$b45b: add  a,(ix+$03)]
	cmp.b	d4,d0                            	| [$b45e: cp   e]
	jcs	l_b467                             	| [$b45f: jp   c,$B467]
	st.b	d0                                	| [$b462: ld   a,$FF]
	jra	l_b468                             	| [$b464: jp   $B468]
l_b467:
	clr.b	d0                               	| [$b467: xor  a]
l_b468:
	rts                                    	| [$b468: ret]

startup_B469:

	move.b	#0x42,d0                        	| [$b469: ld   a,$42]
	move.b	d0,unknown_CD21                 	| [$b46b: ld   (unknown_CD21),a]
	lea		stack_top_CF00,sp			| ld   sp,stack_top_CF00			| set stack
	jbsr	disable_interrupts_BBE2           	| [$b471: call disable_interrupts_BBE2]
* clear part of RAM
	lea	active_task_bit_table_C000,a0                	| [$b479: ld   hl,active_task_bit_table_C000]
	move.w	#0x0080,d1                      	| [$b47c: ld   bc,$0080] immediate value 128
	jbsr	clear_zone_B2BD                   	| [$b47f: call clear_zone_B2BD]
	jbsr	init_ram_BB41                     	| [$b482: call init_ram_BB41]
	st.b	d0                                	| [$b485: ld   a,$FF]
	move.b	d0,unknown_C02C                 	| [$b487: ld   (unknown_C02C),a]
	jbsr	enable_interrupts_BBE8            	| [$b48a: call enable_interrupts_BBE8]

* this is called by most routines that want to yield control to this mainloop
jump_to_mainloop_B48D:
	lea		stack_top_CF00,sp			| ld   sp,stack_top_CF00			| set stack
	jbsr	enable_interrupts_BBE8            	| [$b490: call enable_interrupts_BBE8]

* main "task" scheduler
* loop until one of the 2 timers/counters is nonzero
* jump at different locations
scheduler_loop_b493:
	lea	unknown_C006,a0                	| [$b493: ld   hl,unknown_C006]
	tst.b	nb_tasks_to_start_C029                 	| [$b496: ld   a,(nb_tasks_to_start_C029)]
											| [$b499: and  a]
	jne	run_a_task_b4a7                             	| [$b49a: jp   nz,$B4A7]

	tst.b	nb_suspended_tasks_C02A                 	| [$b49d: ld   a,(nb_suspended_tasks_C02A)]
											| [$b4a0: and  a]
	jne	resume_a_task_b503                             	| [$b4a1: jp   nz,$B503]
	jra	scheduler_loop_b493                             	| [$b4a4: jp   $B493]

*
* < A0 (HL): task bits structure (always 0xC006)
run_a_task_b4a7:
	clr.b	d0                               	| [$b4a7: xor  a]
	move.b	d0,d3                           	| [$b4a8: ld   d,a]
* check change of bitfield state $C006-$C00B notify bitfield changes
* looks like an event table: each routine can post events by setting
* bits, and the events are acknowledged by bitclears.
* depending on the bits set, we jump to different routines
*
* this is a task scheduler, with stack location change and all!!!
* find a non-zero slot
	move.b	#0x6,d6		| coupling D6 (L) with A0 (HL) to point on 0xC006
	cmp.b	(a0),d0                          	| [$b4a9: cp   (hl)]
	jne	l_b4b8                             	| [$b4aa: jp   nz,$B4B8]
	addq.w	#1,a0
	addq.b	#1,d6                           	| [$b4ad: inc  l]
	cmp.b	(a0),d0                          	| [$b4ae: cp   (hl)]
	jne	l_b4b8                             	| [$b4af: jp   nz,$B4B8]
	addq.w	#1,a0
	addq.b	#1,d6                           	| [$b4b2: inc  l]
	cmp.b	(a0),d0                          	| [$b4b3: cp   (hl)]
	jne	l_b4b8                             	| [$b4b4: jp   nz,$B4B8]
	* if not found pick the last slot (probably replace last running task if any)
	addq.w	#1,a0
	addq.b	#1,d6                           	| [$b4b7: inc  l]
l_b4b8:
	move.b	d6,d0                           	| [$b4b8: ld   a,l]
	subq.b	#0x06,d0                        	| [$b4b9: sub  $06] if first 0, then sub 06 gives 0
	moveq	#0,d4
	move.b	d0,d4                           	| [$b4bb: ld   e,a]
	rol.b	#3,d4                            	| [$b4bc: rlc  e] times 8
	clr.w	d2                               	| [$b4c2: ld   b,$00]
	move.b	(a0),d2                         	| [$b4c4: ld   c,(hl)]
												| [$b4c5: and  a] clear carry
	add.w	d2,d2                           	| [$b4c6: rl   c] times 2 on 16 bits (bc)
												| [$b4c8: rl   b]
	lea	table_B87D(pc),a2                  	| [$b4ca: ld   ix,table_B87D]
	add.w	d2,a2                            	| [$b4ce: add  ix,bc]

	move.b	(0x00,a2),d1                    	| [$b4d0: ld   b,(ix+$00)]
	move.b	(0x01,a2),d0                    	| [$b4d3: ld   a,(ix+$01)]
	add.b	d4,d0                            	| [$b4d6: add  a,e]
	move.b	d0,d4                           	| [$b4d7: ld   e,a]
	move.b	d0,current_task_index_C028   	| [$b4d8: ld   (current_task_index_C028),a]
	move.b	d1,d0                           	| [$b4db: ld   a,b]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$b4dc: xor  (hl)]
	* kind of zeroes slot, not of what's done here
	move.b	d0,(a0)                         	| [$b4dd: ld   (hl),a]

	add.w	d4,d4                            	| [$b4de: rlc  e]
	add.w	d4,d4                            	| double (long address)
	                               	| [$b4e0: ld   d,$00]
	lea	task_stack_buffer_table_B825(pc),a3      	| [$b4e2: ld   iy,task_stack_buffer_table_B825]
	add.w	d4,a3                            	| [$b4e6: add  iy,de]
	* switch stack pointer according to routine we jump to!!
	* (seems that they've coded a mini-OS for this game!)
	
	move.l	(a3),a7                    	| [$b4e8: ld   l,(iy+$00)]
										| [$b4eb: ld   h,(iy+$01)]
	
									| [$b4ef: ld   hl,nb_tasks_to_start_C029]
	subq.b	#1,nb_tasks_to_start_C029                         	| [$b4f2: dec  (hl)]
	lea		task_address_table_0020,a3                      	| [$b4f3: ld   iy,$0020] 32
	add.w	d4,d4                            	| double (long address)
	add.w	d4,a3                            	| [$b4f7: add  iy,de]

	move.l	(4,a3),a0                    	| [$b4f9: ld   l,(iy+$00)]
										| [$b4fc: ld   h,(iy+$01)]
	jbsr	enable_interrupts_BBE8            	| [$b4ff: call enable_interrupts_BBE8]
* startup call sequence:
* $5250
* $53D2
* $544F
* $6491
* $7C5D
* $6D5E
* $B099
* $B09C
* $B09F
*
* practice call sequence (after "press start to skip" timeout)
* $6529
* $755B
* $7657
* $3A9C
* $3A9C
*
* then called when screen changes
	* starts the task
*	move.l	(a3),d7		| debug
*	cmp.w	#0x3A9C,d7
*	bne.b	0f
*	jbsr		osd_break
*0:
	jmp	(a0)                               	| [$b502: jp   (hl)]


resume_a_task_b503:
	jbsr	disable_interrupts_BBE2           	| [$b503: call disable_interrupts_BBE2]
	lea	unknown_C00C,a0                	| [$b506: ld   hl,unknown_C00C]
										| [$b509: ld   iy,unknown_C00C]
	tst.l	(a0)                    	| [$b50d: ld   a,(iy+$00)] check for free slots
										| [$b510: or   (iy+$01)]
										| [$b513: or   (iy+$02)]
										| [$b516: or   (iy+$03)]
	jeq	jump_to_mainloop_B48D              	| [$b519: jp   z,jump_to_mainloop_B48D]
	clr.w	d4
	clr.b	d0                               	| [$b51c: xor  a]
	move.b	d0,d4 
	move.b	#0xC,d6			| lsw of original 0xC00C HL
	* compute free task slot?				| [$b51d: ld   d,a]
	cmp.b	(a0),d0                          	| [$b51e: cp   (hl)]
	jne	l_b52d                             	| [$b51f: jp   nz,$B52D]
	addq.w	#1,a0
	addq.w	#1,d6                           	| [$b522: inc  l]
	* check for 1 in task id
	cmp.b	(a0),d0                          	| [$b523: cp   (hl)]
	jne	l_b52d                             	| [$b524: jp   nz,$B52D]
	* check for 2 in task id
	addq.w	#1,a0
	addq.b	#1,d6                           	| [$b527: inc  l]
	cmp.b	(a0),d0                          	| [$b528: cp   (hl)]
	jne	l_b52d                             	| [$b529: jp   nz,$B52D]
	* has to be that slot
	addq.b	#1,d6                           	| [$b52c: inc  l]
l_b52d:
	move.b	d6,d0                           	| [$b52d: ld   a,l]
	sub.b	#0x0C,d0                         	| [$b52e: sub  $0C]
	move.b	d0,d4                           	| [$b530: ld   e,a]
	rol.b	#3,d4                            	| [$b531: rlc  e] * 3 multiply by 8
	tst.b	d0                               	| [$b537: and  a] clear carry?
	clr.w	d1                               	| [$b538: ld   b,$00]
	* get non-zero slot id
	move.b	(a0),d1                         	| [$b53a: ld   c,(hl)]
	add.w	d1,d1                           	| [$b53b: rl   c]
												| [$b53d: rl   b]
	lea	table_B87D(pc),a2                  	| [$b53f: ld   ix,table_B87D]
	add.w	d1,a2                            	| [$b543: add  ix,bc]*
	* get properties
	move.b	(0x00,a2),d1                    	| [$b545: ld   b,(ix+$00)]
	move.b	(0x01,a2),d0                    	| [$b548: ld   a,(ix+$01)]
	add.b	d4,d0                            	| [$b54b: add  a,e]
	move.b	d0,d4                           	| [$b54c: ld   e,a]
	move.b	d0,current_task_index_C028   	| [$b54d: ld   (current_task_index_C028),a]
	move.b	d1,d0                           	| [$b550: ld   a,b]
	move.b	(a0),d7
	eor.b	d7,d0                    	      	| [$b551: xor  (hl)]
	* zero/mask out slot
	move.b	d0,(a0)                         	| [$b552: ld   (hl),a]
	add.w	d4,d4                            	| [$b553: rlc  e]
	add.w	d4,d4                            	| double offset (long needs *4)
												| [$b555: ld   d,$00]
	lea	task_struct_table_B7E5(pc),a0                  	| [$b557: ld   hl,table_B7E5]
	add.w	d4,a0                            	| [$b55a: add  hl,de]
	* a0 = task structure
	* rather offset vs bottom than full address, as it would shift
	* task structure offsets. It's complex enough to avoid it!
	move.l	(a0),a0
	lea		stack_bottom_C400,a1
	add.w	(a0),a1
	
	* sets stack for this task 
	* looks like a mini-os with a task
	* scheduler and all!!!
	move.l	a1,sp

	* switch registers, get back A0 as task structure (not needed)
										| [$b564: ex   de,hl]
										| [$b565: ld   de,$0004] 4
	* add 4+1 (as DE gets an increase in the original code)
	addq.w	#5,a0                            	| [$b568: add  hl,de]
	* get another task property
	move.b	(a0)+,d1                         	| [$b569: ld   b,(hl)]
									| [$b56a: inc  hl]
	* get another task property (context)
	move.b	(a0),d0                         	| [$b56b: ld   a,(hl)]
	lea	nb_suspended_tasks_C02A,a0                	| [$b56c: ld   hl,nb_suspended_tasks_C02A]
	subq.b	#1,(a0)                         	| [$b56f: dec  (hl)]
	jbsr	enable_interrupts_BBE8            	| [$b570: call enable_interrupts_BBE8]
	* returns with stack properly set: returns to stack & resumes it
	rts                                    	| [$b573: ret]

* load iy with task/player structure depending on the active task
load_iy_with_player_structure_B04B:
load_iy_with_player_structure_B574:
	moveq	#0,d0
	move.b	current_task_index_C028,d0   	| [$b574: ld   a,(current_task_index_C028)]
	lea	task_struct_C100,a3            	| [$b577: ld   iy,task_struct_C100]
									| [$b57b: ld   b,a]
	* game uses 2x3 right 8-bit rotations with carry, which is equivalent to
	* 5 left 16-bit rotations
	lsl.w	#5,d0                            	| [$b57c: ld   c,$00]
	                            	| [$b57e: and  a]
	                           	| [$b57f: rr   b]
	                           	| [$b581: rr   c]
	                           	| [$b583: rr   b]
	                           	| [$b585: rr   c]
	                           	| [$b587: rr   b]
	                           	| [$b589: rr   c]
	add.w	d0,a3                            	| [$b58b: add  iy,bc]
	rts                                    	| [$b58d: ret]

load_struct_C100_from_A_index_B58E:
	lea	task_struct_C100,a3            	| [$b58e: ld   iy,task_struct_C100]
	moveq	#0,d1
	move.b	d0,d1                           	| [$b592: ld   b,a]
	* copied there and there. D1 = D0*0x20
	lsl.w	#5,d1                            	| [$b593: ld   c,$00]
												| [$b595: and  a]
											| [$b596: rr   b]
											| [$b598: rr   c]
											| [$b59a: rr   b]
											| [$b59c: rr   c]
											| [$b59e: rr   b]
											| [$b5a0: rr   c]
	add.w	d1,a3                            	| [$b5a2: add  iy,bc]
	rts                                    	| [$b5a4: ret]
	
task_yield_B5A5:
	jbsr	disable_interrupts_BBE2           	| [$b5a5: call disable_interrupts_BBE2]
	move.b	current_task_index_C028,d0   	| [$b5a8: ld   a,(current_task_index_C028)]
	lea	active_task_bit_table_C000,a0  	| [$b5ab: ld   hl,active_task_bit_table_C000]
	move.b	d0,d2                           	| [$b5ae: ld   c,a]
	clr.w	d1                               	| [$b5af: ld   b,$00]
	moveq	#0,d3                      	| [$b5b1: ld   de,$0000] 0
	and.b	#0x07,d0                         	| [$b5b4: and  $07]
	move.b	d0,d3                           	| [$b5b6: ld   e,a]
	move.b	d2,d0                           	| [$b5b7: ld   a,c]
	and.b	#0xF8,d0                         	| [$b5b8: and  $F8]
	ror.b	#3,d0                           	| [$b5ba: rra] * 3
	move.b	d0,d1                           	| [$b5bd: ld   c,a]
	add.w	d1,a0                            	| [$b5be: add  hl,bc]

	lea	powers_of_2_table_B875(pc),a2      	| [$b5bf: ld   ix,powers_of_2_table_B875]
	add.w	d3,a2                            	| [$b5c3: add  ix,de]

	move.b	(a2),d0                    	| [$b5c5: ld   a,(ix+$00)]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$b5c8: xor  (hl)]
	move.b	d0,(a0)                         	| [$b5c9: ld   (hl),a]
jump_to_mainloop_B5CA:
	jra	jump_to_mainloop_B48D              	| [$b5ca: jp   jump_to_mainloop_B48D]


* < A: task number
resume_task_B5CD:
	jbsr	disable_interrupts_BBE2           	| [$b5cd: call disable_interrupts_BBE2]
	lea	active_task_bit_table_C000,a0                	| [$b5d0: ld   hl,active_task_bit_table_C000]
	move.b	d0,d2                           	| [$b5d3: ld   c,a]
	moveq	#0,d1                               	| [$b5d4: ld   b,$00]
	moveq	#0,d3                      	| [$b5d6: ld   de,$0000] 0
	and.b	#0x07,d0                         	| [$b5d9: and  $07]
	move.b	d0,d3                           	| [$b5db: ld   e,a]
	move.b	d2,d0                           	| [$b5dc: ld   a,c]
	and.b	#0xF8,d0                         	| [$b5dd: and  $F8]
	ror.b	#3,d0                           	| [$b5df: rra] * 3
	move.b	d0,d1                           	| [$b5e2: ld   c,a]
	add.w	d1,a0                            	| [$b5e3: add  hl,bc]

	lea	powers_of_2_table_B875(pc),a2      	| [$b5e4: ld   ix,powers_of_2_table_B875]
	add.w	d3,a2                            	| [$b5e8: add  ix,de]

	move.b	(a2),d0                    	| [$b5ea: ld   a,(ix+$00)]
	move.b	d0,d1                           	| [$b5ed: ld   b,a]
	and.b	(a0),d0
	bne.b	0f
	rts                                    	| [$b5ef: ret  z]
0:
	* task found
	* mostly reached when screen changes (ex: highscores => title screen)

	move.b	d1,d0                           	| [$b5f0: ld   a,b]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$b5f1: xor  (hl)]
	move.b	d0,(a0)                         	| [$b5f2: ld   (hl),a]
	move.w	#0x0006,d3                      	| [$b5f3: ld   de,$0006] 6
	add.w	d3,a0                            	| [$b5f6: add  hl,de]
	move.b	d1,d0                           	| [$b5f7: ld   a,b]
	and.b	(a0),d0
	jeq	l_b607                             	| [$b5f9: jp   z,$B607]
	move.b	d1,d0                           	| [$b5fc: ld   a,b]
	move.b	(a0),d7
	eor.b	d7,d0                          	| [$b5fd: xor  (hl)]
	move.b	d0,(a0)                         	| [$b5fe: ld   (hl),a]
	lea	nb_tasks_to_start_C029,a0      	| [$b5ff: ld   hl,nb_tasks_to_start_C029]
	subq.b	#1,(a0)                         	| [$b602: dec  (hl)]
	jbsr	enable_interrupts_BBE8            	| [$b603: call enable_interrupts_BBE8]
	rts                                    	| [$b606: ret]

l_b607:
	add.w	d3,a0                            	| [$b607: add  hl,de]
	move.b	d1,d0                           	| [$b608: ld   a,b]
	and.b	(a0),d0
	jeq	l_b618                             	| [$b60a: jp   z,$B618]
	move.b	d1,d0                           	| [$b60d: ld   a,b]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$b5fd: xor  (hl)]
	move.b	d0,(a0)                         	| [$b60f: ld   (hl),a]
	lea	nb_suspended_tasks_C02A,a0     	| [$b610: ld   hl,nb_suspended_tasks_C02A]
	subq.b	#1,(a0)                         	| [$b613: dec  (hl)]
	jbsr	enable_interrupts_BBE8            	| [$b614: call enable_interrupts_BBE8]
	rts                                    	| [$b617: ret]

l_b618:
	add.w	d3,a0                            	| [$b618: add  hl,de]
	move.b	d1,d0                           	| [$b619: ld   a,b]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$b60e: xor  (hl)]
	move.b	d0,(a0)                         	| [$b61b: ld   (hl),a]
	jbsr	enable_interrupts_BBE8            	| [$b61c: call enable_interrupts_BBE8]
	rts                                    	| [$b61f: ret]

* < A: task index to schedule for start
* changes $C000-$C005 (bitfield 6*8 = 48 bits)
* returns changed bits in $C006-$C00B
* returns 0 if something changed, $FF otherwise
schedule_task_to_start_B620:
	jbsr	disable_interrupts_BBE2           	| [$b620: call disable_interrupts_BBE2]
	lea	active_task_bit_table_C000,a0                	| [$b623: ld   hl,active_task_bit_table_C000]
	move.b	d0,d2                           	| [$b626: ld   c,a]
	clr.w	d1                               	| [$b627: ld   b,$00]
	moveq	#0,d3                      	| [$b629: ld   de,$0000] 0
	and.b	#0x07,d0                         	| [$b62c: and  $07]
	move.b	d0,d3                           	| [$b62e: ld   e,a] A & 7 in E
	move.b	d2,d0                           	| [$b62f: ld   a,c] restore original A
	and.b	#0xF8,d0                         	| [$b630: and  $F8] mask it to get upper part (align on 8)
	* roxr => ror as a X flag can be persistent and cause issues!
	ror.b	#3,d0                           	| [$b632: rra] * 3 divide by 8
	move.b	d0,d1                           	| [$b635: ld   c,a]
	add.w	d1,a0                            	| [$b636: add  hl,bc]
	lea	powers_of_2_table_B875(pc),a2      	| [$b637: ld   ix,powers_of_2_table_B875]
	add.w	d3,a2                            	| [$b63b: add  ix,de]

* get proper power of 2 value in A (single bit value)
	move.b	(a2),d0                    	| [$b63d: ld   a,(ix+$00)]
	move.b	d0,d4                           	| [$b640: ld   e,a]
	and.b	(a0),d0							| [and  (hl)]
	jne	l_b658                             	| [$b642: jp   nz,$B658]
	move.b	d4,d0                           	| [$b645: ld   a,e]
	or.b	(a0),d0                           	| [$b646: or   (hl)]
	move.b	d0,(a0)                         	| [$b647: ld   (hl),a]
	moveq	#0x0006,d1                      	| [$b648: ld   bc,$0006] 6
        * next bitfield
	add.w	d1,a0                            	| [$b64b: add  hl,bc]
	move.b	d4,d0                           	| [$b64c: ld   a,e]
	or.b	(a0),d0                           	| [$b64d: or   (hl)]
	move.b	d0,(a0)                         	| [$b64e: ld   (hl),a]
	lea	nb_tasks_to_start_C029,a0      	| [$b64f: ld   hl,nb_tasks_to_start_C029]
	addq.b	#1,(a0)                         	| [$b652: inc  (hl)] increment timer
	clr.b	d0                               	| [$b653: xor  a]
	jbsr	enable_interrupts_BBE8            	| [$b654: call enable_interrupts_BBE8]
	rts                                    	| [$b657: ret]
l_b658:
	st.b	d0                                	| [$b658: ld   a,$FF]
	jbsr	enable_interrupts_BBE8            	| [$b65a: call enable_interrupts_BBE8]
	rts                                    	| [$b65d: ret]

* < a: time to suspend??
* this can be slower or faster if a computer is playing
* depending on the difficulty level
suspend_this_task_B05A:
suspend_this_task_B65E:
	jbsr	disable_interrupts_BBE2           	| [$b65e: call disable_interrupts_BBE2]
	move.w	d0,-(sp)                        	| [$b661: push af]
	move.b	current_task_index_C028,d0   	| [$b662: ld   a,(current_task_index_C028)]
	lea	unknown_C012,a0                	| [$b665: ld   hl,unknown_C012]
	move.b	d0,d2                           	| [$b668: ld   c,a]
	clr.w	d1                               	| [$b669: ld   b,$00]
	move.w	#0x0000,d3                      	| [$b66b: ld   de,$0000] 0
	and.b	#0x07,d0                         	| [$b66e: and  $07]
	move.b	d0,d3                           	| [$b670: ld   e,a]
	move.b	d2,d0                           	| [$b671: ld   a,c]
	and.b	#0xF8,d0                         	| [$b672: and  $F8]
	ror.b	#3,d0                           	| [$b674: rra] * 3
	move.b	d0,d1                           	| [$b677: ld   c,a]
	add.w	d1,a0                            	| [$b678: add  hl,bc]
	lea	powers_of_2_table_B875(pc),a2      	| [$b679: ld   ix,powers_of_2_table_B875]
	add.w	d3,a2                            	| [$b67d: add  ix,de]
	move.b	(a2),d0                    	| [$b67f: ld   a,(ix+$00)]
	or.b	(a0),d0                           	| [$b682: or   (hl)]
	move.b	d0,(a0)                         	| [$b683: ld   (hl),a]
	move.b	current_task_index_C028,d0   	| [$b684: ld   a,(current_task_index_C028)]
	* original code starts from C100 and assumes each task struct has 0x20 size
	lea	task_struct_C100,a3                	| [$b687: ld   iy,task_struct_C100]
	move.b	d0,d1                           	| [$b68b: ld   b,a]
	clr.b	d2                               	| [$b68c: ld   c,$00]
	tst.b	d0                               	| [$b68e: and  a]
	* multiply by 32, which bypasses task_struct_table_B7E5 pointer
	* table completely, and is VERY bad practice!
	* since we kept task struct with proper 0x20 size it works, though
	* TODO: optim: lsl.w	#5,d1
	roxr.b	#1,d1                           	| [$b68f: rr   b]
	roxr.b	#1,d2                           	| [$b691: rr   c]
	roxr.b	#1,d1                           	| [$b693: rr   b]
	roxr.b	#1,d2                           	| [$b695: rr   c]
	roxr.b	#1,d1                           	| [$b697: rr   b]
	roxr.b	#1,d2                           	| [$b699: rr   c]
	lsl.w	#8,d1
	move.b	d2,d1
	add.w	d1,a3                            	| [$b69b: add  iy,bc]
	move.w	(sp)+,d0                        	| [$b69d: pop  af]
* writes in task struct + 2: number of frames to wait until next frame
	move.b	d0,(0x02,a3)                    	| [$b69e: ld   (iy+$02),a]
	* get current stack (rather stack offset so we fit in 16 bits) 
	* to store it in the task structure
	                      	                   | [$b6a1: ld   hl,$0000] 0
	move.l	sp,d0                            	| [$b6a4: add  hl,sp]
	sub.l	#stack_bottom_C400,d0
	move.w	d0,(a3)           | [$b6a5: ld   (iy+$00),l]
	                          | [$b6a8: ld   (iy+$01),h]

	
	jra	jump_to_mainloop_B48D              	| [$b6ab: jp   jump_to_mainloop_B48D]

control_screen_flip_BB6F:
	rts
	
* seems to suspend a task but also make up for that and resume...
* < D0: ??
* < D1: user parameter: when task is resumed, D0 is set to this value
* > D0 0 or FF
task_manipulation_B6AE:
	jbsr	disable_interrupts_BBE2           	| [$b6ae: call disable_interrupts_BBE2]
	movem.w	d1/d2,-(sp)                    	| [$b6b1: push bc]
	move.w	d0,-(sp)                        	| [$b6b2: push af]
	lea	active_task_bit_table_C000,a0                	| [$b6b3: ld   hl,active_task_bit_table_C000]
	move.b	d0,d2                           	| [$b6b6: ld   c,a]
	clr.w	d1                               	| [$b6b7: ld   b,$00]
	moveq	#0,d3                      	| [$b6b9: ld   de,$0000] 0
	and.b	#0x07,d0                         	| [$b6bc: and  $07]
	move.b	d0,d3                           	| [$b6be: ld   e,a]
	move.b	d2,d0                           	| [$b6bf: ld   a,c]
	and.b	#0xF8,d0                         	| [$b6c0: and  $F8]
	ror.b	#3,d0                           	| [$b6c2: rra] * 3
	move.b	d0,d1                           	| [$b6c5: ld   c,a]
	add.w	d1,a0                            	| [$b6c6: add  hl,bc]

	move.l	a0,-(sp)                        	| [$b6c7: push hl]
	lea	powers_of_2_table_B875(pc),a2      	| [$b6c8: ld   ix,powers_of_2_table_B875]
	add.w	d3,a2                            	| [$b6cc: add  ix,de]

	move.b	(a2),d0                    	| [$b6ce: ld   a,(ix+$00)]
	move.b	d0,d1                           	| [$b6d1: ld   b,a]
	and.b	(a0),d0							| [and  (hl)]
	jeq	l_b726                             	| [$b6d3: jp   z,$B726]
											| [$b6d6: ld   de,$0006] 6
	addq.w	#6,a0                            	| [$b6d9: add  hl,de]
	move.b	d1,d0                           	| [$b6da: ld   a,b]
	and.b	(a0),d0							| [and  (hl)]
	jne	l_b726                             	| [$b6dc: jp   nz,$B726]
	move.b	d1,d0                           	| [$b6df: ld   a,b]
												| [$b6e0: ld   de,$000C] 12
	add.w	#0xc,a0                            	| [$b6e3: add  hl,de]

	move.b	d1,d0                           	| [$b6e4: ld   a,b]
	not.b	d0                               	| [$b6e5: cpl]
	and.b	(a0),d0							| [and  (hl)]
	move.b	d0,(a0)                         	| [$b6e7: ld   (hl),a]
	* get pushed hl value in de
	move.l	(sp)+,a1                        	| [$b6e8: pop  de]
	move.w	#0x000C,a0                      	| [$b6e9: ld   hl,$000C]
	* and add 12 to it
	add.l	a1,a0                            	| [$b6ec: add  hl,de]
	move.b	d1,d0                           	| [$b6ed: ld   a,b]
	and.b	(a0),d0							| [and  (hl)]
	jeq	l_b6f9                             	| [$b6ef: jp   z,$B6F9]
	* if condition met, one less task is suspended
	lea	nb_suspended_tasks_C02A,a3     	| [$b6f2: ld   iy,nb_suspended_tasks_C02A]
	subq.b	#1,(0x00,a3)                    	| [$b6f6: dec  (iy+$00)]
l_b6f9:
	move.b	d1,d0                           	| [$b6f9: ld   a,b]
	or.b	(a0),d0                           	| [$b6fa: or   (hl)]
	move.b	d0,(a0)                         	| [$b6fb: ld   (hl),a]
	move.w	(sp)+,d0                        	| [$b6fc: pop  af]
	lea	task_struct_C100,a3                	| [$b6fd: ld   iy,task_struct_C100]
	move.b	d0,d1                           	| [$b701: ld   b,a]
	clr.b	d2                               	| [$b702: ld   c,$00]
	tst.b	d0                               	| [$b704: and  a]
	roxr.b	#1,d1                           	| [$b705: rr   b]
	roxr.b	#1,d2                           	| [$b707: rr   c]
	roxr.b	#1,d1                           	| [$b709: rr   b]
	roxr.b	#1,d2                           	| [$b70b: rr   c]
	roxr.b	#1,d1                           	| [$b70d: rr   b]
	roxr.b	#1,d2                           	| [$b70f: rr   c]
	lsl.w	#8,d1
	move.b	d2,d1
	add.w	d1,a3                            	| [$b711: add  iy,bc]

	move.b	current_task_index_C028,d0   	| [$b713: ld   a,(current_task_index_C028)]
	move.b	d0,(0x05,a3)                    	| [$b716: ld   (iy+$05),a]
	movem.w	(sp)+,d1/d2                    	| [$b719: pop  bc]
	move.b	d1,(0x06,a3)                    	| [$b71a: ld   (iy+$06),b]
	lea	nb_suspended_tasks_C02A,a0     	| [$b71d: ld   hl,nb_suspended_tasks_C02A]
	addq.b	#1,(a0)                         	| [$b720: inc  (hl)]
	clr.b	d0                               	| [$b721: xor  a]
	jbsr	enable_interrupts_BBE8            	| [$b722: call enable_interrupts_BBE8]
	rts           

l_b726:
	move.l	(sp)+,a0                        	| [$b726: pop  hl]
	move.w	(sp)+,d0                        	| [$b727: pop  af]
	movem.w	(sp)+,d1/d2                    	| [$b728: pop  bc]
	st.b	d0                                	| [$b729: ld   a,$FF]
	jbsr	enable_interrupts_BBE8            	| [$b72b: call enable_interrupts_BBE8]
	rts                                    	| [$b72e: ret]
	
* main interrupt (vblank) routine, called every 1/60s
on_periodic_interrupt_B72F:
	*jbsr	disable_interrupts_BBE2           	| [$b735: call disable_interrupts_BBE2]
* update sprites into hardware registers
	lea	referee_x_pos_C700,a0          	| [$b738: ld   hl,referee_x_pos_C700]
	*lea	l_D800,a1                      	| [$b73b: ld   de,$D800]
	*move.w	#0xFC,d1                      	| [$b73e: ld   bc,$00FC]
	*jbsr	ldir                              	| [$b741: ldir]
	jbsr	osd_update_sprites
* increment attack counter
	addq.w	#1,periodic_counter_16bit_C02E	| [$b743: ld   hl,(periodic_counter_16bit_C02E)]
											| [$b746: inc  hl]
											| [$b747: ld   (periodic_counter_16bit_C02E),hl]
	addq.b	#1,periodic_counter_8bit_C02B   	| [$b74a: ld   a,(periodic_counter_8bit_C02B)]
											| [$b74d: inc  a]
											| [$b74e: ld   (periodic_counter_8bit_C02B),a]
	clr.b	d0                               	| [$b751: xor  a]
	jbsr	control_screen_flip_BB6F            	| [$b752: call control_screen_flip_BB6F]
	jbsr	manage_coin_inserted_BA7D         	| [$b755: call manage_coin_inserted_BA7D]
	lea	unknown_C012,a0                	| [$b758: ld   hl,unknown_C012]
	clr.w	d1                      	| [$b75b: ld   bc,$0000] 0  MSB always at zero
	clr.w	d2                      	| [$b75b: ld   bc,$0000] 0
	clr.w	d3                               	| [$b75e: ld   d,$00]
	jbsr	l_b77d                            	| [$b760: call $B77D]
	move.b	#0x08,d2                        	| [$b763: ld   c,$08]
	jbsr	l_b77d                            	| [$b765: call $B77D]
	move.b	#0x10,d2                        	| [$b768: ld   c,$10]
	jbsr	l_b77d                            	| [$b76a: call $B77D]
	move.b	#0x18,d2                        	| [$b76d: ld   c,$18]
	jbsr	l_b77d                            	| [$b76f: call $B77D]
	*jbsr	enable_interrupts_BBE8            	| [$b778: call enable_interrupts_BBE8]
	rts

l_b77d:
	move.b	(a0),d0                         	| [$b77d: ld   a,(hl)]
												| [$b77e: and  a]
	jne	l_b784                             	| [$b77f: jp   nz,$B784]
	addq.w	#1,a0                           	| [$b782: inc  hl]
	rts                                    	| [$b783: ret]
l_b784:
	clr.w	d4                               	| [$b784: ld   e,$00]
l_b786:
	tst.b	d0                               	| [$b786: and  a]
	jne	l_b78c                             	| [$b787: jp   nz,$B78C]
	addq.w	#1,a0                           	| [$b78a: inc  hl]
	rts                                    	| [$b78b: ret]
l_b78c:
	lsr.b	#1,d0                            	| [$b78c: srl  a]
	jcs	l_b795                             	| [$b78e: jp   c,$B795]
	addq.b	#1,d4                           	| [$b791: inc  e]
	jra	l_b786                             	| [$b792: jp   $B786]
l_b795:
	lea	task_struct_C100,a2            	| [$b795: ld   ix,task_struct_C100]
	move.w	d0,-(sp)                        	| [$b799: push af]
	move.b	d2,d0                           	| [$b79a: ld   a,c]
	add.b	d4,d0                            	| [$b79b: add  a,e]
	movem.w	d1/d2,-(sp)                    	| [$b79c: push bc]
	move.b	d0,d1                           	| [$b79d: ld   b,a]
	move.b	d3,d2                           	| [$b79e: ld   c,d]
	tst.b	d0                               	| [$b79f: and  a]
	roxr.b	#1,d1                           	| [$b7a0: rr   b]
	roxr.b	#1,d2                           	| [$b7a2: rr   c]
	roxr.b	#1,d1                           	| [$b7a4: rr   b]
	roxr.b	#1,d2                           	| [$b7a6: rr   c]
	roxr.b	#1,d1                           	| [$b7a8: rr   b]
	roxr.b	#1,d2                           	| [$b7aa: rr   c]
	lsl.w	#8,d1
	move.b	d2,d1
	add.w	d1,a2                            	| [$b7ac: add  ix,bc]
	movem.w	(sp)+,d1/d2                    	| [$b7ae: pop  bc]
* read current frame timeout value
	move.b	(0x02,a2),d0                    	| [$b7af: ld   a,(ix+$02)]
												| [$b7b2: and  a]
	jeq	l_b7e0                             	| [$b7b3: jp   z,$B7E0] zero => skip
	subq.b	#1,d0                           	| [$b7b6: dec  a] decrease frame value
	move.b	d0,(0x02,a2)                    	| [$b7b7: ld   (ix+$02),a] and store it
	jne	l_b7e0                             	| [$b7ba: jp   nz,$B7E0] non-zero => skip
* frame timeout reached (if ix == player 1 or player 2 struct C240 or C260)
* seems that it can be used for other animations or timeouts
* to put a breakpoint that filters player 2 animation: bp B7BD,ix == C260
	move.b	d0,(0x06,a2)                    	| [$b7bd: ld   (ix+$06),a]
	addq.b	#1,nb_suspended_tasks_C02A     	| [$b7c0: ld   ix,nb_suspended_tasks_C02A]
											| [$b7c4: inc  (ix+$00)]
	lea	powers_of_2_table_B875(pc),a2      	| [$b7c7: ld   ix,powers_of_2_table_B875]
	add.w	d4,a2                            	| [$b7cb: add  ix,de]
	move.b	(a2),d0                    	| [$b7cd: ld   a,(ix+$00)]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$b7d0: xor  (hl)]
	move.b	d0,(a0)                         	| [$b7d1: ld   (hl),a]

	move.l	a0,-(sp)                        	| [$b7d2: push hl]
	                    	| [$b7d3: push bc]
	                        	| [$b7d4: ld   c,$06]
												| [$b7d6: and  a] clear carry
	subq.w	#6,a0						| [sbc  hl,bc] B=0, C=6
	move.b	(a2),d0                    	| [$b7d9: ld   a,(ix+$00)]
	or.b	(a0),d0                           	| [$b7dc: or   (hl)]
	move.b	d0,(a0)                         	| [$b7dd: ld   (hl),a]
	                    	| [$b7de: pop  bc]
	move.l	(sp)+,a0                        	| [$b7df: pop  hl]
l_b7e0:
	move.w	(sp)+,d0                        	| [$b7e0: pop  af]
	addq.b	#1,d4                           	| [$b7e1: inc  e]
	jra	l_b786                             	| [$b7e2: jp   $B786]

task_struct_table_B7E5:
	.long	task_struct_C100                           	|  $b7e5
	.long	task_struct_C120                           	|  $b7e7
	.long	task_struct_C140                           	|  $b7e9
	.long	task_struct_C160                           	|  $b7eb
	.long	task_struct_C180                           	|  $b7ed
	.long	task_struct_C1A0                           	|  $b7ef
	.long	task_struct_C1C0                           	|  $b7f1
	.long	task_struct_C1E0                           	|  $b7f3
	.long	task_struct_C200                           	|  $b7f5
	.long	task_struct_C220                           	|  $b7f7
	.long	task_struct_C240                           	|  $b7f9
	.long	task_struct_C260                           	|  $b7fb
	.long	task_struct_C280                           	|  $b7fd
	.long	task_struct_C2A0                           	|  $b7ff
	.long	task_struct_C2C0                           	|  $b801
	.long	task_struct_C2E0                           	|  $b803
	.long	task_struct_C300                           	|  $b805
	.long	task_struct_C320                           	|  $b807
	.long	task_struct_C340                           	|  $b809
	.long	task_struct_C360                           	|  $b80b
	.long	task_struct_C380                           	|  $b80d
	.long	task_struct_C3A0                           	|  $b80f
	.long	task_struct_C3C0                           	|  $b811
	.long	task_struct_C3E0                           	|  $b813
	.long	task_struct_C400                           	|  $b815
	* this is probably not reached, and a mistake
	* as this overlaps the stack buffers
	* let it crash loudly if accessed!!!
	.long	-1   | task_struct_C420                           	|  $b817
	.long	-1   | task_struct_C440                           	|  $b819
	.long	-1   | task_struct_C460                           	|  $b81b
	.long	-1   | task_struct_C480                           	|  $b81d
	.long	-1   | task_struct_C4A0                           	|  $b81f
	.long	-1   | task_struct_C4C0                           	|  $b821
	.long	-1   | task_struct_C4E0                           	|  $b823
task_stack_buffer_table_B825:
	.long	stack_buffer_C420                           	|  $b825
	.long	stack_buffer_C440                           	|  $b827
	.long	stack_buffer_C460                           	|  $b829
	.long	stack_buffer_C480                           	|  $b82b
	.long	stack_buffer_C4A0                           	|  $b82d
	.long	stack_buffer_C4C0                           	|  $b82f
	.long	stack_buffer_C4E0                           	|  $b831
	.long	stack_buffer_C500                           	|  $b833
	.long	stack_buffer_C520                           	|  $b835
	.long	stack_buffer_C540                           	|  $b837
	.long	stack_buffer_C560                           	|  $b839
	.long	stack_buffer_C580                           	|  $b83b
	.long	stack_buffer_C5A0                           	|  $b83d
	.long	stack_buffer_C5C0                           	|  $b83f
	.long	stack_buffer_C5E0                           	|  $b841
	.long	stack_buffer_C600                           	|  $b843
	.long	stack_buffer_C620                           	|  $b845
	.long	stack_buffer_C640                           	|  $b847
	.long	stack_buffer_C660                           	|  $b849
	.long	stack_buffer_C680                           	|  $b84b
	.long	stack_buffer_C6A0                           	|  $b84d
	.long	stack_buffer_C6C0                           	|  $b84f
	.long	stack_buffer_C6E0                           	|  $b851
	.long	stack_buffer_C700                           	|  $b853
	.long	-1   | stack_buffer_C720                           	|  $b855
	.long	-1   | stack_buffer_C740                           	|  $b857
	.long	-1   | stack_buffer_C760                           	|  $b859
	.long	-1   | stack_buffer_C780                           	|  $b85b
	.long	-1   | stack_buffer_C7A0                           	|  $b85d
	.long	-1   | stack_buffer_C7C0                           	|  $b85f
	.long	-1   | stack_buffer_C7E0                           	|  $b861
	.long	-1   | stack_buffer_C800                           	|  $b863
	.long	active_task_bit_table_C000                           	|  $b865
	.long	unknown_C008                           	|  $b867
	.long	unknown_C010                           	|  $b869
	.long	unknown_C018                           	|  $b86b
	.long	unknown_C020                           	|  $b86d
	.long	current_task_index_C028                           	|  $b86f
	.long	dip_switches_copy_C030                          	|  $b871
	.long	unknown_C038                           	|  $b873


powers_of_2_table_B875:
	dc.b	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80 | $b875
table_B87D:
	dc.b	0x00,0x00,0x01,0x00,0x02,0x01,0x01,0x00 | $b87d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b885
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b88d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b895
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $b89d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b8a5
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b8ad
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b8b5
	dc.b	0x20,0x05,0x01,0x00,0x02,0x01,0x01,0x00 | $b8bd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b8c5
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b8cd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b8d5
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $b8dd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b8e5
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b8ed
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b8f5
	dc.b	0x40,0x06,0x01,0x00,0x02,0x01,0x01,0x00 | $b8fd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b905
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b90d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b915
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $b91d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b925
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b92d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b935
	dc.b	0x20,0x05,0x01,0x00,0x02,0x01,0x01,0x00 | $b93d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b945
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b94d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b955
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $b95d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b965
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b96d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b975
	dc.b	0x80,0x07,0x01,0x00,0x02,0x01,0x01,0x00 | $b97d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b985
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b98d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b995
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $b99d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b9a5
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b9ad
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b9b5
	dc.b	0x20,0x05,0x01,0x00,0x02,0x01,0x01,0x00 | $b9bd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b9c5
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b9cd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b9d5
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $b9dd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b9e5
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b9ed
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b9f5
	dc.b	0x40,0x06,0x01,0x00,0x02,0x01,0x01,0x00 | $b9fd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba05
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $ba0d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba15
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $ba1d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba25
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $ba2d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba35
	dc.b	0x20,0x05,0x01,0x00,0x02,0x01,0x01,0x00 | $ba3d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba45
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $ba4d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba55
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $ba5d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba65
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $ba6d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba75

manage_coin_inserted_BA7D:
	lea	nb_credits_minus_one_C024,a2   	| [$ba7d: ld   ix,nb_credits_minus_one_C024]
	jbsr	check_coin_ports_BB82             	| [$ba81: call check_coin_ports_BB82]
	and.b	#0xC0,d0                         	| [$ba84: and  $C0]
	move.b	d0,d1                           	| [$ba86: ld   b,a]
	jeq	l_bacd                             	| [$ba87: jp   z,$BACD]
	btst.b	#7,d0                           	| [$ba8a: bit  7,a]
	jeq	l_baa9                             	| [$ba8c: jp   z,$BAA9]
	btst.b	#7,(0x03,a2)                    	| [$ba8f: bit  7,(ix+$03)]
	jne	l_baa9                             	| [$ba93: jp   nz,$BAA9]
	addq.b	#1,(0x01,a2)                    	| [$ba96: inc  (ix+$01)]
	move.b	#0x20,d0                        	| [$ba99: ld   a,$20]
	jbsr	stop_sound_BBDF                   	| [$ba9b: call stop_sound_BBDF]
	move.b	dip_switches_copy_C030,d0       	| [$ba9e: ld   a,(dip_switches_copy_C030)]
	and.b	#0x03,d0                         	| [$baa1: and  $03]
	lea	unknown_C025,a0                	| [$baa3: ld   hl,unknown_C025]
	jbsr	l_bae6                            	| [$baa6: call $BAE6]
l_baa9:
	move.b	d1,d0                           	| [$baa9: ld   a,b]
	btst.b	#6,d0                           	| [$baaa: bit  6,a]
	jeq	l_bacd                             	| [$baac: jp   z,$BACD]
	btst.b	#6,(0x03,a2)                    	| [$baaf: bit  6,(ix+$03)]
	jne	l_bacd                             	| [$bab3: jp   nz,$BACD]
	addq.b	#1,(0x02,a2)                    	| [$bab6: inc  (ix+$02)]
	move.b	#0x20,d0                        	| [$bab9: ld   a,$20]
	jbsr	stop_sound_BBDF                   	| [$babb: call stop_sound_BBDF]
	move.b	dip_switches_copy_C030,d0       	| [$babe: ld   a,(dip_switches_copy_C030)]
	lsr.b	#2,d0                            	| [$bac1: srl  a] * 2
	and.b	#0x03,d0                         	| [$bac5: and  $03]
	lea	unknown_C026,a0                	| [$bac7: ld   hl,unknown_C026]
	jbsr	l_bae6                            	| [$baca: call $BAE6]
l_bacd:
	move.b	d1,(0x03,a2)                    	| [$bacd: ld   (ix+$03),b]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$bad0: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x03,d0                         	| [$bad3: and  $03]
	jne	l_bae5                             	| [$bad5: jp   nz,$BAE5]
	move.b	nb_credits_minus_one_C024,d0    	| [$bad8: ld   a,(nb_credits_minus_one_C024)]
												| [$badb: and  a]
	jeq	l_bae5                             	| [$badc: jp   z,$BAE5]
	clr.b	d0                               	| [$badf: xor  a]
	move.b	#0x06,d1                        	| [$bae0: ld   b,$06]
	jbsr	task_manipulation_B6AE            	| [$bae2: call task_manipulation_B6AE]
l_bae5:
	rts                                    	| [$bae5: ret]
l_bae6:
	* one credit per coin
	tst.b	d0                               	| [$bae6: and  a]
	jne	l_bafa                             	| [$bae7: jp   nz,$BAFA]
	move.b	(0x00,a2),d0                    	| [$baea: ld   a,(ix+$00)]
	moveq	#1,d7
	abcd	d7,d0                        	| [$baed: add  a,$01]
	move.b	d0,(0x00,a2)                    	| [$baf0: ld   (ix+$00),a]
	subq.b	#1,(a0)                         	| [$baf3: dec  (hl)]
	beq.b	0f
	jbsr	display_error_text_B186           	| [$baf4: call nz,display_error_text_B186]
0:
	jra	l_bb40                             	| [$baf7: jp   $BB40]
	* 2 credit per coin
l_bafa:
	cmp.b	#0x01,d0                         	| [$bafa: cp   $01]
	jne	l_bb0f                             	| [$bafc: jp   nz,$BB0F]
	move.b	(0x00,a2),d0                    	| [$baff: ld   a,(ix+$00)]
	moveq	#2,d7
	abcd	d7,d0                        	| [$bb02: add  a,$02]
	move.b	d0,(0x00,a2)                    	| [$bb05: ld   (ix+$00),a]
	subq.b	#1,(a0)                         	| [$bb08: dec  (hl)]
	beq.b	0f
	jbsr	display_error_text_B186           	| [$bb09: call nz,display_error_text_B186]
0:
	jra	l_bb40                             	| [$bb0c: jp   $BB40]
l_bb0f:
	cmp.b	#0x02,d0                         	| [$bb0f: cp   $02]
	jne	l_bb2b                             	| [$bb11: jp   nz,$BB2B]
	move.b	(a0),d0                         	| [$bb14: ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [$bb15: cp   $02]
	jcs	l_bb40                             	| [$bb17: jp   c,$BB40]
	move.b	(0x00,a2),d0                    	| [$bb1a: ld   a,(ix+$00)]
	moveq	#1,d7
	abcd	d7,d0                        	| [$bb1d: add  a,$01]
	move.b	d0,(0x00,a2)                    	| [$bb20: ld   (ix+$00),a]
	subq.b	#2,(a0)                         	| [$bb23: dec  (hl)] * 2
	beq.b	0f
	jbsr	display_error_text_B186           	| [$bb25: call nz,display_error_text_B186]
0:
	jra	l_bb40                             	| [$bb28: jp   $BB40]
l_bb2b:
	move.b	(a0),d0                         	| [$bb2b: ld   a,(hl)]
	cmp.b	#0x03,d0                         	| [$bb2c: cp   $03]
	jcs	l_bb40                             	| [$bb2e: jp   c,$BB40]
	move.b	(0x00,a2),d0                    	| [$bb31: ld   a,(ix+$00)]
	moveq	#1,d7
	abcd	d7,d0                        	| [$bb34: add  a,$01]
	move.b	d0,(0x00,a2)                    	| [$bb37: ld   (ix+$00),a]
	subq.b	#3,(a0)                         	| [$bb3a: dec  (hl)] * 3
	beq.b	0f
	jbsr	display_error_text_B186           	| [$bb3d: call nz,display_error_text_B186]
0:
l_bb40:
	rts                                    	| [$bb40: ret]
	
init_ram_BB41:
* clear video ram
	*lea	l_D000(pc),a0                      	| [$bb44: ld   hl,$D000]
	*lea	l_1000(pc),a4                      	| [$bb47: ld   bc,$1000] immediate value
	*jbsr	clear_zone_B2BD                   	| [$bb4a: call clear_zone_B2BD]
* clear ram
	*lea	active_task_bit_table_C000,a0                	| [$bb4d: ld   hl,active_task_bit_table_C000]
	*move.w	#0x1000,d1                      	| [$bb50: ld   bc,$1000] immediate value
	*jbsr	clear_zone_B2BD                   	| [$bb53: call clear_zone_B2BD]
* init ram with some startup values
	jbsr	init_C040_F6E5                    	| [$bb57: call init_C040_F6E5]
	move.b	#0x02,d0                        	| [$bb5a: ld   a,$02]
	move.b	d0,unknown_C0C0                 	| [$bb5c: ld   (unknown_C0C0),a]
	jbsr	get_dip_switches_BB92             	| [$bb5f: call get_dip_switches_BB92]
	move.b	d0,dip_switches_copy_C030       	| [$bb62: ld   (dip_switches_copy_C030),a]
	clr.b	d0                               	| [$bb65: xor  a]
	jbsr	schedule_task_to_start_B620                 	| [$bb66: call schedule_task_to_start_B620]
	move.b	#0x80,d0                        	| [$bb69: ld   a,$80]
	jbsr	stop_sound_BBDF                   	| [$bb6b: call stop_sound_BBDF]
	rts                                    	| [$bb6e: ret]

set_normal_screen_bb72:
	rts

* read system port
check_coin_ports_B069:
check_coin_ports_BB82:
	movem.w	d1/d2,-(sp)                    	| [$bb82: push bc]                       	| [$bb82: push bc]
	jbsr	osd_read_inputs
	swap	d0
	not.b	d0                               	| [$bb85: cpl]
* only 4 first bits are used
*	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_COIN1 )
*	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_COIN2 )
*	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_START1 )
*	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_START2 )
	and.b	#0x0F,d0                         	| [$bb86: and  $0F]
	move.b	d0,d1                           	| [$bb88: ld   b,a]
	ror.b	#2,d0                            	| [$bb89: rrca] * 2
	and.b	#0xC0,d0                         	| [$bb8b: and  $C0] coin inserted bits
	or.b	d1,d0                             	| [$bb8d: or   b]
	and.b	#0xCC,d0                         	| [$bb8e: and  $CC]
	movem.w	(sp)+,d1/d2                    	| [$bb90: pop  bc]
	rts                                    	| [$bb91: ret]

get_dip_switches_BB92:
	jbsr	osd_read_dipswitches
	not.b	d0                               	| [$bb94: cpl] invert bits (active low logic)
	rts                                    	| [$bb95: ret]

read_current_player_controls_BB96:
	moveq	#0,d0
	rts
	
disable_interrupts_B0BD:
disable_interrupts_BBE2:
	jbsr		osd_disable_vblank_interrupt
	rts
enable_interrupts_b0c0:	
enable_interrupts_BBE8:
	jbsr		osd_enable_vblank_interrupt
	rts

play_sound_BBB5:
	move.w	d0,-(sp)                        	| [$bbb5: push af]
	move.b	dip_switches_copy_C030,d0       	| [$bbb6: ld   a,(dip_switches_copy_C030)]
	btst.b	#6,d0                           	| [$bbb9: bit  6,a] demo sounds enabled
	jne	l_bbc6                             	| [$bbbb: jp   nz,$BBC6] if demo sounds enabled, play anyway
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$bbbe: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x03,d0                         	| [$bbc1: and  $03]
	jeq	l_bbdd                             	| [$bbc3: jp   z,$BBDD] both players are CPU: demo: exit
l_bbc6:
	move.w	(sp),d0                        	| [$bbc6: pop  af]
	                        	| [$bbc7: push af]
	cmp.b	#0x80,d0                         	| [$bbc8: cp   $80]
	jne	l_bbda                             	| [$bbca: jp   nz,$BBDA]
	clr.b	d0                               	| [$bbcd: ld   a,$00]
*out  ($02),a
	move.b	#0x01,d0                        	| [$bbd1: ld   a,$01]
*out  ($02),a
	jra	l_bbdd                             	| [$bbd5: jp   $BBDD]
	move.w	(sp),d0                        	| [$bbd8: pop  af]
	                        	| [$bbd9: push af]
l_bbda:
	jbsr	stop_sound_BBDF                   	| [$bbda: call stop_sound_BBDF]
l_bbdd:
	move.w	(sp)+,d0                        	| [$bbdd: pop  af]
	rts                                    	| [$bbde: ret]

stop_sound_BBDF:
	jra	osd_sound_stop	| [$bbe1: ret]

* 3 entries to call E031, d0=0,4 or 6
* D0: is then used to pick a value from table in address_table_E24C
l_e000:
	clr.b	d0                               	| [$e000: ld   a,$00]
	lea	game_mem+0xE008,a0                  	| [$e002: ld   hl,table_E008]
	jra	l_e031                             	| [$e005: jp   $E031]

l_e021:
	move.b	#0x04,d0                        	| [$e021: ld   a,$04]
	lea	game_mem+0xE320,a0                  	| [$e023: ld   hl,table_E320]
	jra	l_e031                             	| [$e026: jp   $E031]

l_e029:
	move.b	#0x06,d0                        	| [$e029: ld   a,$06]
	lea	game_mem+0xE326,a0                  	| [$e02b: ld   hl,table_E326]                             	| [$e02e: jp   $E031]

l_e031:
	move.l	a0,-(sp)                        	| [$e031: push hl]
	move.w	d0,-(sp)                        	| [$e032: push af]
	move.b	#0x15,d0                        	| [$e033: ld   a,$15]
	jbsr	schedule_task_to_start_B620       	| [$e035: call schedule_task_to_start_B620]
	move.b	#0x16,d0                        	| [$e038: ld   a,$16]
	jbsr	schedule_task_to_start_B620       	| [$e03a: call schedule_task_to_start_B620]
	move.b	#0x17,d0                        	| [$e03d: ld   a,$17]
	jbsr	schedule_task_to_start_B620       	| [$e03f: call schedule_task_to_start_B620]
	move.b	#0x01,d0                        	| [$e042: ld   a,$01]
	jbsr	suspend_this_task_B65E            	| [$e044: call suspend_this_task_B65E]
	move.w	(sp)+,d0                        	| [$e047: pop  af]
	move.b	d0,d1                           	| [$e048: ld   b,a]
	move.w	d0,-(sp)                        	| [$e049: push af]
	move.b	#0x15,d0                        	| [$e04a: ld   a,$15]
	jbsr	task_manipulation_B6AE            	| [$e04c: call task_manipulation_B6AE]
	move.w	(sp)+,d0                        	| [$e04f: pop  af]
	move.b	d0,d1                           	| [$e050: ld   b,a]
	move.w	d0,-(sp)                        	| [$e051: push af]
	move.b	#0x16,d0                        	| [$e052: ld   a,$16]
	jbsr	task_manipulation_B6AE            	| [$e054: call task_manipulation_B6AE]
	move.w	(sp)+,d0                        	| [$e057: pop  af]
	move.b	d0,d1                           	| [$e058: ld   b,a]
	move.b	#0x17,d0                        	| [$e059: ld   a,$17]
	jbsr	task_manipulation_B6AE            	| [$e05b: call task_manipulation_B6AE]
	jbsr	load_iy_with_player_structure_B574	| [$e05e: call load_iy_with_player_structure_B574]
	move.l	(sp)+,a0                        	| [$e061: pop  hl]
l_e062:
	clr.b	(0x1d,a3)                        	| [$e062: ld   (iy+$1d),$00]
	* get data from table_E326, table_E008, table_E320, also
	* tables that are stored as offsets in address_table_E24C (16 bit)
	* read 2 bytes from table and store them, increase pointer
	move.b	(a0)+,d0                         	| [$e066: ld   a,(hl)] 
	move.b	d0,(0x1e,a3)                    	| [$e067: ld   (iy+$1e),a]
												| [$e06a: inc  hl]
	move.b	(a0)+,d0                         	| [$e06b: ld   a,(hl)]
	move.b	d0,(0x1f,a3)                    	| [$e06c: ld   (iy+$1f),a]
												| [$e06f: inc  hl]
	* store A0 current value in player structure (pointing on 3rd value of the table)
	jbsr		store_a0_in_a3_structure_1b_address   | [$e070: ld   (iy+$1b),l]
	                                              | [$e073: ld   (iy+$1c),h]
l_e076:
	jbsr	load_iy_with_player_structure_B574	| [$e076: call load_iy_with_player_structure_B574]
	bsr		load_a0_from_a3_structure_1b_address  | [$e079: ld   l,(iy+$1b)]
	                                              | [$e07c: ld   h,(iy+$1c)]
	move.l	a0,a2                        	| [$e07f: push hl]
											| [$e080: pop  ix]
	move.b	(0x00,a2),d0                    	| [$e082: ld   a,(ix+$00)]
	cmp.b	#0xFD,d0                         	| [$e085: cp   $FD]
	jeq	l_case_FD_e0e6                             	| [$e087: jp   z,$E0E6]
	cmp.b	#0xFF,d0                         	| [$e08a: cp   $FF]
	jeq	l_case_FF_e108                             	| [$e08c: jp   z,$E108]
	cmp.b	#0xFE,d0                         	| [$e08f: cp   $FE]
	jeq	l_case_FE_e19a                             	| [$e091: jp   z,$E19A]
	cmp.b	#0xFC,d0                         	| [$e094: cp   $FC]
	jeq	l_case_FC_e1b0                             	| [$e096: jp   z,$E1B0]
	cmp.b	#0xFB,d0                         	| [$e099: cp   $FB]
	jeq	l_case_FB_e10b                             	| [$e09b: jp   z,$E10B]
	cmp.b	#0xFA,d0                         	| [$e09e: cp   $FA]
	jeq	l_case_FA_e0dd                             	| [$e0a0: jp   z,$E0DD]
	cmp.b	#0xF9,d0                         	| [$e0a3: cp   $F9]
	jeq	l_case_F9_e0c7                             	| [$e0a5: jp   z,$E0C7]
	cmp.b	#0xF8,d0                         	| [$e0a8: cp   $F8]
	jne	l_e125                             	| [$e0aa: jp   nz,$E125]
	* next value: entrypoint hidden in table
	
	move.b	(0x02,a2),d5                    	| [$e0b0: ld   h,(ix+$02)]
	lsl.w	#8,d5
	move.b	(0x01,a2),d5                    	| [$e0ad: ld   l,(ix+$01)]
	
	* now check if we know this entrypoint (there aren't a lot of them)
	* and convert offset to real entrypoint
	sub.l	a0,a0
	entrypoint_16	e7d2
	entrypoint_16	ed58
	cmp.l	#0,a0
	bne.b	0f
	jbsr	osd_break
	trap	#11
0:
	pea	l_e076(pc)                      	| [$e0b3: ld   de,$E076] entrypoint, return address for jump?
											| [$e0b6: push de]
	* increase a2 to go after byte, and address
	addq.w	#3,a2                           	| [$e0b7: inc  ix] * 3

	move.l	a2,a1                        	| [$e0bd: push ix]
	                        	| [$e0bf: pop  de]
	* store a2 address (comes from one of the tables table_E008, ... so probably OK to offset)
	jbsr		store_a1_in_a3_structure_1b_address | [$e0c0: ld   (iy+$1b),e]
											| [$e0c3: ld   (iy+$1c),d]
	jra	(a0)                               	| [$e0c6: jp   (hl)]
l_case_F9_e0c7:
	move.b	(0x01,a2),d0                    	| [$e0c7: ld   a,(ix+$01)]
	addq.w	#2,a2                           	| [$e0ca: inc  ix] * 2

	move.l	a2,a0                        	| [$e0ce: push ix]
											| [$e0d0: pop  hl]
	jbsr		store_a0_in_a3_structure_1b_address	| [$e0d1: ld   (iy+$1b),l]
												| [$e0d4: ld   (iy+$1c),h]
	jbsr	suspend_this_task_B65E            	| [$e0d7: call suspend_this_task_B65E]
	jra	l_e076                             	| [$e0da: jp   $E076]
l_case_FA_e0dd:
	* called if table like E008 (0xFA code)
	addq.w	#1,a2                           	| [$e0dd: inc  ix]
	* next value: entrypoint hidden in table
	
	move.b	(0x01,a2),d5                    	| [$e0df: ld   l,(ix+$00)]
	lsl.w	#8,d5                                 
	move.b	(0x00,a2),d5                    	| [$e0e2: ld   h,(ix+$01)]
											| 
	* now check if we know this entrypoint (there aren't a lot of them)
	* and convert offset to real entrypoint
	sub.l	a0,a0
	entrypoint_16	f631
	entrypoint_16	eca8
	cmp.l	#0,a0
	bne.b	0f
	trap	#12
0:
											| 
	jra	(a0)                               	| [$e0e5: jp   (hl)]
l_case_FD_e0e6:
	trap	#11
	move.b	(0x01,a2),d0                    	| [$e0e6: ld   a,(ix+$01)]
	move.b	(0x02,a2),d1                    	| [$e0e9: ld   b,(ix+$02)]

	move.l	a2,-(sp)                        	| [$e0ec: push ix]

	move.l	a3,-(sp)                        	| [$e0ee: push iy]
	jbsr	task_manipulation_B6AE            	| [$e0f0: call task_manipulation_B6AE]
	move.l	(sp)+,a3                        	| [$e0f3: pop  iy]
	move.l	(sp)+,a2                        	| [$e0f5: pop  ix]
	move.w	#0x0003,d1                      	| [$e0f7: ld   bc,$0003] 3
	add.w	d1,a2                            	| [$e0fa: add  ix,bc]

	move.l	a2,a0                        	| [$e0fc: push ix]
											| [$e0fe: pop  hl]
	jbsr		store_a0_in_a3_structure_1b_address		| [$e0ff: ld   (iy+$1b),l]
											| [$e102: ld   (iy+$1c),h]
	jra	l_e076                             	| [$e105: jp   $E076]
l_case_FF_e108:
	jbsr	task_yield_B5A5                   	| [$e108: call task_yield_B5A5]
l_case_FB_e10b:

	move.l	a3,-(sp)                        	| [$e10b: push iy]

	move.l	a2,-(sp)                        	| [$e10d: push ix]
	clr.b	d0                               	| [$e10f: xor  a]
	jbsr	suspend_this_task_B65E            	| [$e110: call suspend_this_task_B65E]
	move.l	(sp)+,a2                        	| [$e113: pop  ix]
	move.l	(sp)+,a3                        	| [$e115: pop  iy]
	addq.w	#1,a2                           	| [$e117: inc  ix]

	move.l	a2,a0                        	| [$e119: push ix]
	                        	| [$e11b: pop  hl]
	jbsr		store_a0_in_a3_structure_1b_address  | [$e11c: ld   (iy+$1b),l]
												| [$e11f: ld   (iy+$1c),h]
	jra	l_e076                             	| [$e122: jp   $E076]
l_e125:
	* computing 16-bit pointer
	* base address is 0x70 (MSB)
	move.w	#0x0070,d5                      	| [$e125: ld   hl,$0070] 112
	move.b	(a2),d0                    	| [$e128: ld   a,(ix+$00)]
	and.b	#0x7F,d0                         	| [$e12b: and  $7F]
	clr.w	d1                               	| [$e12e: ld   b,$00]
	move.b	d0,d1                           	| [$e12d: ld   c,a]
	add.w	d1,d1                            	| [$e130: sla  c]
												| [$e132: rl   b]
	add.w	d1,d5                            	| [$e134: add  hl,bc]

	move.b	d5,(0x07,a3)                    	| [$e135: ld   (iy+$07),l]
	lsr.w	#8,d5
	move.b	(0x00,a2),d0                    	| [$e138: ld   a,(ix+$00)]
	* store MSB + 7-bit flag
	and.b	#0x80,d0                         	| [$e13b: and  $80]
	or.b	d5,d0                             	| [$e13d: or   h]
	move.b	d0,(0x08,a3)                    	| [$e13e: ld   (iy+$08),a]
	move.b	(0x1e,a3),d0                    	| [$e141: ld   a,(iy+$1e)]
	add.b	(0x01,a2),d0                     	| [$e144: add  a,(ix+$01)]
	move.b	d0,(0x1e,a3)                    	| [$e147: ld   (iy+$1e),a]
	move.b	d0,(0x09,a3)                    	| [$e14a: ld   (iy+$09),a]
	move.b	(0x1f,a3),d0                    	| [$e14d: ld   a,(iy+$1f)]
	add.b	(0x02,a2),d0                     	| [$e150: add  a,(ix+$02)]
	move.b	d0,(0x1f,a3)                    	| [$e153: ld   (iy+$1f),a]
	move.b	d0,(0x0a,a3)                    	| [$e156: ld   (iy+$0a),a]

	move.l	a3,-(sp)                        	| [$e159: push iy]

	move.l	a2,-(sp)                        	| [$e15b: push ix]
	lea	referee_x_pos_C700,a2          	| [$e15d: ld   ix,referee_x_pos_C700]
	move.b	current_task_index_C028,d0   	| [$e161: ld   a,(current_task_index_C028)]
	cmp.b	#0x02,d0                         	| [$e164: cp   $02]
	jeq	l_e16d                             	| [$e166: jp   z,$E16D]
	lea	unknown_C730,a2                	| [$e169: ld   ix,unknown_C730]
l_e16d:
	move.b	#0x01,d2                        	| [$e16d: ld   c,$01]
	move.b	current_task_index_C028,d0   	| [$e16f: ld   a,(current_task_index_C028)]
	cmp.b	#0x02,d0                         	| [$e172: cp   $02]
	jeq	l_e179                             	| [$e174: jp   z,$E179]
	move.b	#0x02,d2                        	| [$e177: ld   c,$02]
l_e179:
	jbsr	l_0003                            	| [$e179: call $0003]
	move.l	(sp)+,a2                        	| [$e17c: pop  ix]
	move.l	(sp)+,a3                        	| [$e17e: pop  iy]
	move.b	(0x03,a2),d0                    	| [$e180: ld   a,(ix+$03)]

	move.l	a2,-(sp)                        	| [$e183: push ix]

	move.l	a3,-(sp)                        	| [$e185: push iy]
	jbsr	suspend_this_task_B65E            	| [$e187: call suspend_this_task_B65E]
	move.l	(sp)+,a3                        	| [$e18a: pop  iy]
	move.l	(sp)+,a0                        	| [$e18c: pop  hl]
	move.w	#0x0004,d1                      	| [$e18d: ld   bc,$0004] 4
	add.w	d1,a0                            	| [$e190: add  hl,bc]
	jbsr		store_a0_in_a3_structure_1b_address  | [$e191: ld   (iy+$1b),l]
											| [$e194: ld   (iy+$1c),h]
	jra	l_e076                             	| [$e197: jp   $E076]

l_case_FE_e19a:
	move.b	(0x01,a2),d0                    	| [$e19a: ld   a,(ix+$01)]
	move.b	d0,(0x1d,a3)                    	| [$e19d: ld   (iy+$1d),a]
	addq.w	#2,a2                           	| [$e1a0: inc  ix] * 2

	move.l	a2,a0                        	| [$e1a4: push ix]
	                        	            | [$e1a6: pop  hl]
	jbsr		store_a0_in_a3_structure_1b_address 	| [$e1a7: ld   (iy+$1b),l]
											| [$e1aa: ld   (iy+$1c),h]
	jra	l_e076                             	| [$e1ad: jp   $E076]
l_case_FC_e1b0:
	move.b	(0x1d,a3),d0                    	| [$e1b0: ld   a,(iy+$1d)]
	subq.b	#1,d0                           	| [$e1b3: dec  a]
	move.b	d0,(0x1d,a3)                    	| [$e1b4: ld   (iy+$1d),a]
	tst.b	d0                               	| [$e1b7: and  a]
	jne	l_e1cd                             	| [$e1b8: jp   nz,$E1CD]
	addq.w	#3,a2                           	| [$e1bb: inc  ix] * 3

	move.l	a2,a0                        	| [$e1c1: push ix]
											| [$e1c3: pop  hl]
	jbsr		store_a0_in_a3_structure_1b_address  | [$e1c4: ld   (iy+$1b),l]
											| [$e1c7: ld   (iy+$1c),h]
	jra	l_e076                             	| [$e1ca: jp   $E076]
l_e1cd:
	addq.w	#1,a2                           	| [$e1cd: inc  ix]
	move.b	(0x00,a2),d6                    	| [$e1cf: ld   l,(ix+$00)]
	move.b	(0x01,a2),d5                    	| [$e1d2: ld   h,(ix+$01)]
	move.b	d6,(0x1b,a3)                    	| [$e1d5: ld   (iy+$1b),l]
	move.b	d5,(0x1c,a3)                    	| [$e1d8: ld   (iy+$1c),h]
	jra	l_e076                             	| [$e1db: jp   $E076]

l_e1de:
	clr.b	d0                               	| [$e1de: xor  a]
	jbsr	suspend_this_task_B65E            	| [$e1df: call suspend_this_task_B65E]
	clr.w	d1                               	| [$e1e2: ld   b,$00]
	move.b	d0,d1                           	| [$e1e4: ld   c,a]
	add.w	d1,d1                            	| [$e1e5: sla  c]
	lea	address_table_E24C(pc),a2          	| [$e1e7: ld   ix,address_table_E24C]
	add.w	d1,a2                            	| [$e1eb: add  ix,bc]
	* unsigned!
	moveq	#0,d0
	move.w	(a2),d0		                    	| [$e1ed: ld   l,(ix+$00)]
	add.l	#game_mem,d0
	move.l	d0,a0
	move.l	a0,-(sp)                        	| [$e1f3: push hl]
	jbsr	load_iy_with_player_structure_B574	| [$e1f4: call load_iy_with_player_structure_B574]
	move.l	(sp)+,a0                        	| [$e1f7: pop  hl]
	jra	l_e062                             	| [$e1f8: jp   $E062]
l_e1fb:
	clr.b	d0                               	| [$e1fb: xor  a]
	jbsr	suspend_this_task_B65E            	| [$e1fc: call suspend_this_task_B65E]
	clr.w	d1                               	| [$e1ff: ld   b,$00]
	move.b	d0,d1                           	| [$e201: ld   c,a]
	lsl.w	#2,d1                            	| [$e202: sla  c]
	lea	address_table_E228(pc),a2          	| [$e204: ld   ix,address_table_E228]
	add.w	d1,a2                            	| [$e208: add  ix,bc]
	move.b	current_task_index_C028,d0   	| [$e20a: ld   a,(current_task_index_C028)]
	clr.w	d1                      	| [$e20d: ld   bc,$0000] 0
	cmp.b	#0x16,d0                         	| [$e210: cp   $16]
	jeq	l_e218                             	| [$e212: jp   z,$E218]
	* times 2 else wrong address table offset!
	move.w	#0x0012*2,d1                      	| [$e215: ld   bc,$0012] 18
l_e218:
	add.w	d1,a2                            	| [$e218: add  ix,bc]
	move.l	(a2),d0              		      	| [$e21a: ld   l,(ix+$00)]
												| [$e21d: ld   h,(ix+$01)]
												| [$e220: ld   a,l]
												| [$e221: and  h]
												| [$e222: cp   $FF] FFFF: invalid address in table
	bpl.b	0f
	jbsr	task_yield_B5A5                   	| [$e224: call z,task_yield_B5A5]
0:
	move.l	d0,a0
	jra	(a0)                               	| [$e227: jp   (hl)]
address_table_E228:
	.long	l_e32b                           	|  $e228
	.long	display_error_text_B186          	|  $e22a
	.long	display_error_text_B186          	|  $e22c
	.long	l_e44f                           	|  $e22e
	.long	l_f173                           	|  $e230
	.long	display_error_text_B186          	|  $e232
	.long	l_ec89                           	|  $e234
	.long	l_e68a                           	|  $e236
	.long	l_e718                           	|  $e238
	.long	l_e930                           	|  $e23a
	.long	display_error_text_B186          	|  $e23c
	.long	display_error_text_B186          	|  $e23e
	.long	l_e32b                           	|  $e240
	.long	-1
	.long	display_error_text_B186          	|  $e244
	.long	l_ec89                           	|  $e246
	.long	l_e32b                           	|  $e248
	.long	l_e32b                           	|  $e24a
address_table_E24C:
	.word	0xe25e                           	|  0
	.word	0xB186          	|  $e24e  bogus (display error text!)
	.word	0xB186          	|  $e250
	.word	0xe261                           	|  $e252
	.word	0xe264                           	|  $e254: 4
	.word	0xB186          	|  $e256
	.word	0xe267                           	|  $e258: 6
	.word	0xe26d                           	|  $e25a
	.word	0xe270                           	|  $e25c


l_e32b:
	move.b	#0x20,d1                        	| [$e32b: ld   b,$20]
l_e32d:
	movem.w	d1/d2,-(sp)                    	| [$e32d: push bc]
	lea	table_E373(pc),a0                  	| [$e32e: ld   hl,table_E373]
	move.b	background_and_state_bits_C911,d0	| [$e331: ld   a,(background_and_state_bits_C911)]
	cmp.b	#0x08,d0                         	| [$e334: cp   $08]
	jne	l_e33c                             	| [$e336: jp   nz,$E33C]
	lea	challenge_stage_text_E394(pc),a0   	| [$e339: ld   hl,challenge_stage_text_E394]
l_e33c:
	jbsr	display_multicolor_text_B391      	| [$e33c: call display_multicolor_text_B391]
	lea	space_text_E3F7(pc),a0             	| [$e33f: ld   hl,space_text_E3F7]
	jbsr	display_multicolor_text_B391      	| [$e342: call display_multicolor_text_B391]
	move.b	#0x08,d0                        	| [$e345: ld   a,$08]
	jbsr	suspend_this_task_B65E            	| [$e347: call suspend_this_task_B65E]
	lea	table_E3B5(pc),a0                  	| [$e34a: ld   hl,table_E3B5]
	move.b	background_and_state_bits_C911,d0	| [$e34d: ld   a,(background_and_state_bits_C911)]
	cmp.b	#0x08,d0                         	| [$e350: cp   $08]
	jne	l_e358                             	| [$e352: jp   nz,$E358]
	lea	space_text_E3D6(pc),a0             	| [$e355: ld   hl,space_text_E3D6]
l_e358:
	jbsr	display_multicolor_text_B391      	| [$e358: call display_multicolor_text_B391]
	lea	space_text_E423(pc),a0             	| [$e35b: ld   hl,space_text_E423]
	jbsr	display_multicolor_text_B391      	| [$e35e: call display_multicolor_text_B391]
	move.b	#0x08,d0                        	| [$e361: ld   a,$08]
	jbsr	suspend_this_task_B65E            	| [$e363: call suspend_this_task_B65E]
	movem.w	(sp)+,d1/d2                    	| [$e366: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_e32d                             	| [$e367: djnz $E32D]
	move.b	#0x01,d0                        	| [$e369: ld   a,$01]
	move.b	#0x01,d1                        	| [$e36b: ld   b,$01]
	jbsr	task_manipulation_B6AE            	| [$e36d: call task_manipulation_B6AE]
	jbsr	task_yield_B5A5                   	| [$e370: call task_yield_B5A5]
table_E373:
	dc.b	0x08,0x1d,0x0c,0xa0,0x11,0xa0,0x0a,0xa0 | table_E373
	dc.b	0x15,0xa0,0x15,0xa0,0x0e,0xa0,0x17,0xa0 | $e37b
	dc.b	0x10,0xa0,0x0e,0xa0,0x3c,0xa0,0x1c,0xa0 | $e383
	dc.b	0x1d,0xa0,0x0a,0xa0,0x10,0xa0,0x0e,0xa0 | $e38b
	dc.b	0xff | $e393
challenge_stage_text_E394:
	dc.b	0x08,0x11,0x0c,0xa0,0x11,0xa0,0x0a,0xa0 | challenge_stage_text_E394
	dc.b	0x15,0xa0,0x15,0xa0,0x0e,0xa0,0x17,0xa0 | $e39c
	dc.b	0x10,0xa0,0x0e,0xa0,0x3c,0xa0,0x1c,0xa0 | $e3a4
	dc.b	0x1d,0xa0,0x0a,0xa0,0x10,0xa0,0x0e,0xa0 | $e3ac
	dc.b	0xff | $e3b4
table_E3B5:
	dc.b	0x08,0x1d,0x3c,0xa0,0x3c,0xa0,0x3c,0xa0 | table_E3B5
	dc.b	0x3c,0xa0,0x3c,0xa0,0x3c,0xa0,0x3c,0xa0 | $e3bd
	dc.b	0x3c,0xa0,0x3c,0xa0,0x3c,0xa0,0x3c,0xa0 | $e3c5
	dc.b	0x3c,0xa0,0x3c,0xa0,0x3c,0xa0,0x3c,0xa0 | $e3cd
	dc.b	0xff | $e3d5
space_text_E3D6:
	dc.b	0x08,0x11,0x3c,0xa0,0x3c,0xa0,0x3c,0xa0 | space_text_E3D6
	dc.b	0x3c,0xa0,0x3c,0xa0,0x3c,0xa0,0x3c,0xa0 | $e3de
	dc.b	0x3c,0xa0,0x3c,0xa0,0x3c,0xa0,0x3c,0xa0 | $e3e6
	dc.b	0x3c,0xa0,0x3c,0xa0,0x3c,0xa0,0x3c,0xa0 | $e3ee
	dc.b	0xff | $e3f6
space_text_E3F7:
	dc.b	0x17,0x10,0x3c,0x88,0x3c,0x88,0x3c,0x88 | space_text_E3F7
	dc.b	0x3c,0x88,0xfe,0x17,0x11,0x3c,0x88,0xaf | $e3ff
	dc.b	0x88,0xb0,0x88,0x3c,0x88,0xfe,0x17,0x12 | $e407
	dc.b	0x3c,0x88,0xb3,0x88,0xb4,0x88,0x3c,0x88 | $e40f
	dc.b	0xfe,0x17,0x13,0x3c,0x88,0x3c,0x88,0x3c | $e417
	dc.b	0x88,0x3c,0x88,0xff | $e41f
space_text_E423:
	dc.b	0x17,0x10,0x3c,0x88,0xac,0x88,0xad,0x88 | space_text_E423
	dc.b	0x3c,0x88,0xfe,0x17,0x11,0xae,0x88,0xaf | $e42b
	dc.b	0x88,0xb0,0x88,0xb1,0x88,0xfe,0x17,0x12 | $e433
	dc.b	0xb2,0x88,0xb3,0x88,0xb4,0x88,0xb5,0x88 | $e43b
	dc.b	0xfe,0x17,0x13,0x3c,0x88,0xb6,0x88,0xb7 | $e443
	dc.b	0x88,0x3c,0x88,0xff | $e44b

l_e44f:
	jbsr	clear_score_text_FDC4             	| [$e44f: call clear_score_text_FDC4]
	lea	unknown_C730,a3                	| [$e452: ld   iy,unknown_C730]
	move.b	#0x68,d5
	move.b	#0x85,d6                      	| [$e456: ld   hl,$6885] immediate
	move.b	#0x0A,d1                        	| [$e459: ld   b,$0A]
l_e45b:
	move.b	d5,(0x00,a3)                    	| [$e45b: ld   (iy+$00),h]
	move.b	#0xBA,(0x01,a3)                 	| [$e45e: ld   (iy+$01),$BA]
	move.b	#0x4C,(0x02,a3)                 	| [$e462: ld   (iy+$02),$4C]
	move.b	d6,(0x03,a3)                    	| [$e466: ld   (iy+$03),l]
	move.b	d5,d0                           	| [$e469: ld   a,h]
	add.b	#0x10,d0                         	| [$e46a: add  a,$10]
	move.b	d0,(0x04,a3)                    	| [$e46c: ld   (iy+$04),a]
	move.b	#0xBB,(0x05,a3)                 	| [$e46f: ld   (iy+$05),$BB]
	move.b	#0x4C,(0x06,a3)                 	| [$e473: ld   (iy+$06),$4C]
	move.b	d6,(0x07,a3)                    	| [$e477: ld   (iy+$07),l]
	addq.b	#7,d6                           	| [$e47a: inc  l] * 7
	move.w	#0x0008,d3                      	| [$e481: ld   de,$0008] 8
	add.w	d3,a3                            	| [$e484: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_e45b                             	| [$e486: djnz $E45B]
	lea	table_E548(pc),a0                  	| [$e488: ld   hl,table_E548]

	move.l	a0,-(sp)                        	| [$e48b: push hl]
	jbsr	is_title_screen_demo_mode_B27E    	| [$e48c: call is_title_screen_demo_mode_B27E]
	move.l	(sp)+,a0                        	| [$e48f: pop  hl]
	cmp.b	#0x01,d0                         	| [$e490: cp   $01]
	jeq	l_e498                             	| [$e492: jp   z,$E498]
	lea	table_E553(pc),a0                  	| [$e495: ld   hl,table_E553]
l_e498:
	clr.b	d0                               	| [$e498: xor  a]
	jbsr	suspend_this_task_B65E            	| [$e499: call suspend_this_task_B65E]
	move.b	d0,d1                           	| [$e49c: ld   b,a]
	movem.w	d1/d2,-(sp)                    	| [$e49d: push bc]
	lea	unknown_C730,a3                	| [$e49e: ld   iy,unknown_C730]
l_e4a2:
	move.b	#0x14,d0                        	| [$e4a2: ld   a,$14]
	**out  ($A8),a
	movem.w	d1/d2,-(sp)                    	| [$e4a6: push bc]
	move.b	#0xB7,(0x01,a3)                 	| [$e4a7: ld   (iy+$01),$B7]
	move.b	#0xB8,(0x05,a3)                 	| [$e4ab: ld   (iy+$05),$B8]

	move.l	a3,-(sp)                        	| [$e4af: push iy]
	move.b	#0x04,d0                        	| [$e4b1: ld   a,$04]
	jbsr	suspend_this_task_B65E            	| [$e4b3: call suspend_this_task_B65E]
	move.l	(sp)+,a3                        	| [$e4b6: pop  iy]
	move.w	#0x0008,d3                      	| [$e4b8: ld   de,$0008] 8
	add.w	d3,a3                            	| [$e4bb: add  iy,de]
	movem.w	(sp)+,d1/d2                    	| [$e4bd: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_e4a2                             	| [$e4be: djnz $E4A2]
	move.b	#0x17,d0                        	| [$e4c0: ld   a,$17]
	jbsr	resume_task_B5CD                  	| [$e4c2: call resume_task_B5CD]
	lea	table_E373(pc),a0                  	| [$e4c5: ld   hl,table_E373]
	move.b	background_and_state_bits_C911,d0	| [$e4c8: ld   a,(background_and_state_bits_C911)]
	cmp.b	#0x08,d0                         	| [$e4cb: cp   $08]
	jne	l_e4d3                             	| [$e4cd: jp   nz,$E4D3]
	lea	challenge_stage_text_E394(pc),a0   	| [$e4d0: ld   hl,challenge_stage_text_E394]
l_e4d3:
	jbsr	display_multicolor_text_B391      	| [$e4d3: call display_multicolor_text_B391]
	movem.w	(sp)+,d1/d2                    	| [$e4d6: pop  bc]
	move.b	d1,d0                           	| [$e4d7: ld   a,b]
	cmp.b	#0x0A,d0                         	| [$e4d8: cp   $0A]
	jne	l_e4f2                             	| [$e4da: jp   nz,$E4F2]
	move.b	#0x20,d0                        	| [$e4dd: ld   a,$20]
	move.w	d0,-(sp)                        	| [$e4df: push af]
	lea	perfect_text_E62B(pc),a0           	| [$e4e0: ld   hl,perfect_text_E62B]
	move.b	background_and_state_bits_C911,d0	| [$e4e3: ld   a,(background_and_state_bits_C911)]
	cmp.b	#0x08,d0                         	| [$e4e6: cp   $08]
	jne	l_e4ee                             	| [$e4e8: jp   nz,$E4EE]
	lea	table_E64C(pc),a0                  	| [$e4eb: ld   hl,table_E64C]
l_e4ee:
	jbsr	display_multicolor_text_B391      	| [$e4ee: call display_multicolor_text_B391]
	move.w	(sp)+,d0                        	| [$e4f1: pop  af]
l_e4f2:
	jbsr	l_b1ab                            	| [$e4f2: call $B1AB]
l_e4f5:
	move.b	background_and_state_bits_C911,d0	| [$e4f5: ld   a,(background_and_state_bits_C911)]
	cmp.b	#0x08,d0                         	| [$e4f8: cp   $08]
	jeq	l_e528                             	| [$e4fa: jp   z,$E528]
	move.b	#0x04,d1                        	| [$e4fd: ld   b,$04]
l_e4ff:
	movem.w	d1/d2,-(sp)                    	| [$e4ff: push bc]
	move.b	#0x68,d5
	move.b	#0x64,d6                      	| [$e500: ld   hl,$6864] immediate
	lea	unknown_C780,a2                	| [$e503: ld   ix,unknown_C780]
	move.b	#0x03,d0                        	| [$e507: ld   a,$03]
	jbsr	animate_guided_character_F75D                            	| [$e509: call $F75D]
	move.b	#0x10,d0                        	| [$e50c: ld   a,$10]
	jbsr	suspend_this_task_B65E            	| [$e50e: call suspend_this_task_B65E]
	move.b	#0x68,d5
	move.b	#0x64,d6                      	| [ld   hl,$6864] immediate
	lea	unknown_C780,a2                	| [$e514: ld   ix,unknown_C780]
	move.b	#0x06,d0                        	| [$e518: ld   a,$06]
	jbsr	animate_guided_character_F75D                            	| [$e51a: call $F75D]
	move.b	#0x10,d0                        	| [$e51d: ld   a,$10]
	jbsr	suspend_this_task_B65E            	| [$e51f: call suspend_this_task_B65E]
	movem.w	(sp)+,d1/d2                    	| [$e522: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_e4ff                             	| [$e523: djnz $E4FF]
	jra	l_e52d                             	| [$e525: jp   $E52D]
l_e528:
	move.b	#0x80,d0                        	| [$e528: ld   a,$80]
	jbsr	play_sound_BBB5                   	| [$e52a: call play_sound_BBB5]
l_e52d:
	move.b	#0x01,d0                        	| [$e52d: ld   a,$01]
	jbsr	suspend_this_task_B65E            	| [$e52f: call suspend_this_task_B65E]
	move.b	#0x06,d0                        	| [$e532: ld   a,$06]
	move.b	#0x06,d1                        	| [$e534: ld   b,$06]
	jbsr	task_manipulation_B6AE            	| [$e536: call task_manipulation_B6AE]
	move.b	#0x80,d0                        	| [$e539: ld   a,$80]
	jbsr	suspend_this_task_B65E            	| [$e53b: call suspend_this_task_B65E]
	move.b	#0x01,d0                        	| [$e53e: ld   a,$01]
	move.b	#0x01,d1                        	| [$e540: ld   b,$01]
	jbsr	task_manipulation_B6AE            	| [$e542: call task_manipulation_B6AE]
	jbsr	task_yield_B5A5                   	| [$e545: call task_yield_B5A5]
table_E548:
	dc.b	0x0c,0x19,0xee,0xa3,0x3d,0xa0,0x3d,0xa0 | table_E548
	dc.b	0xee,0xa3,0xff | $e550
table_E553:
	dc.b	0x0c,0x19,0xef,0xa3,0x3f,0xd8,0x3f,0xd8 | table_E553
	dc.b	0xef,0xa3,0xff | $e55b
	.align	2

perfect_text_E62B:
	dc.b	0x08,0x1d,0x19,0xa0,0x0e,0xa0,0x1b,0xa0 | perfect_text_E62B
	dc.b	0x0f,0xa0,0x0e,0xa0,0x0c,0xa0,0x1d,0xa0 | $e633
	dc.b	0x3c,0xa0,0x3c,0xa0,0x3c,0xa0,0x3c,0xa0 | $e63b
	dc.b	0x02,0xa0,0x00,0xa0,0x00,0xa0,0x00,0xa0 | $e643
	dc.b	0xff | $e64b
table_E64C:
	dc.b	0x08,0x11,0x19,0xa0,0x0e,0xa0,0x1b,0xa0 | table_E64C
	dc.b	0x0f,0xa0,0x0e,0xa0,0x0c,0xa0,0x1d,0xa0 | $e654
	dc.b	0x3c,0xa0,0x3c,0xa0,0x3c,0xa0,0x3c,0xa0 | $e65c
	dc.b	0x02,0xa0,0x00,0xa0,0x00,0xa0,0x00,0xa0 | $e664
	dc.b	0xff | $e66c
table_E66D:
	dc.b	0xf8,0x01,0xfa,0x01,0xfb,0x02,0xfd,0x02 | table_E66D
	dc.b	0xfe,0x03,0xff,0x03,0x00,0x04,0x01,0x05 | $e675
	dc.b	0x02,0x06,0x03,0x07,0x05,0x08,0x06,0x09 | $e67d
	dc.b	0x08,0x0a,0x80,0x6d,0xe6 | $e685
	.align	2
l_e68a:
	lea	unknown_C730,a3                	| [$e68a: ld   iy,unknown_C730]
	move.b	#0x68,d5                      	| [$e68e: ld   hl,$6883] immediate
	move.b	#0x83,d6                      	| [$e68e: ld   hl,$6883] immediate
	move.b	#0x0A,d1                        	| [$e691: ld   b,$0A]
l_e693:
	move.b	d5,(0x00,a3)                    	| [$e693: ld   (iy+$00),h]
	move.b	#0x9B,(0x01,a3)                 	| [$e696: ld   (iy+$01),$9B]
	move.b	#0x4F,(0x02,a3)                 	| [$e69a: ld   (iy+$02),$4F]
	move.b	d6,(0x03,a3)                    	| [$e69e: ld   (iy+$03),l]
	move.w	#0x0008,d3                      	| [$e6a1: ld   de,$0008] 8
	add.w	d3,a3                            	| [$e6a4: add  iy,de]
	move.b	d6,d0                           	| [$e6a6: ld   a,l]
	add.b	#0x0C,d0                         	| [$e6a7: add  a,$0C]
	move.b	d0,d6                           	| [$e6a9: ld   l,a]
	subq.b	#1,d1                           	| [...]
	jne	l_e693                             	| [$e6aa: djnz $E693]
	lea	unknown_C734,a3                	| [$e6ac: ld   iy,unknown_C734]
	move.b	#0x0A,d1                        	| [$e6b0: ld   b,$0A]
	lea	table_7883(pc),a0                  	| [$e6b2: ld   hl,table_7883]
l_e6b5:
	move.b	d5,(0x00,a3)                    	| [$e6b5: ld   (iy+$00),h]
	move.b	#0x9B,(0x01,a3)                 	| [$e6b8: ld   (iy+$01),$9B]
	move.b	#0xCF,(0x02,a3)                 	| [$e6bc: ld   (iy+$02),$CF]
	move.b	d6,(0x03,a3)                    	| [$e6c0: ld   (iy+$03),l]
	move.w	#0x0008,d3                      	| [$e6c3: ld   de,$0008] 8
	add.w	d3,a3                            	| [$e6c6: add  iy,de]
	move.b	d6,d0                           	| [$e6c8: ld   a,l]
	add.b	#0x0C,d0                         	| [$e6c9: add  a,$0C]
	move.b	d0,d6                           	| [$e6cb: ld   l,a]
	subq.b	#1,d1                           	| [...]
	jne	l_e6b5                             	| [$e6cc: djnz $E6B5]
	clr.b	d0                               	| [$e6ce: xor  a]
	jbsr	suspend_this_task_B65E            	| [$e6cf: call suspend_this_task_B65E]
	lea	unknown_C730,a3                	| [$e6d2: ld   iy,unknown_C730]
	move.b	d0,d1                           	| [$e6d6: ld   b,a]
	movem.w	d1/d2,-(sp)                    	| [$e6d7: push bc]
l_e6d8:
	move.b	#0x14,d0                        	| [$e6d8: ld   a,$14]
*out  ($A8),a
	movem.w	d1/d2,-(sp)                    	| [$e6dc: push bc]
	move.b	#0x9C,(0x01,a3)                 	| [$e6dd: ld   (iy+$01),$9C]
	move.b	#0x9C,(0x05,a3)                 	| [$e6e1: ld   (iy+$05),$9C]

	move.l	a3,-(sp)                        	| [$e6e5: push iy]
	move.b	#0x04,d0                        	| [$e6e7: ld   a,$04]
	jbsr	suspend_this_task_B65E            	| [$e6e9: call suspend_this_task_B65E]
	move.l	(sp)+,a3                        	| [$e6ec: pop  iy]
	move.w	#0x0008,d3                      	| [$e6ee: ld   de,$0008] 8
	add.w	d3,a3                            	| [$e6f1: add  iy,de]
	movem.w	(sp)+,d1/d2                    	| [$e6f3: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_e6d8                             	| [$e6f4: djnz $E6D8]
	move.b	#0x17,d0                        	| [$e6f6: ld   a,$17]
	jbsr	resume_task_B5CD                  	| [$e6f8: call resume_task_B5CD]
	lea	table_E373(pc),a0                  	| [$e6fb: ld   hl,table_E373]
	jbsr	display_multicolor_text_B391      	| [$e6fe: call display_multicolor_text_B391]
	movem.w	(sp)+,d1/d2                    	| [$e701: pop  bc]
	move.b	d1,d0                           	| [$e702: ld   a,b]
	cmp.b	#0x0A,d0                         	| [$e703: cp   $0A]
	jne	l_e712                             	| [$e705: jp   nz,$E712]
	move.b	#0x20,d0                        	| [$e708: ld   a,$20]
	move.w	d0,-(sp)                        	| [$e70a: push af]
	lea	perfect_text_E62B(pc),a0           	| [$e70b: ld   hl,perfect_text_E62B]
	jbsr	display_multicolor_text_B391      	| [$e70e: call display_multicolor_text_B391]
	move.w	(sp)+,d0                        	| [$e711: pop  af]
l_e712:
	jbsr	l_b1ab                            	| [$e712: call $B1AB]
	jra	l_e4f5                             	| [$e715: jp   $E4F5]
l_e718:
	lea	unknown_C730,a3                	| [$e718: ld   iy,unknown_C730]
	move.b	#0x58,d5
	move.b	#0x7C,d6                      	| [$e71c: ld   hl,$587C] immediate value
	move.b	#0x0A,d1                        	| [$e71f: ld   b,$0A]
l_e721:
	move.l	a0,-(sp)                        	| [$e721: push hl]
	move.b	#0xA0,(0x01,a3)                 	| [$e722: ld   (iy+$01),$A0]
	move.b	#0x9F,(0x05,a3)                 	| [$e726: ld   (iy+$05),$9F]
	move.b	#0x9F,(0x09,a3)                 	| [$e72a: ld   (iy+$09),$9F]
	move.b	#0xA0,(0x0d,a3)                 	| [$e72e: ld   (iy+$0d),$A0]
	move.b	#0xCB,(0x02,a3)                 	| [$e732: ld   (iy+$02),$CB]
	move.b	#0xCB,(0x06,a3)                 	| [$e736: ld   (iy+$06),$CB]
	move.b	#0x4B,(0x0a,a3)                 	| [$e73a: ld   (iy+$0a),$4B]
	move.b	#0x4B,(0x0e,a3)                 	| [$e73e: ld   (iy+$0e),$4B]
	move.b	d6,(0x03,a3)                    	| [$e742: ld   (iy+$03),l]
	move.b	d6,(0x07,a3)                    	| [$e745: ld   (iy+$07),l]
	move.b	d6,(0x0b,a3)                    	| [$e748: ld   (iy+$0b),l]
	move.b	d6,(0x0f,a3)                    	| [$e74b: ld   (iy+$0f),l]
	move.b	d5,(0x00,a3)                    	| [$e74e: ld   (iy+$00),h]
	move.b	d5,d0                           	| [$e751: ld   a,h]
	add.b	#0x10,d0                         	| [$e752: add  a,$10]
	move.b	d0,(0x04,a3)                    	| [$e754: ld   (iy+$04),a]
	add.b	#0x10,d0                         	| [$e757: add  a,$10]
	move.b	d0,(0x08,a3)                    	| [$e759: ld   (iy+$08),a]
	add.b	#0x10,d0                         	| [$e75c: add  a,$10]
	move.b	d0,(0x0c,a3)                    	| [$e75e: ld   (iy+$0c),a]
	move.w	#0x0010,d3                      	| [$e761: ld   de,$0010] 16
	add.w	d3,a3                            	| [$e764: add  iy,de]
	move.l	(sp)+,a0                        	| [$e766: pop  hl]
	move.b	#0x0C,d0                        	| [$e767: ld   a,$0C]
	add.b	d6,d0                            	| [$e769: add  a,l]
	move.b	d0,d6                           	| [$e76a: ld   l,a]
	subq.b	#1,d1                           	| [...]
	jne	l_e721                             	| [$e76b: djnz $E721]
	clr.b	d0                               	| [$e76d: xor  a]
	jbsr	suspend_this_task_B65E            	| [$e76e: call suspend_this_task_B65E]
	move.b	d0,d1                           	| [$e771: ld   b,a]
	movem.w	d1/d2,-(sp)                    	| [$e772: push bc]
	lea	unknown_C730,a3                	| [$e773: ld   iy,unknown_C730]
l_e777:
	move.b	#0x14,d0                        	| [$e777: ld   a,$14]
*out  ($A8),a
	movem.w	d1/d2,-(sp)                    	| [$e77b: push bc]
	move.b	#0xA4,(0x01,a3)                 	| [$e77c: ld   (iy+$01),$A4]
	move.b	#0xA3,(0x05,a3)                 	| [$e780: ld   (iy+$05),$A3]
	move.b	#0xA3,(0x09,a3)                 	| [$e784: ld   (iy+$09),$A3]
	move.b	#0xA4,(0x0d,a3)                 	| [$e788: ld   (iy+$0d),$A4]

	move.l	a3,-(sp)                        	| [$e78c: push iy]
	move.b	#0x04,d0                        	| [$e78e: ld   a,$04]
	jbsr	suspend_this_task_B65E            	| [$e790: call suspend_this_task_B65E]
	move.l	(sp)+,a3                        	| [$e793: pop  iy]
	move.w	#0x0010,d3                      	| [$e795: ld   de,$0010] 16
	add.w	d3,a3                            	| [$e798: add  iy,de]
	movem.w	(sp)+,d1/d2                    	| [$e79a: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_e777                             	| [$e79b: djnz $E777]
	move.b	#0x17,d0                        	| [$e79d: ld   a,$17]
	jbsr	resume_task_B5CD                  	| [$e79f: call resume_task_B5CD]
	lea	table_E373(pc),a0                  	| [$e7a2: ld   hl,table_E373]
	jbsr	display_multicolor_text_B391      	| [$e7a5: call display_multicolor_text_B391]
	movem.w	(sp)+,d1/d2                    	| [$e7a8: pop  bc]
	move.b	d1,d0                           	| [$e7a9: ld   a,b]
	cmp.b	#0x0A,d0                         	| [$e7aa: cp   $0A]
	jne	l_e7b9                             	| [$e7ac: jp   nz,$E7B9]
	move.b	#0x20,d0                        	| [$e7af: ld   a,$20]
	move.w	d0,-(sp)                        	| [$e7b1: push af]
	lea	perfect_text_E62B(pc),a0           	| [$e7b2: ld   hl,perfect_text_E62B]
	jbsr	display_multicolor_text_B391      	| [$e7b5: call display_multicolor_text_B391]
	move.w	(sp)+,d0                        	| [$e7b8: pop  af]
l_e7b9:
	jbsr	l_b1ab                            	| [$e7b9: call $B1AB]
	move.b	#0x06,d0                        	| [$e7bc: ld   a,$06]
	move.b	#0x06,d1                        	| [$e7be: ld   b,$06]
	jbsr	task_manipulation_B6AE            	| [$e7c0: call task_manipulation_B6AE]
	move.b	#0x80,d0                        	| [$e7c3: ld   a,$80]
	jbsr	suspend_this_task_B65E            	| [$e7c5: call suspend_this_task_B65E]
	move.b	#0x01,d0                        	| [$e7c8: ld   a,$01]
	move.b	#0x01,d1                        	| [$e7ca: ld   b,$01]
	jbsr	task_manipulation_B6AE            	| [$e7cc: call task_manipulation_B6AE]
	jbsr	task_yield_B5A5                   	| [$e7cf: call task_yield_B5A5]

l_e7d2:
	jbsr	clear_score_text_FDC4             	| [$e7d2: call clear_score_text_FDC4]
	jbsr	display_players_rank_FD44         	| [$e7d5: call display_players_rank_FD44]
	move.b	#0x01,d0                        	| [$e7d8: ld   a,$01]
	jbsr	play_sound_BBB5                   	| [$e7da: call play_sound_BBB5]
	move.b	background_and_state_bits_C911,d0	| [$e7dd: ld   a,(background_and_state_bits_C911)]
	sub.b	#0x10,d0                         	| [$e7e0: sub  $10]
	asl.b	#1,d0                            	| [$e7e2: sla  a]
	* 2 bytes (not a pointer)
	lea	game_mem+0xE9C2,a0                  	| [$e7e4: ld   hl,table_E9C2]
	clr.w	d1                               	| [$e7e7: ld   b,$00]
	move.b	d0,d1                           	| [$e7e9: ld   c,a]
	add.w	d1,a0                            	| [$e7ea: add  hl,bc]

	move.l	a0,-(sp)                        	| [$e7eb: push hl]
	jbsr	load_iy_with_player_structure_B574	| [$e7ec: call load_iy_with_player_structure_B574]
	move.l	(sp)+,a0                        	| [$e7ef: pop  hl]
	move.b	(a0)+,d0                         	| [$e7f0: ld   a,(hl)]
	move.b	d0,(0x07,a3)                    	| [$e7f1: ld   (iy+$07),a]
											| [$e7f4: inc  hl]
	move.b	(a0),d0                         	| [$e7f5: ld   a,(hl)]
	move.b	d0,(0x08,a3)                    	| [$e7f6: ld   (iy+$08),a]
	clr.b	d0                               	| [$e7f9: ld   a,$00]
	move.b	(0x07,a3),d5                    	| [$e7fb: ld   h,(iy+$07)]
	move.b	(0x08,a3),d6                    	| [$e7fe: ld   l,(iy+$08)]
	lea	unknown_C740,a2                	| [$e801: ld   ix,unknown_C740]
	jbsr	display_something_ebff                            	| [$e805: call $EBFF]
	jbsr	load_iy_with_player_structure_B574	| [$e808: call load_iy_with_player_structure_B574]
	move.b	(0x07,a3),d0                    	| [$e80b: ld   a,(iy+$07)]
	add.b	#0x70,d0                         	| [$e80e: add  a,$70]
	move.b	d0,d5                           	| [$e810: ld   h,a]
	move.b	(0x08,a3),d0                    	| [$e811: ld   a,(iy+$08)]
	add.b	#0x10,d0                         	| [$e814: add  a,$10]
	move.b	d0,d6                           	| [$e816: ld   l,a]

	movem.w	d5/d6,-(sp)                        	| [$e817: push hl]
	move.b	d5,d0                           	| [$e818: ld   a,h]
	sub.b	#0x10,d0                         	| [$e819: sub  $10]
	move.b	d6,d0                           	| [$e81b: ld   a,l]
	add.b	#0x10,d0                         	| [$e81c: add  a,$10]
	move.b	d0,d6                           	| [$e81e: ld   l,a]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$e81f: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x08,d0                         	| [$e822: and  $08]
	jeq	l_e82d                             	| [$e824: jp   z,$E82D]
	move.b	d5,d0                           	| [$e827: ld   a,h]
	add.b	#0x48,d0                         	| [$e828: add  a,$48]
	neg.b	d0                               	| [$e82a: neg]
	move.b	d0,d5                           	| [$e82c: ld   h,a]
l_e82d:												
	lsr.b	#3,d5                            	| [$e82f: srl  h] * 3
	lsr.b	#3,d6                            	| [$e833: srl  l] * 3
	move.b	background_and_state_bits_C911,d0	| [$e839: ld   a,(background_and_state_bits_C911)]
	jbsr	draw_something_f9r4                            	| [$e83c: call $F9E4]
	movem.w	(sp)+,d5/d6                        	| [$e83f: pop  hl]
	move.b	#0x0A,d1                        	| [$e840: ld   b,$0A]
	move.b	#0x06,d0                        	| [$e842: ld   a,$06]
	lea	unknown_C768,a2                	| [$e844: ld   ix,unknown_C768]
l_e848:

	movem.w	d5/d6,-(sp)                        	| [$e848: push hl]

	move.l	a2,-(sp)                        	| [$e849: push ix]
	move.w	d0,-(sp)                        	| [$e84b: push af]
	movem.w	d1/d2,-(sp)                    	| [$e84c: push bc]
	jbsr	display_something_ebff                            	| [$e84d: call $EBFF]
	movem.w	(sp)+,d1/d2                    	| [$e850: pop  bc]
	move.w	(sp)+,d0                        	| [$e851: pop  af]
	move.l	(sp)+,a2                        	| [$e852: pop  ix]
	movem.l	(sp)+,d5/d6                        	| [$e854: pop  hl]
	addq.w	#4,a2                           	| [$e855: inc  ix] * 4
	addq.b	#4,d5                           	| [$e85d: inc  h] * 4
	subq.b	#1,d1                           	| [...]
	jne	l_e848                             	| [$e861: djnz $E848]
	jbsr	load_iy_with_player_structure_B574	| [$e863: call load_iy_with_player_structure_B574]
	move.b	(0x07,a3),d5                    	| [$e866: ld   h,(iy+$07)]
	move.b	(0x08,a3),d6                    	| [$e869: ld   l,(iy+$08)]
	lea	table_EA06(pc),a3                  	| [$e86c: ld   iy,table_EA06]
	move.b	#0x04,d0                        	| [$e870: ld   a,$04]
	lea	unknown_C740,a2                	| [$e872: ld   ix,unknown_C740]
l_e876:

	movem.w	d5/d6,-(sp)                        	| [$e876: push hl]

	move.l	a3,-(sp)                        	| [$e877: push iy]

	move.l	a2,-(sp)                        	| [$e879: push ix]
	move.w	d0,-(sp)                        	| [$e87b: push af]
	jbsr	display_something_ebff                            	| [$e87c: call $EBFF]
	move.b	#0x01,d0                        	| [$e87f: ld   a,$01]
	jbsr	suspend_this_task_B65E            	| [$e881: call suspend_this_task_B65E]
	jbsr	read_current_player_controls_BB96 	| [$e884: call read_current_player_controls_BB96]
	tst.b	d0                               	| [$e887: and  a]
	jne	l_e8be                             	| [$e888: jp   nz,$E8BE]
	move.w	(sp)+,d0                        	| [$e88b: pop  af]
	move.b	d0,d1                           	| [$e88c: ld   b,a]
	move.l	(sp)+,a2                        	| [$e88d: pop  ix]
	move.l	(sp)+,a3                        	| [$e88f: pop  iy]
	movem.l	(sp)+,d5/d6                        	| [$e891: pop  hl]
	addq.w	#3,a3                           	| [$e892: inc  iy] * 3
	move.b	(0x00,a3),d0                    	| [$e898: ld   a,(iy+$00)]
	cmp.b	#0xFD,d0                         	| [$e89b: cp   $FD]
	jne	l_e8a4                             	| [$e89d: jp   nz,$E8A4]
	lea	table_EA06(pc),a3                  	| [$e8a0: ld   iy,table_EA06]
l_e8a4:
	move.b	(0x01,a3),d0                    	| [$e8a4: ld   a,(iy+$01)]
	add.b	d5,d0                            	| [$e8a7: add  a,h]
	move.b	d0,d5                           	| [$e8a8: ld   h,a]
	move.b	(0x00,a3),d0                    	| [$e8a9: ld   a,(iy+$00)]
	add.b	d6,d0                            	| [$e8ac: add  a,l]
	move.b	d0,d6                           	| [$e8ad: ld   l,a]
	move.b	#0x04,d1                        	| [$e8ae: ld   b,$04]
	move.b	(0x01,a3),d0                    	| [$e8b0: ld   a,(iy+$01)]
	cmp.b	#0x02,d0                         	| [$e8b3: cp   $02]
	jne	l_e8ba                             	| [$e8b5: jp   nz,$E8BA]
	move.b	#0x05,d1                        	| [$e8b8: ld   b,$05]
l_e8ba:
	move.b	d1,d0                           	| [$e8ba: ld   a,b]
	jra	l_e876                             	| [$e8bb: jp   $E876]
l_e8be:
	move.b	#0x80,d0                        	| [$e8be: ld   a,$80]
	jbsr	play_sound_BBB5                   	| [$e8c0: call play_sound_BBB5]
	move.b	#0x01,d0                        	| [$e8c3: ld   a,$01]
	jbsr	suspend_this_task_B65E            	| [$e8c5: call suspend_this_task_B65E]
	move.w	(sp)+,d0                        	| [$e8c8: pop  af]
	move.l	(sp)+,a2                        	| [$e8c9: pop  ix]
	move.l	(sp)+,a3                        	| [$e8cb: pop  iy]
	move.l	(sp)+,a0                        	| [$e8cd: pop  hl]

	move.l	a3,-(sp)                        	| [$e8ce: push iy]

	move.l	a0,-(sp)                        	| [$e8d0: push hl]
	jbsr	load_iy_with_player_structure_B574	| [$e8d1: call load_iy_with_player_structure_B574]
	move.b	(0x08,a3),d0                    	| [$e8d4: ld   a,(iy+$08)]
	move.l	(sp)+,a0                        	| [$e8d7: pop  hl]
	move.l	(sp)+,a3                        	| [$e8d8: pop  iy]
	move.b	d0,d6                           	| [$e8da: ld   l,a]
	move.b	#0x22,d0                        	| [$e8db: ld   a,$22]
	jbsr	play_sound_BBB5                   	| [$e8dd: call play_sound_BBB5]

	move.l	a3,-(sp)                        	| [$e8e0: push iy]

	movem.w	d5/d6,-(sp)                        	| [$e8e2: push hl]
	clr.b	d0                               	| [$e8e3: ld   a,$00]
	lea	unknown_C740,a2                	| [$e8e5: ld   ix,unknown_C740]
	jbsr	display_something_ebff                            	| [$e8e9: call $EBFF]
	move.b	#0x02,d0                        	| [$e8ec: ld   a,$02]
	jbsr	suspend_this_task_B65E            	| [$e8ee: call suspend_this_task_B65E]
	movem.l	(sp)+,d5/d6                        	| [$e8f1: pop  hl]
	move.b	#0x08,d0                        	| [$e8f2: ld   a,$08]
	add.b	d5,d0                            	| [$e8f4: add  a,h]
	move.b	d0,d5                           	| [$e8f5: ld   h,a]
	lea	unknown_C740,a2                	| [$e8f6: ld   ix,unknown_C740]
	move.b	#0x01,d0                        	| [$e8fa: ld   a,$01]

	movem.w	d5/d6,-(sp)                        	| [$e8fc: push hl]
	jbsr	display_something_ebff                            	| [$e8fd: call $EBFF]
	move.b	#0x02,d0                        	| [$e900: ld   a,$02]
	jbsr	suspend_this_task_B65E            	| [$e902: call suspend_this_task_B65E]
	movem.l	(sp)+,d5/d6                        	| [$e905: pop  hl]
	move.b	#0x08,d0                        	| [$e906: ld   a,$08]
	add.b	d5,d0                            	| [$e908: add  a,h]
	move.b	d0,d5                           	| [$e909: ld   h,a]
	lea	unknown_C740,a2                	| [$e90a: ld   ix,unknown_C740]
	move.b	#0x02,d0                        	| [$e90e: ld   a,$02]

	movem.w	d5/d6,-(sp)                        	| [$e910: push hl]
	jbsr	display_something_ebff                            	| [$e911: call $EBFF]
	move.b	#0x02,d0                        	| [$e914: ld   a,$02]
	jbsr	suspend_this_task_B65E            	| [$e916: call suspend_this_task_B65E]
	movem.l	(sp)+,d5/d6                        	| [$e919: pop  hl]
	lea	unknown_C740,a2                	| [$e91a: ld   ix,unknown_C740]
	move.b	#0x03,d0                        	| [$e91e: ld   a,$03]
	jbsr	display_something_ebff                            	| [$e920: call $EBFF]
	move.l	(sp)+,a3                        	| [$e923: pop  iy]
	move.b	(0x02,a3),d1                    	| [$e925: ld   b,(iy+$02)]
	move.b	#0x17,d0                        	| [$e928: ld   a,$17]
	jbsr	task_manipulation_B6AE            	| [$e92a: call task_manipulation_B6AE]
	jbsr	task_yield_B5A5                   	| [$e92d: call task_yield_B5A5]
table_E92E:
	dc.b	0xa5,0xb5 | $e92e
l_e930:
	move.b	#0x04,d0                        	| [$e930: ld   a,$04]
	jbsr	schedule_task_to_start_B620       	| [$e932: call schedule_task_to_start_B620]
	clr.b	d0                               	| [$e935: xor  a]
	jbsr	suspend_this_task_B65E            	| [$e936: call suspend_this_task_B65E]
	move.b	d0,d1                           	| [$e939: ld   b,a]
	movem.w	d1/d2,-(sp)                    	| [$e93a: push bc]
	lea	unknown_C768,a3                	| [$e93b: ld   iy,unknown_C768]
	tst.b	d0                               	| [$e93f: and  a]
	jeq	l_e96d                             	| [$e940: jp   z,$E96D]
l_e943:
	move.b	#0x14,d0                        	| [$e943: ld   a,$14]
	jbsr	play_sound_BBB5                   	| [$e945: call play_sound_BBB5]
	movem.w	d1/d2,-(sp)                    	| [$e948: push bc]
	move.b	#0xD9,(0x01,a3)                 	| [$e949: ld   (iy+$01),$D9]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$e94d: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$e950: bit  2,a]
	jne	l_e959                             	| [$e952: jp   nz,$E959]
	bset.b	#7,(0x02,a3)                    	| [$e955: set  7,(iy+$02)]
l_e959:

	move.l	a3,-(sp)                        	| [$e959: push iy]
	move.b	#0x04,d0                        	| [$e95b: ld   a,$04]
	jbsr	suspend_this_task_B65E            	| [$e95d: call suspend_this_task_B65E]
	move.l	(sp)+,a3                        	| [$e960: pop  iy]
	addq.w	#4,a3                           	| [$e962: inc  iy] * 4
	movem.w	(sp)+,d1/d2                    	| [$e96a: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_e943                             	| [$e96b: djnz $E943]
l_e96d:
	move.b	#0x16,d0                        	| [$e96d: ld   a,$16]
	jbsr	resume_task_B5CD                  	| [$e96f: call resume_task_B5CD]
	lea	table_E373(pc),a0                  	| [$e972: ld   hl,table_E373]
	jbsr	display_multicolor_text_B391      	| [$e975: call display_multicolor_text_B391]
	movem.w	(sp)+,d1/d2                    	| [$e978: pop  bc]
	move.b	d1,d0                           	| [$e979: ld   a,b]
	cmp.b	#0x0A,d0                         	| [$e97a: cp   $0A]
	jne	l_e992                             	| [$e97c: jp   nz,$E992]
	lea	perfect_text_E62B(pc),a0           	| [$e97f: ld   hl,perfect_text_E62B]
	jbsr	display_multicolor_text_B391      	| [$e982: call display_multicolor_text_B391]
	move.b	#0x0F,d0                        	| [$e985: ld   a,$0F]
	move.b	#0x20,d1                        	| [$e987: ld   b,$20]
	jbsr	task_manipulation_B6AE            	| [$e989: call task_manipulation_B6AE]
	tst.b	d0                               	| [$e98c: and  a]
	beq.b	0f
	jbsr	display_error_text_B186           	| [$e98d: call nz,display_error_text_B186]
0:
	move.b	#0x0B,d1                        	| [$e990: ld   b,$0B]
l_e992:
	movem.w	d1/d2,-(sp)                    	| [$e992: push bc]
	move.b	#0x02,d0                        	| [$e993: ld   a,$02]
	jbsr	load_struct_C100_from_A_index_B58E	| [$e995: call load_struct_C100_from_A_index_B58E]
	movem.w	(sp)+,d1/d2                    	| [$e998: pop  bc]
	move.b	#0xC8,(0x09,a3)                 	| [$e999: ld   (iy+$09),$C8]
	move.b	#0xC0,(0x0a,a3)                 	| [$e99d: ld   (iy+$0a),$C0]
	move.b	#0x04,d0                        	| [$e9a1: ld   a,$04]
	movem.w	d1/d2,-(sp)                    	| [$e9a3: push bc]
	jbsr	task_manipulation_B6AE            	| [$e9a4: call task_manipulation_B6AE]
	movem.w	(sp)+,d1/d2                    	| [$e9a7: pop  bc]
	move.b	d1,d0                           	| [$e9a8: ld   a,b]
	cmp.b	#0x0B,d0                         	| [$e9a9: cp   $0B]
	jne	l_e9b0                             	| [$e9ab: jp   nz,$E9B0]
l_e9b0:
	jbsr	l_b1ab                            	| [$e9b0: call $B1AB]
	move.b	#0x80,d0                        	| [$e9b3: ld   a,$80]
	jbsr	suspend_this_task_B65E            	| [$e9b5: call suspend_this_task_B65E]
	move.b	#0x01,d0                        	| [$e9b8: ld   a,$01]
	move.b	#0x01,d1                        	| [$e9ba: ld   b,$01]
	jbsr	task_manipulation_B6AE            	| [$e9bc: call task_manipulation_B6AE]
	jbsr	task_yield_B5A5                   	| [$e9bf: call task_yield_B5A5]
	illegal

table_E9E2:
	dc.l	table_eadf | $e9e2
	dc.l	table_eaf3 | $e9e4
	dc.l	table_eb07 | $e9e6
	dc.l	table_eb1b | $e9e8
	dc.l	table_eb38 | $e9ea
	dc.l	table_eb4c | $e9ec
	dc.l	table_eb60 | $e9ee
	dc.l	table_eb65 | $e9f0
	dc.l	table_eb6a | $e9f2
	dc.l	table_eb6f | $e9f4
	dc.l	table_eb83 | $e9f6
	dc.l	table_eb97 | $e9f8
	dc.l	table_ebab | $e9fa
	dc.l	table_ebc8 | $e9fc
	dc.l	table_ebdc | $e9fe
	dc.l	table_ebf0 | $ea00
	dc.l	table_ebf5 | $ea02
	dc.l	table_ebfa | $ea04
table_EA06:
	dc.b	0xff,0x02,0x00,0xff,0x02,0x00,0xff,0x02 | $ea06
	dc.b	0x00,0xff,0x02,0x00,0x00,0x02,0x00,0xff | $ea0e
	dc.b	0x02,0x00,0xff,0x02,0x00,0x00,0x02,0x00 | $ea16
	dc.b	0x00,0x02,0x00,0xff,0x02,0x00,0x00,0x02 | $ea1e
	dc.b	0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x00 | $ea26
	dc.b	0x02,0x00,0x00,0x02,0x00,0x00,0x02,0x00 | $ea2e
	dc.b	0x00,0x02,0x00,0x00,0x02,0x00,0x00,0x02 | $ea36
	dc.b	0x00,0x00,0x02,0x01,0x00,0x02,0x01,0x00 | $ea3e
	dc.b	0x02,0x01,0x00,0x02,0x01,0x00,0x02,0x01 | $ea46
	dc.b	0x00,0x02,0x01,0x00,0x02,0x01,0x01,0x02 | $ea4e
	dc.b	0x01,0x00,0x02,0x02,0x01,0x02,0x03,0x00 | $ea56
	dc.b	0x02,0x04,0x01,0x02,0x05,0x00,0x02,0x06 | $ea5e
	dc.b	0x01,0x02,0x07,0x01,0x02,0x08,0x01,0x02 | $ea66
	dc.b	0x09,0x01,0x02,0x0a,0xff,0xfe,0x05,0xff | $ea6e
	dc.b	0xfe,0x04,0xff,0xfe,0x03,0xff,0xfe,0x02 | $ea76
	dc.b	0x00,0xfe,0x01,0xff,0xfe,0x00,0x00,0xfe | $ea7e
	dc.b	0x00,0xff,0xfe,0x00,0x00,0xfe,0x00,0xff | $ea86
	dc.b	0xfe,0x00,0x00,0xfe,0x00,0x00,0xfe,0x00 | $ea8e
	dc.b	0x00,0xfe,0x00,0x00,0xfe,0x00,0x00,0xfe | $ea96
	dc.b	0x00,0x00,0xfe,0x00,0x00,0xfe,0x00,0x00 | $ea9e
	dc.b	0xfe,0x00,0x00,0xfe,0x00,0x00,0xfe,0x00 | $eaa6
	dc.b	0x00,0xfe,0x00,0x00,0xfe,0x00,0x00,0xfe | $eaae
	dc.b	0x00,0x00,0xfe,0x00,0x00,0xfe,0x00,0x00 | $eab6
	dc.b	0xfe,0x00,0x01,0xfe,0x00,0x00,0xfe,0x00 | $eabe
	dc.b	0x00,0xfe,0x00,0x01,0xfe,0x00,0x01,0xfe | $eac6
	dc.b	0x00,0x00,0xfe,0x00,0x01,0xfe,0x00,0x01 | $eace
	dc.b	0xfe,0x00,0x01,0xfe,0x00,0x01,0xfe,0x00 | $ead6
	dc.b	0xfd | $eade
table_eadf:
	dc.b	0x02,0x03,0xe7,0x05,0x01,0xe8,0x05,0x01 | $eadf
	dc.b	0xe9,0x05,0x01,0xea,0x05,0x01,0xeb,0x05 | $eae7
	dc.b	0x01,0xec,0x05,0x01 | $eaef
table_eaf3:
	dc.b	0x02,0x03,0xed,0x05,0x01,0xee,0x05,0x01 | $eaf3
	dc.b	0xef,0x05,0x01,0xf0,0x05,0x01,0xf1,0x05 | $eafb
	dc.b	0x01,0xf2,0x05,0x01 | $eb03
table_eb07:
	dc.b	0x02,0x03,0xf3,0x05,0x01,0xf4,0x05,0x01 | $eb07
	dc.b	0xf5,0x05,0x01,0xf6,0x05,0x01,0xf7,0x05 | $eb0f
	dc.b	0x01,0xf8,0x05,0x01 | $eb17
table_eb1b:
	dc.b	0x03,0x03,0xf9,0x05,0x01,0xfa,0x05,0x01 | $eb1b
	dc.b	0x00,0x00,0x01,0xfb,0x05,0x01,0xfc,0x05 | $eb23
	dc.b	0x01,0xff,0x05,0x01,0xfd,0x05,0x01,0xfe | $eb2b
	dc.b	0x05,0x01,0x00,0x00,0x01 | $eb33
table_eb38:
	dc.b	0x02,0x03,0xdb,0x05,0x01,0xdc,0x05,0x01 | $eb38
	dc.b	0xdd,0x05,0x01,0xde,0x05,0x01,0xdf,0x05 | $eb40
	dc.b	0x01,0xe0,0x05,0x01 | $eb48
table_eb4c:
	dc.b	0x02,0x03,0xe1,0x05,0x01,0xe2,0x05,0x01 | $eb4c
	dc.b	0xe3,0x05,0x01,0xe4,0x05,0x01,0xe5,0x05 | $eb54
	dc.b	0x01,0xe6,0x05,0x01 | $eb5c
table_eb60:
	dc.b	0x01,0x01,0xd8,0x05,0x0d | $eb60
table_eb65:
	dc.b	0x01,0x01,0xd9,0x05,0x0d | $eb65
table_eb6a:
	dc.b	0x01,0x01,0xda,0x05,0x0d | $eb6a
table_eb6f:
	dc.b	0x02,0x03,0xe8,0x05,0x82,0xe7,0x05,0x82 | $eb6f
	dc.b	0xea,0x05,0x82,0xe9,0x05,0x82,0xec,0x05 | $eb77
	dc.b	0x82,0xeb,0x05,0x82 | $eb7f
table_eb83:
	dc.b	0x02,0x03,0xee,0x05,0x82,0xed,0x05,0x82 | $eb83
	dc.b	0xf0,0x05,0x82,0xef,0x05,0x82,0xf2,0x05 | $eb8b
	dc.b	0x82,0xf1,0x05,0x82 | $eb93
table_eb97:
	dc.b	0x02,0x03,0xf4,0x05,0x82,0xf3,0x05,0x82 | $eb97
	dc.b	0xf6,0x05,0x82,0xf5,0x05,0x82,0xf8,0x05 | $eb9f
	dc.b	0x82,0xf7,0x05,0x82 | $eba7
table_ebab:
	dc.b	0x03,0x03,0x00,0x00,0x82,0xfa,0x05,0x82 | $ebab
	dc.b	0xf9,0x05,0x82,0xff,0x05,0x82,0xfc,0x05 | $ebb3
	dc.b	0x82,0xfb,0x05,0x82,0x00,0x00,0x82,0xfe | $ebbb
	dc.b	0x05,0x82,0xfd,0x05,0x82 | $ebc3
table_ebc8:
	dc.b	0x02,0x03,0xdc,0x05,0x82,0xdb,0x05,0x82 | $ebc8
	dc.b	0xde,0x05,0x82,0xdd,0x05,0x82,0xe0,0x05 | $ebd0
	dc.b	0x82,0xdf,0x05,0x82 | $ebd8
table_ebdc:
	dc.b	0x02,0x03,0xe2,0x05,0x82,0xe1,0x05,0x82 | $ebdc
	dc.b	0xe4,0x05,0x82,0xe3,0x05,0x82,0xe6,0x05 | $ebe4
	dc.b	0x82,0xe5,0x05,0x82 | $ebec
table_ebf0:
	dc.b	0x01,0x01,0xd8,0x05,0x0d | $ebf0
table_ebf5:
	dc.b	0x01,0x01,0xd9,0x05,0x8d | $ebf5
table_ebfa:
	dc.b	0x01,0x01,0xda,0x05,0x0d | $ebfa
	.align	2
	
* < D5,D6

display_something_ebff:
	lea	table_E9E2(pc),a3                  	| [$ebff: ld   iy,table_E9E2]
	move.w	#0x0000,d3                      	| [$ec03: ld   de,$0000] 0
	move.b	d0,d1                           	| [$ec06: ld   b,a]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$ec07: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x08,d0                         	| [$ec0a: and  $08]
	jeq	l_ec13                             	| [$ec0c: jp   z,$EC13]
	move.b	d1,d0                           	| [$ec0f: ld   a,b]
	add.b	#0x09,d0                         	| [$ec10: add  a,$09]
	move.b	d0,d1                           	| [$ec12: ld   b,a]
l_ec13:
	moveq	#0,d4
	move.b	d1,d0                           	| [$ec13: ld   a,b]
	move.b	d0,d4                           	| [$ec14: ld   e,a]
	add.w	d4,d4                            	| [$ec15: sla  e]
	add.w	d4,d4                            	| [$ec15: sla  e]  (32 bit pointer)
	                           	| [$ec17: rl   d]
	add.w	d4,a3                            	| [$ec19: add  iy,de]
	move.l	(a3),a1
											| [$ec1b: ld   e,(iy+$00)]
											| [$ec1e: ld   d,(iy+$01)]
	move.l	a1,a3                        	| [$ec21: push de]
											| [$ec22: pop  iy]
	move.w	#0x0002,d1                      	| [$ec24: ld   bc,$0002] 2
	add.w	d1,a3                            	| [$ec27: add  iy,bc]
 
	move.b	(-0x01,a3),d1                   	| [$ec29: ld   b,(iy-$01)]
	move.b	(-0x02,a3),d2                   	| [$ec2c: ld   c,(iy-$02)]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$ec2f: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x08,d0                         	| [$ec32: and  $08]
	jeq	l_ec44                             	| [$ec34: jp   z,$EC44]
	move.b	d2,d0                           	| [$ec37: ld   a,c]
	asl.b	#4,d0                            	| [$ec38: sla  a] * 4
	add.b	d5,d0                            	| [$ec40: add  a,h]
	neg.b	d0                               	| [$ec41: neg]
	move.b	d0,d5                           	| [$ec43: ld   h,a]
l_ec44:
	movem.w	d1/d2,-(sp)                    	| [$ec44: push bc]
	move.b	d2,d1                           	| [$ec45: ld   b,c]

	movem.w	d5/d6,-(sp)                        	| [$ec46: push hl]
l_ec47:
	move.b	d5,d0                           	| [$ec47: ld   a,h]
	move.b	d0,(0x00,a2)                    	| [$ec48: ld   (ix+$00),a]
	move.b	(0x00,a3),d0                    	| [$ec4b: ld   a,(iy+$00)]
	move.b	d0,(0x01,a2)                    	| [$ec4e: ld   (ix+$01),a]
	move.b	(0x02,a3),d0                    	| [$ec51: ld   a,(iy+$02)]
	move.b	d0,(0x02,a2)                    	| [$ec54: ld   (ix+$02),a]
	move.b	d6,d0                           	| [$ec57: ld   a,l]
	move.b	d0,(0x03,a2)                    	| [$ec58: ld   (ix+$03),a]
	move.b	(0x01,a3),d0                    	| [$ec5b: ld   a,(iy+$01)]
	asl.b	#4,d0                            	| [$ec5e: sla  a] * 4
	or.b	(0x02,a2),d0                      	| [$ec66: or   (ix+$02)]
	move.b	d0,(0x02,a2)                    	| [$ec69: ld   (ix+$02),a]
	move.b	#0x10,d0                        	| [$ec6c: ld   a,$10]
	add.b	d5,d0                            	| [$ec6e: add  a,h]
	move.b	d0,d5                           	| [$ec6f: ld   h,a]
	addq.w	#3,a3                           	| [$ec70: inc  iy] * 3
	addq.w	#4,a2                           	| [$ec76: inc  ix] * 4
	subq.b	#1,d1                           	| [...]
	jne	l_ec47                             	| [$ec7e: djnz $EC47]
	movem.w	(sp)+,d5/d6                        	| [$ec80: pop  hl]
	move.b	#0x10,d0                        	| [$ec81: ld   a,$10]
	add.b	d6,d0                            	| [$ec83: add  a,l]
	move.b	d0,d6                           	| [$ec84: ld   l,a]
	movem.w	(sp)+,d1/d2                    	| [$ec85: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_ec44                             	| [$ec86: djnz $EC44]
	rts                                    	| [$ec88: ret]


l_ec89:
	move.b	#0x18,d1                        	| [$ec89: ld   b,$18]
	lea	unknown_C760,a2                	| [$ec8b: ld   ix,unknown_C760]
	move.b	current_task_index_C028,d0   	| [$ec8f: ld   a,(current_task_index_C028)]
	cmp.b	#0x17,d0                         	| [$ec92: cp   $17]
	jne	l_ec9d                             	| [$ec94: jp   nz,$EC9D]
	move.b	#0x30,d1                        	| [$ec97: ld   b,$30]
	lea	unknown_C790,a2                	| [$ec99: ld   ix,unknown_C790]
l_ec9d:

	move.l	a2,-(sp)                        	| [$ec9d: push ix]
	move.b	d1,d0                           	| [$ec9f: ld   a,b]
	jbsr	suspend_this_task_B65E            	| [$eca0: call suspend_this_task_B65E]
	move.l	(sp)+,a2                        	| [$eca3: pop  ix]
	jra	l_ecd1                             	| [$eca5: jp   $ECD1]
	
l_eca8:
show_highscores_screen_eca8:
	move.b	#0x01,d0                        	| [$eca8: ld   a,$01]
	jbsr	play_sound_BBB5                   	| [$ecaa: call play_sound_BBB5]
	move.w	#0x703C,d1                      	| [$ecad: ld   bc,$703C]
	jbsr	fill_video_and_attribute_memory_B316	| [$ecb0: call fill_video_and_attribute_memory_B316]
	jbsr	display_hiscores_F1AE             	| [$ecb3: call display_hiscores_F1AE]
	lea	copyright_data_east_text_FE76(pc),a0	| [$ecb6: ld   hl,copyright_data_east_text_FE76]
	move.b	#0x90,d3                        	| [$ecb9: ld   d,$90]
	jbsr	display_text_B357                 	| [$ecbb: call display_text_B357]
	move.b	#0x0B,d1                        	| [$ecbe: ld   b,$0B]
	clr.w	d5		                      	| [$ecc0: ld   hl,$0000] 0
	clr.w	d6
l_ecc3:
	                        	| [$ecc3: push hl]
	movem.w	d1/d2/d5/d6,-(sp)                    	| [$ecc4: push bc]
	jbsr	display_cyan_row_ed82                            	| [$ecc5: call $ED82]
	movem.w	(sp)+,d1/d2/d5/d6                    	| [$ecc8: pop  bc]
											| [$ecc9: pop  hl]
	addq.b	#1,d6                           	| [$ecca: inc  l]
	subq.b	#1,d1                           	| [...]
	jne	l_ecc3                             	| [$eccb: djnz $ECC3]
	lea	unknown_C730,a2                	| [$eccd: ld   ix,unknown_C730]
l_ecd1:
	move.b	#0xF5,d5
	move.b	#0x30,d6                      	| [$ecd1: ld   hl,$F530]
	move.b	current_task_index_C028,d0   	| [$ecd4: ld   a,(current_task_index_C028)]
	cmp.b	#0x17,d0                         	| [$ecd7: cp   $17]
	jne	l_ecdf                             	| [$ecd9: jp   nz,$ECDF]
	move.b	#0XF4,d5
	move.b	#0x24,d6                      	| [$ecdc: ld   hl,$F424]
l_ecdf:
	* load character_bounce_table
	lea	game_mem+0xEDAD,a3                  	| [$ecdf: ld   iy,character_bounce_table_EDAD]
	st.b	d1                                	| [$ece3: ld   b,$FF]
l_ece5:
	move.l	a2,-(sp)                        	| [$ece5: push ix]
	movem.w	d5/d6,-(sp)                        	| [$ece7: push hl]
	move.l	a3,-(sp)                        	| [$ece8: push iy]
	movem.w	d1/d2,-(sp)                    	| [$ecea: push bc]

	move.l	a2,-(sp)                        	| [$eceb: push ix]
	move.b	current_task_index_C028,d0   	| [$eced: ld   a,(current_task_index_C028)]
	cmp.b	#0x17,d0                         	| [$ecf0: cp   $17]
	jne	l_ed06                             	| [$ecf2: jp   nz,$ED06]
	move.b	periodic_counter_8bit_C02B,d0   	| [$ecf5: ld   a,(periodic_counter_8bit_C02B)]
	and.b	#0x0F,d0                         	| [$ecf8: and  $0F]
	lsr.b	#3,d0                            	| [$ecfa: srl  a] * 3
	add.b	#0x10,d0                         	| [$ed00: add  a,$10]
	move.b	d0,d3                           	| [$ed02: ld   d,a]
	jra	l_ed08                             	| [$ed03: jp   $ED08]
l_ed06:
	move.b	#0x02,d3                        	| [$ed06: ld   d,$02]
l_ed08:
	move.b	d3,d0                           	| [$ed08: ld   a,d]
	jbsr	animate_guided_character_F75D                            	| [$ed09: call $F75D]
	move.b	#0x01,d0                        	| [$ed0c: ld   a,$01]
	jbsr	suspend_this_task_B65E            	| [$ed0e: call suspend_this_task_B65E]
	move.b	#0x0C,d1                        	| [$ed11: ld   b,$0C]
	move.l	(sp)+,a2                        	| [$ed13: pop  ix]
	move.w	#0x0004,d3                      	| [$ed15: ld   de,$0004] 4
l_ed18:
	clr.b	(0x00,a2)                        	| [$ed18: ld   (ix+$00),$00]
	add.w	d3,a2                            	| [$ed1c: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_ed18                             	| [$ed1e: djnz $ED18]
	movem.w	(sp)+,d1/d2                    	| [$ed20: pop  bc]
	move.l	(sp)+,a3                        	| [$ed21: pop  iy]
	movem.w	(sp)+,d5/d6                        	| [$ed23: pop  hl]
	move.l	(sp)+,a2                        	| [$ed24: pop  ix]
	addq.w	#1,a3                           	| [$ed26: inc  iy]
	move.b	(0x00,a3),d0                    	| [$ed28: ld   a,(iy+$00)]
	cmp.b	#0x80,d0                         	| [$ed2b: cp   $80]
	jne	l_eda3                             	| [$ed2d: jp   nz,$EDA3]
	addq.w	#1,a3                           	| [$ed30: inc  iy]
	* read pointer
	moveq	#0,d3
	move.b	(0x01,a3),d3                    	| [$ed35: ld   d,(iy+$01)]
	lsl.w	#8,d3
	move.b	(0x00,a3),d3                    	| [$ed32: ld   e,(iy+$00)]
	move.l	d3,a3                        	| [$ed38: push de]
	add.l	#game_mem,a3
										| [$ed39: pop  iy]
	subq.b	#1,d1                           	| [$ed3b: dec  b]
	jne	l_eda3                             	| [$ed3c: jp   nz,$EDA3]
	move.b	current_task_index_C028,d0   	| [$ed3f: ld   a,(current_task_index_C028)]
	cmp.b	#0x17,d0                         	| [$ed42: cp   $17]
	jne	l_ed7f                             	| [$ed44: jp   nz,$ED7F]
	lea	unknown_C730,a2                	| [$ed47: ld   ix,unknown_C730]
	move.b	#0x24,d1                        	| [$ed4b: ld   b,$24]
	move.w	#0x0004,d3                      	| [$ed4d: ld   de,$0004] 4
l_ed50:
	clr.b	(0x00,a2)                        	| [$ed50: ld   (ix+$00),$00]
	add.w	d3,a2                            	| [$ed54: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_ed50                             	| [$ed56: djnz $ED50]
l_ed58:
	.ifeq	OPT_SKIP_INTRO_SCREEN
	move.b	#0x03,d1                        	| [$ed58: ld   b,$03]
* menu mainloop
l_ed5a:
	movem.w	d1/d2,-(sp)                    	| [$ed5a: push bc]
	move.b	#0x0A,d5
	move.b	#0x05,d6                      	| [$ed5b: ld   hl,$0A05]
	move.b	#0x04,d0                        	| [$ed5e: ld   a,$04]
	jbsr	draw_something_f9r4                            	| [$ed60: call $F9E4]
	move.b	#0x40,d0                        	| [$ed63: ld   a,$40]
	jbsr	suspend_this_task_B65E            	| [$ed65: call suspend_this_task_B65E]
	move.b	#0x0A,d5
	move.b	#0x05,d6                      	| [$ed68: ld   hl,$0A05] immediate
	move.b	#0x05,d0                        	| [$ed6b: ld   a,$05]
	jbsr	draw_something_f9r4                            	| [$ed6d: call $F9E4]
	move.b	#0x40,d0                        	| [$ed70: ld   a,$40]
	jbsr	suspend_this_task_B65E            	| [$ed72: call suspend_this_task_B65E]
	movem.w	(sp)+,d1/d2                    	| [$ed75: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_ed5a                             	| [$ed76: djnz $ED5A]
	.endif
	* end of bouncing characters / highscore screen
	move.b	#0x01,d0                        	| [$ed78: ld   a,$01]
	move.b	#0x01,d1                        	| [$ed7a: ld   b,$01]
	jbsr	task_manipulation_B6AE            	| [$ed7c: call task_manipulation_B6AE]
l_ed7f:
	jbsr	task_yield_B5A5                   	| [$ed7f: call task_yield_B5A5]

display_cyan_row_ed82:
	jbsr	compute_screen_address_from_XY_B2F6	| [$ed82: call compute_screen_address_from_XY_B2F6]

	move.w	d6,d4                        	| [$ed85: push hl]
	                        	| [$ed86: pop  iy]
											| [$ed88: ld   de,$0400]
	add.w	#0x400,d6                            	| [$ed8b: add  hl,de]

										| [$ed8c: push hl]
									| [$ed8d: pop  ix]
	* delta Y
	move.w	#0xFFE0,d3                      	| [$ed8f: ld   de,$FFE0] offset
	* 32 rows
	move.b	#0x20,d1                        	| [$ed92: ld   b,$20]
l_ed94:
	move.w	d6,-(a7)
	move.w	d4,d6
	move.b	#0x3C,d0                 	| [$ed94: ld   (iy+$00),$3C]
	jbsr	osd_w_videoram
	move.w	(a7)+,d6
	move.b	#0x88,d0                	| [$ed98: ld   (ix+$00),$88]
	jbsr	osd_w_colorram
	add.w	d3,d6                            	| [$ed9c: add  ix,de]
	add.w	d3,d4                            	| [$ed9e: add  iy,de]
 	subq.b	#1,d1                           	| [...]
	jne	l_ed94                             	| [$eda0: djnz $ED94]
	rts                                    	| [$eda2: ret]
l_eda3:
	subq.b	#2,d5                           	| [$eda3: dec  h]
	move.b	(a3),d0                    	| [$eda5: ld   a,(iy+$00)]
	add.b	d6,d0                            	| [$eda8: add  a,l]
	move.b	d0,d6                           	| [$eda9: ld   l,a]
	jra	l_ece5                             	| [$edaa: jp   $ECE5]
	
name_registration_time_str_EDD1:
	dc.b	0x04,0x01,0x17,0x70,0x0a,0x70,0x16,0x70 | name_registration_time_str_EDD1
	dc.b	0x0e,0x70,0x3c,0x70,0x1b,0x70,0x0e,0x70 | $edd9
	dc.b	0x10,0x70,0x12,0x70,0x1c,0x70,0x1d,0x70 | $ede1
	dc.b	0x1b,0x70,0x0a,0x70,0x1d,0x70,0x12,0x70 | $ede9
	dc.b	0x18,0x70,0x17,0x70,0xfe,0x17,0x02,0x1d | $edf1
	dc.b	0x88,0x12,0x88,0x16,0x88,0x0e,0x88,0xfe | $edf9
	dc.b	0x05,0x03,0xdb,0xb2,0xdc,0xb2,0xdc,0xb2 | $ee01
	dc.b	0xdc,0xb2,0xdc,0xb2,0xdd,0xb2,0x3c,0x70 | $ee09
	dc.b	0x3c,0x70,0xdb,0xb2,0xdc,0xb2,0xdc,0xb2 | $ee11
	dc.b	0xdc,0xb2,0xdc,0xb2,0xdd,0xb2,0x3c,0x70 | $ee19
	dc.b	0x3c,0x70,0x3c,0x70,0x3c,0x70,0x3c,0x88 | $ee21
	dc.b	0x3c,0x98,0x3c,0x98,0x3c,0x88,0xfe,0x05 | $ee29
	dc.b	0x04,0x3c,0xb0,0x3c,0xb0,0x3c,0xb0,0x3c | $ee31
	dc.b	0xb0,0x3c,0xb0,0xde,0xb2,0x3c,0x70,0x3c | $ee39
	dc.b	0x70,0x3c,0xb0,0x3c,0xb0,0x3c,0xb0,0x3c | $ee41
	dc.b	0xb0,0x3c,0xb0,0xde,0xb2,0x3c,0x70,0x3c | $ee49
	dc.b	0x70,0x3c,0x70,0x3c,0x70,0x24,0x88,0x24 | $ee51
	dc.b	0x88,0x24,0x88,0x24,0x88,0xfe,0x05,0x06 | $ee59
	dc.b	0xdb,0xb2,0xdd,0xb2,0xdb,0xb2,0xdd,0xb2 | $ee61
	dc.b	0xdb,0xb2,0xdd,0xb2,0xdb,0xb2,0xdd,0xb2 | $ee69
	dc.b	0xdb,0xb2,0xdd,0xb2,0xdb,0xb2,0xdd,0xb2 | $ee71
	dc.b	0xdb,0xb2,0xdd,0xb2,0xdb,0xb2,0xdd,0xb2 | $ee79
	dc.b	0xdb,0xb2,0xdd,0xb2,0xdb,0xb2,0xdd,0xb2 | $ee81
	dc.b	0xdb,0xb2,0xdd,0xb2,0xfe,0x05,0x07,0x0a | $ee89
	dc.b	0xb0,0xde,0xb2,0x0b,0xb0,0xde,0xb2,0x0c | $ee91
	dc.b	0xb0,0xde,0xb2,0x0d,0xb0,0xde,0xb2,0x0e | $ee99
	dc.b	0xb0,0xde,0xb2,0x0f,0xb0,0xde,0xb2,0x10 | $eea1
	dc.b	0xb0,0xde,0xb2,0x11,0xb0,0xde,0xb2,0x12 | $eea9
	dc.b	0xb0,0xde,0xb2,0x13,0xb0,0xde,0xb2,0x14 | $eeb1
	dc.b	0xb0,0xde,0xb2,0xfe,0x05,0x08,0xdb,0xb2 | $eeb9
	dc.b	0xdd,0xb2,0xdb,0xb2,0xdd,0xb2,0xdb,0xb2 | $eec1
	dc.b	0xdd,0xb2,0xdb,0xb2,0xdd,0xb2,0xdb,0xb2 | $eec9
	dc.b	0xdd,0xb2,0xdb,0xb2,0xdd,0xb2,0xdb,0xb2 | $eed1
	dc.b	0xdd,0xb2,0xdb,0xb2,0xdd,0xb2,0xdb,0xb2 | $eed9
	dc.b	0xdd,0xb2,0xdb,0xb2,0xdd,0xb2,0xdb,0xb2 | $eee1
	dc.b	0xdd,0xb2,0xfe,0x05,0x09,0x15,0xb0,0xde | $eee9
	dc.b	0xb2,0x16,0xb0,0xde,0xb2,0x17,0xb0,0xde | $eef1
	dc.b	0xb2,0x18,0xb0,0xde,0xb2,0x19,0xb0,0xde | $eef9
	dc.b	0xb2,0x1a,0xb0,0xde,0xb2,0x1b,0xb0,0xde | $ef01
	dc.b	0xb2,0x1c,0xb0,0xde,0xb2,0x1d,0xb0,0xde | $ef09
	dc.b	0xb2,0x1e,0xb0,0xde,0xb2,0x1f,0xb0,0xde | $ef11
	dc.b	0xb2,0xfe,0x05,0x0a,0xdb,0xb2,0xdd,0xb2 | $ef19
	dc.b	0xdb,0xb2,0xdd,0xb2,0xdb,0xb2,0xdd,0xb2 | $ef21
	dc.b	0xdb,0xb2,0xdd,0xb2,0xdb,0xb2,0xdd,0xb2 | $ef29
	dc.b	0xdb,0xb2,0xdd,0xb2,0xdb,0xb2,0xdd,0xb2 | $ef31
	dc.b	0xdb,0xb2,0xdd,0xb2,0xdb,0xb2,0xdd,0xb2 | $ef39
	dc.b	0xdb,0xb2,0xdc,0xb2,0xdc,0xb2,0xdc,0xb2 | $ef41
	dc.b	0xdd,0xb2,0xfe,0x05,0x0b,0x20,0xb0,0xde | $ef49
	dc.b	0xb2,0x21,0xb0,0xde,0xb2,0x22,0xb0,0xde | $ef51
	dc.b	0xb2,0x23,0xb0,0xde,0xb2,0x25,0xb0,0xde | $ef59
	dc.b	0xb2,0x26,0xb0,0xde,0xb2,0x27,0xb0,0xde | $ef61
	dc.b	0xb2,0x2d,0xb0,0xde,0xb2,0x2f,0xb0,0xde | $ef69
	dc.b	0xb2,0x29,0xb0,0x2a,0xb0,0x2b,0xb0,0x2c | $ef71
	dc.b	0xb0,0xde,0xb2,0xff | $ef79
point_rank_name_text_EF7D:
	dc.b	0x08,0x0d,0x19,0x98,0x18,0x98,0x12,0x98 | point_rank_name_text_EF7D
	dc.b	0x17,0x98,0x1d,0x98,0x3c,0x70,0x3c,0x70 | $ef85
	dc.b	0x3c,0x70,0x1b,0x98,0x0a,0x98,0x17,0x98 | $ef8d
	dc.b	0x14,0x98,0x3c,0x70,0x3c,0x70,0x3c,0x70 | $ef95
	dc.b	0x17,0x98,0x0a,0x98,0x16,0x98,0x0e,0x98 | $ef9d
	dc.b	0xfe,0x0f,0x0e,0xdb,0xb2,0xdc,0xb2,0xdc | $efa5
	dc.b	0xb2,0xdc,0xb2,0xdc,0xb2,0xdd,0xb2,0x3c | $efad
	dc.b	0x70,0xdb,0xb2,0xdc,0xb2,0xdc,0xb2,0xdc | $efb5
	dc.b	0xb2,0xdc,0xb2,0xdd,0xb2,0xfe,0x04,0x0f | $efbd
	dc.b	0x01,0x98,0x25,0x98,0xfe,0x0f,0x0f,0x3c | $efc5
	dc.b	0xb0,0x3c,0xb0,0x3c,0xb0,0x3c,0xb0,0x3c | $efcd
	dc.b	0xb0,0xde,0xb2,0x3c,0x70,0x3c,0xb0,0x3c | $efd5
	dc.b	0xb0,0x3c,0xb0,0x3c,0xb0,0x3c,0xb0,0xde | $efdd
	dc.b	0xb2,0xfe,0x0f,0x10,0xdb,0xb2,0xdc,0xb2 | $efe5
	dc.b	0xdc,0xb2,0xdc,0xb2,0xdc,0xb2,0xdd,0xb2 | $efed
	dc.b	0x3c,0x70,0xdb,0xb2,0xdc,0xb2,0xdc,0xb2 | $eff5
	dc.b	0xdc,0xb2,0xdc,0xb2,0xdd,0xb2,0xfe,0x04 | $effd
	dc.b	0x11,0x02,0x98,0x25,0x98,0xfe,0x0f,0x11 | $f005
	dc.b	0x3c,0xb0,0x3c,0xb0,0x3c,0xb0,0x3c,0xb0 | $f00d
	dc.b	0x3c,0xb0,0xde,0xb2,0x3c,0x70,0x3c,0xb0 | $f015
	dc.b	0x3c,0xb0,0x3c,0xb0,0x3c,0xb0,0x3c,0xb0 | $f01d
	dc.b	0xde,0xb2,0xfe,0x0f,0x12,0xdb,0xb2,0xdc | $f025
	dc.b	0xb2,0xdc,0xb2,0xdc,0xb2,0xdc,0xb2,0xdd | $f02d
	dc.b	0xb2,0x3c,0x70,0xdb,0xb2,0xdc,0xb2,0xdc | $f035
	dc.b	0xb2,0xdc,0xb2,0xdc,0xb2,0xdd,0xb2,0xfe | $f03d
	dc.b	0x04,0x13,0x03,0x98,0x25,0x98,0xfe,0x0f | $f045
	dc.b	0x13,0x3c,0xb0,0x3c,0xb0,0x3c,0xb0,0x3c | $f04d
	dc.b	0xb0,0x3c,0xb0,0xde,0xb2,0x3c,0x70,0x3c | $f055
	dc.b	0xb0,0x3c,0xb0,0x3c,0xb0,0x3c,0xb0,0x3c | $f05d
	dc.b	0xb0,0xde,0xb2,0xfe,0x0f,0x14,0xdb,0xb2 | $f065
	dc.b	0xdc,0xb2,0xdc,0xb2,0xdc,0xb2,0xdc,0xb2 | $f06d
	dc.b	0xdd,0xb2,0x3c,0x70,0xdb,0xb2,0xdc,0xb2 | $f075
	dc.b	0xdc,0xb2,0xdc,0xb2,0xdc,0xb2,0xdd,0xb2 | $f07d
	dc.b	0xfe,0x04,0x15,0x04,0x98,0x25,0x98,0xfe | $f085
	dc.b	0x0f,0x15,0x3c,0xb0,0x3c,0xb0,0x3c,0xb0 | $f08d
	dc.b	0x3c,0xb0,0x3c,0xb0,0xde,0xb2,0x3c,0x70 | $f095
	dc.b	0x3c,0xb0,0x3c,0xb0,0x3c,0xb0,0x3c,0xb0 | $f09d
	dc.b	0x3c,0xb0,0xde,0xb2,0xfe,0x0f,0x16,0xdb | $f0a5
	dc.b	0xb2,0xdc,0xb2,0xdc,0xb2,0xdc,0xb2,0xdc | $f0ad
	dc.b	0xb2,0xdd,0xb2,0x3c,0x70,0xdb,0xb2,0xdc | $f0b5
	dc.b	0xb2,0xdc,0xb2,0xdc,0xb2,0xdc,0xb2,0xdd | $f0bd
	dc.b	0xb2,0xfe,0x04,0x17,0x05,0x98,0x25,0x98 | $f0c5
	dc.b	0xfe,0x0f,0x17,0x3c,0xb0,0x3c,0xb0,0x3c | $f0cd
	dc.b	0xb0,0x3c,0xb0,0x3c,0xb0,0xde,0xb2,0x3c | $f0d5
	dc.b	0x70,0x3c,0xb0,0x3c,0xb0,0x3c,0xb0,0x3c | $f0dd
	dc.b	0xb0,0x3c,0xb0,0xde,0xb2,0xfe,0x0f,0x18 | $f0e5
	dc.b	0xdb,0xb2,0xdc,0xb2,0xdc,0xb2,0xdc,0xb2 | $f0ed
	dc.b	0xdc,0xb2,0xdd,0xb2,0x3c,0x70,0xdb,0xb2 | $f0f5
	dc.b	0xdc,0xb2,0xdc,0xb2,0xdc,0xb2,0xdc,0xb2 | $f0fd
	dc.b	0xdd,0xb2,0xfe,0x04,0x19,0x06,0x98,0x25 | $f105
	dc.b	0x98,0xfe,0x0f,0x19,0x3c,0xb0,0x3c,0xb0 | $f10d
	dc.b	0x3c,0xb0,0x3c,0xb0,0x3c,0xb0,0xde,0xb2 | $f115
	dc.b	0x3c,0x70,0x3c,0xb0,0x3c,0xb0,0x3c,0xb0 | $f11d
	dc.b	0x3c,0xb0,0x3c,0xb0,0xde,0xb2,0xfe,0x13 | $f125
	dc.b	0x1f,0x3c,0x98,0xff | $f12d
table_F131:
	dc.b	0x0a,0xb0,0x0b,0xb0,0x0c,0xb0,0x0d,0xb0 | table_F131
	dc.b	0x0e,0xb0,0x0f,0xb0,0x10,0xb0,0x11,0xb0 | $f139
	dc.b	0x12,0xb0,0x13,0xb0,0x14,0xb0,0x15,0xb0 | $f141
	dc.b	0x16,0xb0,0x17,0xb0,0x18,0xb0,0x19,0xb0 | $f149
	dc.b	0x1a,0xb0,0x1b,0xb0,0x1c,0xb0,0x1d,0xb0 | $f151
	dc.b	0x1e,0xb0,0x1f,0xb0,0x20,0xb0,0x21,0xb0 | $f159
	dc.b	0x22,0xb0,0x23,0xb0,0x25,0xb0,0x26,0xb0 | $f161
	dc.b	0x27,0xb0,0x2d,0xb0,0x2f,0xb0,0x29,0xb0 | $f169
	dc.b	0x2f,0xb0,0xaf | $f171
	.align	2
l_f173:
	moveq	#0,d0
	jbsr	suspend_this_task_B65E            	| [$f174: call suspend_this_task_B65E]
	asl.b	#1,d0                            	| [$f177: sla  a]
	add.b	#0x0F,d0                         	| [$f179: add  a,$0F]
	move.b	d0,d6                           	| [$f17b: ld   l,a]
	move.b	#0x04,d5                        	| [$f17c: ld   h,$04]
	jbsr	compute_screen_address_from_XY_B2F6	| [$f17e: call compute_screen_address_from_XY_B2F6]
												| [$f181: ld   bc,$0400]
	add.w	#0x400,d6                            	| [$f184: add  hl,bc]
l_f185:

	movem.w	d5/d6,-(sp)                        	| [$f185: push hl]
	move.b	#0x0A,d1                        	| [$f186: ld   b,$0A]
	move.w	#0x20,d3     	| [$f188: ld   de,task_address_table_0020]
l_f18b:
	move.b	#0x90,d0                      	| [$f18b: ld   (hl),$90]
	jbsr		osd_w_colorram
												| [$f18d: and  a]
	sub.w	d3,d6								| [sbc  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_f18b                             	| [$f190: djnz $F18B]
	move.b	#0x20,d0                        	| [$f192: ld   a,$20]
	jbsr	suspend_this_task_B65E            	| [$f194: call suspend_this_task_B65E]
	movem.w	(sp),d5/d6                        	| [$f197: pop  hl]

												| [$f198: push hl]
	move.b	#0x0A,d1                        	| [$f199: ld   b,$0A]
	move.w	#0x20,d3					     	| [$f19b: ld   de,task_address_table_0020]
l_f19e:
	moveq	#0,d0
	jbsr		osd_w_colorram						| [$f19e: ld   (hl),$00]
	                               	| [$f1a0: and  a]
	sub.w	d3,d6					| [sbc  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_f19e                             	| [$f1a3: djnz $F19E]
	move.b	#0x20,d0                        	| [$f1a5: ld   a,$20]
	jbsr	suspend_this_task_B65E            	| [$f1a7: call suspend_this_task_B65E]
	movem.w	(sp)+,d5/d6                        	| [$f1aa: pop  hl]
	jra	l_f185                             	| [$f1ab: jp   $F185]
	
display_hiscores_F1AE:
	lea	point_rank_name_text_EF7D(pc),a0   	| [$f1ae: ld   hl,point_rank_name_text_EF7D]
	jbsr	display_multicolor_text_B391      	| [$f1b1: call display_multicolor_text_B391]
	move.b	#0x06,d1                        	| [$f1b4: ld   b,$06]
	lea	unknown_C040,a3                	| [$f1b6: ld   iy,unknown_C040]
	lea	unknown_CF08,a2                	| [$f1ba: ld   ix,unknown_CF08]
	move.b	#0x07,(0x00,a2)                 	| [$f1be: ld   (ix+$00),$07]
	move.b	#0x0F,(0x01,a2)                 	| [$f1c2: ld   (ix+$01),$0F]
	move.b	#0xFF,(0x0e,a2)                 	| [$f1c6: ld   (ix+$0e),$FF]
l_f1ca:
	movem.w	d1/d2,-(sp)                    	| [$f1ca: push bc]
	move.b	#0x03,d1                        	| [$f1cb: ld   b,$03]
l_f1cd:
	move.b	(0x00,a3),d0                    	| [$f1cd: ld   a,(iy+$00)]
	lsr.b	#4,d0                            	| [$f1d0: srl  a] * 4
	move.b	d0,(0x02,a2)                    	| [$f1d8: ld   (ix+$02),a]
	move.b	#0x98,(0x03,a2)                 	| [$f1db: ld   (ix+$03),$98]
	move.b	(0x00,a3),d0                    	| [$f1df: ld   a,(iy+$00)]
	and.b	#0x0F,d0                         	| [$f1e2: and  $0F]
	move.b	d0,(0x04,a2)                    	| [$f1e4: ld   (ix+$04),a]
	move.b	#0x98,(0x05,a2)                 	| [$f1e7: ld   (ix+$05),$98]
	addq.w	#1,a3                           	| [$f1eb: inc  iy]
	addq.w	#4,a2                           	| [$f1ed: inc  ix] * 4
	subq.b	#1,d1                           	| [...]
	jne	l_f1cd                             	| [$f1f5: djnz $F1CD]

	move.l	a3,-(sp)                        	| [$f1f7: push iy]
	lea	unknown_CF0A,a2                	| [$f1f9: ld   ix,unknown_CF0A]
	move.b	#0x05,d1                        	| [$f1fd: ld   b,$05]
l_f1ff:
	move.b	(0x00,a2),d0                    	| [$f1ff: ld   a,(ix+$00)]
	tst.b	d0                               	| [$f202: and  a]
	jne	l_f210                             	| [$f203: jp   nz,$F210]
	move.b	#0x3C,(0x00,a2)                 	| [$f206: ld   (ix+$00),$3C]
	addq.w	#2,a2                           	| [$f20a: inc  ix] * 2
	subq.b	#1,d1                           	| [...]
	jne	l_f1ff                             	| [$f20e: djnz $F1FF]
l_f210:
	lea	unknown_CF08,a0                	| [$f210: ld   hl,unknown_CF08]
	jbsr	display_multicolor_text_B391      	| [$f213: call display_multicolor_text_B391]
	move.l	(sp)+,a3                        	| [$f216: pop  iy]
	lea	unknown_CF08,a2                	| [$f218: ld   ix,unknown_CF08]
	addq.b	#2,(0x01,a2)                    	| [$f21c: inc  (ix+$01)] * 2
	move.w	#0x000F,d3                      	| [$f222: ld   de,$000F] 15
	add.w	d3,a3                            	| [$f225: add  iy,de]
	movem.w	(sp)+,d1/d2                    	| [$f227: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_f1ca                             	| [$f228: djnz $F1CA]
	move.b	#0x06,d1                        	| [$f22a: ld   b,$06]
	lea	unknown_C040,a3                	| [$f22c: ld   iy,unknown_C040]
	lea	unknown_CF08,a2                	| [$f230: ld   ix,unknown_CF08]
	move.b	#0x0F,(0x00,a2)                 	| [$f234: ld   (ix+$00),$0F]
	move.b	#0x0F,(0x01,a2)                 	| [$f238: ld   (ix+$01),$0F]
l_f23c:
	move.b	#0x3C,(0x02,a2)                 	| [$f23c: ld   (ix+$02),$3C]
	move.b	#0x0D,(0x04,a2)                 	| [$f240: ld   (ix+$04),$0D]
	move.b	#0x0A,(0x05,a2)                 	| [$f244: ld   (ix+$05),$0A]
	move.b	#0x17,(0x06,a2)                 	| [$f248: ld   (ix+$06),$17]
	move.b	#0xFF,(0x07,a2)                 	| [$f24c: ld   (ix+$07),$FF]
	move.b	(0x11,a3),d0                    	| [$f250: ld   a,(iy+$11)]
	addq.b	#1,d0                           	| [$f253: inc  a]
	move.b	d0,(0x03,a2)                    	| [$f254: ld   (ix+$03),a]
	cmp.b	#0x0A,d0                         	| [$f257: cp   $0A]
	jcs	l_f27b                             	| [$f259: jp   c,$F27B]
	move.b	#0x01,(0x02,a2)                 	| [$f25c: ld   (ix+$02),$01]
	clr.b	(0x03,a2)                        	| [$f260: ld   (ix+$03),$00]
	jeq	l_f27b                             	| [$f264: jp   z,$F27B]
	move.b	#0x0C,(0x02,a2)                 	| [$f267: ld   (ix+$02),$0C]
	move.b	#0x11,(0x03,a2)                 	| [$f26b: ld   (ix+$03),$11]
	move.b	#0x0A,(0x04,a2)                 	| [$f26f: ld   (ix+$04),$0A]
	move.b	#0x16,(0x05,a2)                 	| [$f273: ld   (ix+$05),$16]
	move.b	#0x19,(0x06,a2)                 	| [$f277: ld   (ix+$06),$19]
l_f27b:
	lea	unknown_CF08,a0                	| [$f27b: ld   hl,unknown_CF08]
	move.b	#0xB0,d3                        	| [$f27e: ld   d,$B0]
	movem.w	d1/d2,-(sp)                    	| [$f280: push bc]
	jbsr	display_text_B357                 	| [$f281: call display_text_B357]
	move.w	#0x0012,d3                      	| [$f284: ld   de,$0012] 18
	add.w	d3,a3                            	| [$f287: add  iy,de]
	lea	unknown_CF08,a2                	| [$f289: ld   ix,unknown_CF08]
	addq.b	#2,(0x01,a2)                    	| [$f28d: inc  (ix+$01)] * 2
	movem.w	(sp)+,d1/d2                    	| [$f293: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_f23c                             	| [$f294: djnz $F23C]
	move.b	#0x06,d1                        	| [$f296: ld   b,$06]
	lea	unknown_C040,a3                	| [$f298: ld   iy,unknown_C040]
	lea	unknown_CF08,a2                	| [$f29c: ld   ix,unknown_CF08]
	move.b	#0x17,(0x00,a2)                 	| [$f2a0: ld   (ix+$00),$17]
	move.b	#0x0F,(0x01,a2)                 	| [$f2a4: ld   (ix+$01),$0F]
	move.b	#0xFF,(0x08,a2)                 	| [$f2a8: ld   (ix+$08),$FF]
	move.b	#0x06,d1                        	| [$f2ac: ld   b,$06]
l_f2ae:
	movem.w	d1/d2,-(sp)                    	| [$f2ae: push bc]
	move.b	(0x06,a3),d0                    	| [$f2af: ld   a,(iy+$06)]
	move.b	d0,(0x02,a2)                    	| [$f2b2: ld   (ix+$02),a]
	move.b	(0x07,a3),d0                    	| [$f2b5: ld   a,(iy+$07)]
	move.b	d0,(0x03,a2)                    	| [$f2b8: ld   (ix+$03),a]
	move.b	(0x08,a3),d0                    	| [$f2bb: ld   a,(iy+$08)]
	move.b	d0,(0x04,a2)                    	| [$f2be: ld   (ix+$04),a]
	move.b	(0x09,a3),d0                    	| [$f2c1: ld   a,(iy+$09)]
	move.b	d0,(0x05,a2)                    	| [$f2c4: ld   (ix+$05),a]
	move.b	(0x0a,a3),d0                    	| [$f2c7: ld   a,(iy+$0a)]
	move.b	d0,(0x06,a2)                    	| [$f2ca: ld   (ix+$06),a]
	move.b	(0x0b,a3),d0                    	| [$f2cd: ld   a,(iy+$0b)]
	move.b	d0,(0x07,a2)                    	| [$f2d0: ld   (ix+$07),a]

	move.l	a3,-(sp)                        	| [$f2d3: push iy]
	lea	unknown_CF08,a0                	| [$f2d5: ld   hl,unknown_CF08]
	jbsr	display_multicolor_text_B391      	| [$f2d8: call display_multicolor_text_B391]
	move.l	(sp)+,a3                        	| [$f2db: pop  iy]
	movem.w	(sp)+,d1/d2                    	| [$f2dd: pop  bc]
	lea	unknown_CF08,a2                	| [$f2de: ld   ix,unknown_CF08]
	addq.b	#2,(0x01,a2)                    	| [$f2e2: inc  (ix+$01)] * 2
	move.w	#0x0012,d3                      	| [$f2e8: ld   de,$0012] 18
	add.w	d3,a3                            	| [$f2eb: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_f2ae                             	| [$f2ed: djnz $F2AE]
	rts                                    	| [$f2ef: ret]
l_f2f0:
	move.b	#0x06,d1                        	| [$f2f0: ld   b,$06]
	lea	unknown_C040,a2                	| [$f2f2: ld   ix,unknown_C040]
	move.w	#0x0012,d3                      	| [$f2f6: ld   de,$0012] 18
	lea	unknown_C0C8,a3                	| [$f2f9: ld   iy,unknown_C0C8]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$f2fd: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$f300: bit  2,a]
	jne	l_f309                             	| [$f302: jp   nz,$F309]
	lea	unknown_C0D0,a3                	| [$f305: ld   iy,unknown_C0D0]
l_f309:
	move.b	(0x02,a3),d0                    	| [$f309: ld   a,(iy+$02)]
	sub.b	(0x02,a2),d0                     	| [$f30c: sub  (ix+$02)]
	move.b	(0x01,a3),d0                    	| [$f30f: ld   a,(iy+$01)]
	sub.b	(0x01,a2),d0                    	| [$f312: sbc  a,(ix+$01)]
	move.b	(0x00,a3),d0                    	| [$f315: ld   a,(iy+$00)]
	sub.b	(0x00,a2),d0                    	| [$f318: sbc  a,(ix+$00)]
	jcc	l_f32d                             	| [$f31b: jp   nc,$F32D]
	add.w	d3,a2                            	| [$f31e: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_f309                             	| [$f320: djnz $F309]
	move.l	(sp)+,a0                        	| [$f322: pop  hl]
	move.b	#0x01,d0                        	| [$f323: ld   a,$01]
	move.b	#0x01,d1                        	| [$f325: ld   b,$01]
	jbsr	task_manipulation_B6AE            	| [$f327: call task_manipulation_B6AE]
	jbsr	task_yield_B5A5                   	| [$f32a: call task_yield_B5A5]
l_f32d:
	move.b	#0x06,d0                        	| [$f32d: ld   a,$06]
	sub.b	d1,d0                            	| [$f32f: sub  b]
	movem.w	d1/d2,-(sp)                    	| [$f330: push bc]

	move.l	a3,-(sp)                        	| [$f331: push iy]

	move.l	a2,-(sp)                        	| [$f333: push ix]
	move.b	d0,d1                           	| [$f335: ld   b,a]
	move.b	#0x16,d0                        	| [$f336: ld   a,$16]
	jbsr	task_manipulation_B6AE            	| [$f338: call task_manipulation_B6AE]
	move.l	(sp)+,a2                        	| [$f33b: pop  ix]
	move.l	(sp)+,a3                        	| [$f33d: pop  iy]
	movem.w	(sp)+,d1/d2                    	| [$f33f: pop  bc]
	subq.b	#1,d1                           	| [$f340: dec  b]
	jeq	l_f355                             	| [$f341: jp   z,$F355]
	clr.b	d0                               	| [$f344: ld   a,$00]
l_f346:
	add.b	#0x12,d0                         	| [$f346: add  a,$12]
	subq.b	#1,d1                           	| [...]
	jne	l_f346                             	| [$f348: djnz $F346]
	clr.b	d1                               	| [$f34a: ld   b,$00]
	move.b	d0,d2                           	| [$f34c: ld   c,a]
	lea	unknown_C099,a0                	| [$f34d: ld   hl,unknown_C099]
	lea	unknown_C0AB,a1                	| [$f350: ld   de,unknown_C0AB]
	bsr		lddr
l_f355:
	move.b	(0x00,a3),d0                    	| [$f355: ld   a,(iy+$00)]
	move.b	d0,(0x00,a2)                    	| [$f358: ld   (ix+$00),a]
	move.b	(0x01,a3),d0                    	| [$f35b: ld   a,(iy+$01)]
	move.b	d0,(0x01,a2)                    	| [$f35e: ld   (ix+$01),a]
	move.b	(0x02,a3),d0                    	| [$f361: ld   a,(iy+$02)]
	move.b	d0,(0x02,a2)                    	| [$f364: ld   (ix+$02),a]
	move.b	computer_skill_C910,d0          	| [$f367: ld   a,(computer_skill_C910)]
	move.b	d0,(0x11,a2)                    	| [$f36a: ld   (ix+$11),a]
	* I'd say that it's a bug, CF06 is stored as pointer, and read as bytes...
	**move.l	a2,unknown_pointer_CF06                 	| [$f36d: ld   (unknown_pointer_CF06),ix]
	move.w	#0x0006,d1                      	| [$f371: ld   bc,$0006] 6
	add.w	d1,a2                            	| [$f374: add  ix,bc]
	move.b	#0x3C,(0x00,a2)                 	| [$f376: ld   (ix+$00),$3C]
	move.b	#0xB0,(0x01,a2)                 	| [$f37a: ld   (ix+$01),$B0]
	move.b	#0x3C,(0x02,a2)                 	| [$f37e: ld   (ix+$02),$3C]
	move.b	#0xB0,(0x03,a2)                 	| [$f382: ld   (ix+$03),$B0]
	move.b	#0x3C,(0x04,a2)                 	| [$f386: ld   (ix+$04),$3C]
	move.b	#0xB0,(0x05,a2)                 	| [$f38a: ld   (ix+$05),$B0]
	move.b	#0x3C,(0x06,a2)                 	| [$f38e: ld   (ix+$06),$3C]
	move.b	#0xB0,(0x07,a2)                 	| [$f392: ld   (ix+$07),$B0]
	move.b	#0x3C,(0x08,a2)                 	| [$f396: ld   (ix+$08),$3C]
	move.b	#0xB0,(0x09,a2)                 	| [$f39a: ld   (ix+$09),$B0]
	rts                                    	| [$f39e: ret]

l_f39f:
	move.w	d0,-(sp)                        	| [$f39f: push af]
	move.b	unknown_CF01,d0                 	| [$f3a0: ld   a,(unknown_CF01)]
	subq.b	#0x07,d0                        	| [$f3a3: sub  $07]
	move.b	d0,d3                           	| [$f3a5: ld   d,a]
	move.b	#0x0B,d4                        	| [$f3a6: ld   e,$0B]
	jbsr	multiply_de_B0C3                  	| [$f3a8: call multiply_de_B0C3]
	lea	table_F131(pc),a2                  	| [$f3ab: ld   ix,table_F131]
	add.w	d3,a2                            	| [$f3af: add  ix,de]
	move.b	temp_numeric_buffer_CF00,d0     	| [$f3b1: ld   a,(temp_numeric_buffer_CF00)]
	subq.b	#0x05,d0                        	| [$f3b4: sub  $05]
	clr.w	d1                               	| [$f3b6: ld   b,$00]
	move.b	d0,d1                           	| [$f3b8: ld   c,a]
	add.w	d1,a2                            	| [$f3b9: add  ix,bc]
	move.w	(sp)+,d0                        	| [$f3bb: pop  af]
	move.b	#0xB0,d2                        	| [$f3bc: ld   c,$B0]
	tst.b	d0                               	| [$f3be: and  a]
	jeq	l_f3c4                             	| [$f3bf: jp   z,$F3C4]
	move.b	#0xA8,d2                        	| [$f3c2: ld   c,$A8]
l_f3c4:
	move.b	d2,d0                           	| [$f3c4: ld   a,c]
	move.w	d0,-(sp)                        	| [$f3c5: push af]
	move.b	temp_numeric_buffer_CF00,d0     	| [$f3c6: ld   a,(temp_numeric_buffer_CF00)]
	move.b	d0,d5                           	| [$f3c9: ld   h,a]
	move.b	unknown_CF01,d0                 	| [$f3ca: ld   a,(unknown_CF01)]
	move.b	d0,d6                           	| [$f3cd: ld   l,a]
	jbsr	compute_screen_address_from_XY_B2F6	| [$f3ce: call compute_screen_address_from_XY_B2F6]
	move.w  #0x400,d3                      	| [$f3d1: ld   de,$0400]
	add.w	d3,d6                            	| [$f3d4: add  hl,de]
	move.w	(sp)+,d0                        	| [$f3d5: pop  af]
	jbsr		osd_w_colorram                         	| [$f3d6: ld   (hl),a]
	move.b	d0,d1                           	| [$f3d7: ld   b,a]
	move.b	temp_numeric_buffer_CF00,d0     	| [$f3d8: ld   a,(temp_numeric_buffer_CF00)]
	cmp.b	#0x17,d0                         	| [$f3db: cp   $17]
	jeq	l_f3e6                             	| [$f3dd: jp   z,$F3E6]
	cmp.b	#0x19,d0                         	| [$f3e0: cp   $19]
	jeq	l_f3e6                             	| [$f3e2: jp   z,$F3E6]
	rts                                    	| [$f3e5: ret]
l_f3e6:
	move.b	unknown_CF01,d0                 	| [$f3e6: ld   a,(unknown_CF01)]
	cmp.b	#0x0B,d0                         	| [$f3e9: cp   $0B]
	beq.b	0f
	rts                                    	| [$f3eb: ret  nz]
0:
	move.w  #0xFFE0,d3                      	| [$f3ec: ld   de,$FFE0] immediate -32
	add.w	d3,d6                            	| [$f3ef: add  hl,de]
	move.b	d1,d0	                         	| [$f3f0: ld   (hl),b]
	jbsr		osd_w_colorram
	rts                                    	| [$f3f1: ret]
	rts                                    	| [$f3f2: ret]
l_f3f3:
	move.b	#0x01,d0                        	| [$f3f3: ld   a,$01]
	jbsr	suspend_this_task_B65E            	| [$f3f5: call suspend_this_task_B65E]
	move.b	unknown_CF03,d0                 	| [$f3f8: ld   a,(unknown_CF03)]
	moveq	#1,d7
	sbcd.b	d7,d0                        	| [$f3fb: sub  $01]
* part needs rewriting
	move.b	d0,unknown_CF03                 	| [$f3fe: ld   (unknown_CF03),a]
	move.b	unknown_CF02,d0                 	| [$f401: ld   a,(unknown_CF02)]
	clr.b	d7
	sbcd.b	d7,d0                        	| [$f404: sbc  a,$00]
	move.b	d0,unknown_CF02                 	| [$f407: ld   (unknown_CF02),a]
	move.b	#0x18,d5                        	| [$f40a: ld   h,$18]
	move.b	#0x03,d6                        	| [$f40c: ld   l,$03]
	jbsr	compute_screen_address_from_XY_B2F6	| [$f40e: call compute_screen_address_from_XY_B2F6]

											| [$f411: push hl]
											| [$f412: pop  ix]
	move.w  #0x400,d1                      	| [$f414: ld   bc,$0400]
	move.b	unknown_CF02,d0                 	| [$f417: ld   a,(unknown_CF02)]
	lsr.b	#4,d0                            	| [$f41a: srl  a] * 4
	jbsr		osd_w_videoram                    	| [$f422: ld   (ix+$00),a]
	move.b	unknown_CF02,d0                 	| [$f425: ld   a,(unknown_CF02)]
	and.b	#0x0F,d0                         	| [$f428: and  $0F]
	sub.w	#0x20,d6
	jbsr		osd_w_videoram						| [$f42a: ld   (ix-$20),a]
	add.w	#0x20,d6
	add.w	d1,d6                            	| [$f42d: add  ix,bc]
	move.b	#0x98,d0                 	| [$f42f: ld   (ix+$00),$98]
	jbsr		osd_w_colorram
	sub.w	#0x20,d6
	jbsr		osd_w_colorram
	add.w	#0x20,d6						| [$f433: ld   (ix-$20),$98]
	lea	unknown_CF02,a0                	| [$f437: ld   hl,unknown_CF02]
	move.b	(a0)+,d0                         	| [$f43a: ld   a,(hl)]
												| [$f43b: inc  hl]
	or.b	(a0),d0                           	| [$f43c: or   (hl)]
												| [$f43d: cp   $00]
	jne	l_f444                             	| [$f43f: jp   nz,$F444]
	subq.b	#1,d0                           	| [$f442: dec  a]
	rts                                    	| [$f443: ret]
l_f444:
	jbsr	read_current_player_controls_BB96 	| [$f444: call read_current_player_controls_BB96]
	tst.b	d0                               	| [$f447: and  a]
	jeq	l_f3f3                             	| [$f448: jp   z,$F3F3]
	move.w	d0,-(sp)                        	| [$f44b: push af]
	clr.b	d0                               	| [$f44c: ld   a,$00]
	jbsr	l_f39f                            	| [$f44e: call $F39F]
	move.w	(sp)+,d0                        	| [$f451: pop  af]
	move.w	d0,-(sp)                        	| [$f452: push af]
	and.b	#0xF0,d0                         	| [$f453: and  $F0]
	cmp.b	#0x80,d0                         	| [$f455: cp   $80]
	jeq	l_f490                             	| [$f457: jp   z,$F490]
	cmp.b	#0x40,d0                         	| [$f45a: cp   $40]
	jeq	l_f4a2                             	| [$f45c: jp   z,$F4A2]
	cmp.b	#0x20,d0                         	| [$f45f: cp   $20]
	jeq	l_f4b4                             	| [$f461: jp   z,$F4B4]
	cmp.b	#0x10,d0                         	| [$f464: cp   $10]
	jne	l_f4e3                             	| [$f466: jp   nz,$F4E3]
	move.b	temp_numeric_buffer_CF00,d0     	| [$f469: ld   a,(temp_numeric_buffer_CF00)]
	addq.b	#2,d0                           	| [$f46c: inc  a] * 2
	move.b	d0,temp_numeric_buffer_CF00     	| [$f46e: ld   (temp_numeric_buffer_CF00),a]
	cmp.b	#0x1B,d0                         	| [$f471: cp   $1B]
	jcs	l_f48d                             	| [$f473: jp   c,$F48D]
	move.b	#0x05,d0                        	| [$f476: ld   a,$05]
	move.b	d0,temp_numeric_buffer_CF00     	| [$f478: ld   (temp_numeric_buffer_CF00),a]
	move.b	unknown_CF01,d0                 	| [$f47b: ld   a,(unknown_CF01)]
	addq.b	#2,d0                           	| [$f47e: inc  a] * 2
	cmp.b	#0x0D,d0                         	| [$f480: cp   $0D]
	jcs	l_f487                             	| [$f482: jp   c,$F487]
	move.b	#0x07,d0                        	| [$f485: ld   a,$07]
l_f487:
	move.b	d0,unknown_CF01                 	| [$f487: ld   (unknown_CF01),a]
	jra	l_f4e3                             	| [$f48a: jp   $F4E3]
l_f48d:
	jra	l_f4e3                             	| [$f48d: jp   $F4E3]
l_f490:
	move.b	unknown_CF01,d0                 	| [$f490: ld   a,(unknown_CF01)]
	addq.b	#2,d0                           	| [$f493: inc  a] * 2
	cmp.b	#0x0D,d0                         	| [$f495: cp   $0D]
	jcs	l_f49c                             	| [$f497: jp   c,$F49C]
	move.b	#0x07,d0                        	| [$f49a: ld   a,$07]
l_f49c:
	move.b	d0,unknown_CF01                 	| [$f49c: ld   (unknown_CF01),a]
	jra	l_f4e3                             	| [$f49f: jp   $F4E3]
l_f4a2:
	move.b	unknown_CF01,d0                 	| [$f4a2: ld   a,(unknown_CF01)]
	subq.b	#2,d0                           	| [$f4a5: dec  a] * 2
	cmp.b	#0x05,d0                         	| [$f4a7: cp   $05]
	jne	l_f4ae                             	| [$f4a9: jp   nz,$F4AE]
	move.b	#0x0B,d0                        	| [$f4ac: ld   a,$0B]
l_f4ae:
	move.b	d0,unknown_CF01                 	| [$f4ae: ld   (unknown_CF01),a]
	jra	l_f4e3                             	| [$f4b1: jp   $F4E3]
l_f4b4:
	move.b	temp_numeric_buffer_CF00,d0     	| [$f4b4: ld   a,(temp_numeric_buffer_CF00)]
	subq.b	#2,d0                           	| [$f4b7: dec  a] * 2
	cmp.b	#0x03,d0                         	| [$f4b9: cp   $03]
	jeq	l_f4c4                             	| [$f4bb: jp   z,$F4C4]
	move.b	d0,temp_numeric_buffer_CF00     	| [$f4be: ld   (temp_numeric_buffer_CF00),a]
	jra	l_f4e3                             	| [$f4c1: jp   $F4E3]
l_f4c4:
	move.b	unknown_CF01,d0                 	| [$f4c4: ld   a,(unknown_CF01)]
	cmp.b	#0x07,d0                         	| [$f4c7: cp   $07]
	jne	l_f4d9                             	| [$f4c9: jp   nz,$F4D9]
	move.b	#0x19,d0                        	| [$f4cc: ld   a,$19]
	move.b	d0,temp_numeric_buffer_CF00     	| [$f4ce: ld   (temp_numeric_buffer_CF00),a]
	move.b	#0x0B,d0                        	| [$f4d1: ld   a,$0B]
	move.b	d0,unknown_CF01                 	| [$f4d3: ld   (unknown_CF01),a]
	jra	l_f4e3                             	| [$f4d6: jp   $F4E3]
l_f4d9:
	move.b	#0x19,d0                        	| [$f4d9: ld   a,$19]
	move.b	d0,temp_numeric_buffer_CF00     	| [$f4db: ld   (temp_numeric_buffer_CF00),a]
	lea	unknown_CF01,a0                	| [$f4de: ld   hl,unknown_CF01]
	subq.b	#2,(a0)                         	| [$f4e1: dec  (hl)] * 2
l_f4e3:
	move.b	#0x01,d0                        	| [$f4e3: ld   a,$01]
	jbsr	l_f39f                            	| [$f4e5: call $F39F]
	move.w	(sp)+,d0                        	| [$f4e8: pop  af]
	and.b	#0x0F,d0                         	| [$f4e9: and  $0F]
	jeq	l_f5d0                             	| [$f4eb: jp   z,$F5D0]
	move.b	unknown_CF01,d0                 	| [$f4ee: ld   a,(unknown_CF01)]
	cmp.b	#0x0B,d0                         	| [$f4f1: cp   $0B]
	jne	l_f501                             	| [$f4f3: jp   nz,$F501]
	move.b	temp_numeric_buffer_CF00,d0     	| [$f4f6: ld   a,(temp_numeric_buffer_CF00)]
	cmp.b	#0x19,d0                         	| [$f4f9: cp   $19]
	jne	l_f501                             	| [$f4fb: jp   nz,$F501]
	st.b	d0                                	| [$f4fe: ld   a,$FF]
	rts                                    	| [$f500: ret]
l_f501:
	move.b	unknown_CF01,d0                 	| [$f501: ld   a,(unknown_CF01)]
	cmp.b	#0x0B,d0                         	| [$f504: cp   $0B]
	jne	l_f555                             	| [$f506: jp   nz,$F555]
	move.b	temp_numeric_buffer_CF00,d0     	| [$f509: ld   a,(temp_numeric_buffer_CF00)]
	cmp.b	#0x17,d0                         	| [$f50c: cp   $17]
	jne	l_f555                             	| [$f50e: jp   nz,$F555]
	move.b	#0x16,d0                        	| [$f511: ld   a,$16]
	jbsr	play_sound_BBB5                   	| [$f513: call play_sound_BBB5]
	move.b	unknown_CF05,d0                 	| [$f516: ld   a,(unknown_CF05)]
	subq.b	#1,d0                           	| [$f519: dec  a]
	cmp.b	#0xFF,d0                         	| [$f51a: cp   $FF]
	jeq	l_f5d0                             	| [$f51c: jp   z,$F5D0]
	move.b	d0,unknown_CF05                 	| [$f51f: ld   (unknown_CF05),a]
	move.b	#0x0E,d5                        	| [$f522: ld   h,$0E]
	move.b	#0x04,d6                        	| [$f524: ld   l,$04]
	jbsr	compute_screen_address_from_XY_B2F6	| [$f526: call compute_screen_address_from_XY_B2F6]

	movem.w	d5/d6,-(sp)                        	| [$f529: push hl]
	move.b	unknown_CF05,d0                 	| [$f52a: ld   a,(unknown_CF05)]
	move.b	d0,d4                           	| [$f52d: ld   e,a]
	move.b	#0x20,d3                        	| [$f52e: ld   d,$20]
l_F530:
	jbsr	multiply_de_B0C3                  	| [$f530: call multiply_de_B0C3]
	movem.w	(sp)+,d5/d6                        	| [$f533: pop  hl]
											| [$f534: and  a]
	sub.w	d3,d6							| [sbc  hl,de]
	move.b	#0x3C,d0                      	| [$f537: ld   (hl),$3C]
	jbsr		osd_w_videoram
	move.w  #0x400,d3                      	| [$f539: ld   de,$0400]
	add.w	d3,d6                            	| [$f53c: add  hl,de]
	move.b	#0xB0,d0                      	| [$f53d: ld   (hl),$B0]
	jbsr		osd_w_colorram
	trap	#13
	move.l	unknown_pointer_CF06,a0             	| [$f53f: ld   hl,(unknown_pointer_CF06)]
	move.b	unknown_CF05,d0                 	| [$f542: ld   a,(unknown_CF05)]
	asl.b	#1,d0                            	| [$f545: sla  a]
	addq.b	#0x06,d0                        	| [$f547: add  a,$06]
	clr.b	d1                               	| [$f549: ld   b,$00]
	move.b	d0,d2                           	| [$f54b: ld   c,a]
	add.w	d1,a0                            	| [$f54c: add  hl,bc]
	move.b	#0x24,(a0)+                      	| [$f54d: ld   (hl),$24]
												| [$f54f: inc  hl]
	move.b	#0xB0,(a0)                      	| [$f550: ld   (hl),$B0]
	jra	l_f5d0                             	| [$f552: jp   $F5D0]
l_f555:
	move.b	#0x16,d0                        	| [$f555: ld   a,$16]
	jbsr	play_sound_BBB5                   	| [$f557: call play_sound_BBB5]
	move.b	unknown_CF01,d0                 	| [$f55a: ld   a,(unknown_CF01)]
	subq.b	#0x07,d0                        	| [$f55d: sub  $07]
	move.b	d0,d3                           	| [$f55f: ld   d,a]
	move.b	#0x0B,d4                        	| [$f560: ld   e,$0B]
	jbsr	multiply_de_B0C3                  	| [$f562: call multiply_de_B0C3]
	clr.b	d5                               	| [$f565: ld   h,$00]
	move.b	temp_numeric_buffer_CF00,d0     	| [$f567: ld   a,(temp_numeric_buffer_CF00)]
	subq.b	#0x05,d0                        	| [$f56a: sub  $05]
	move.b	d0,d6                           	| [$f56c: ld   l,a]
	add.w	d3,a0                            	| [$f56d: add  hl,de]
	lea	table_F131(pc),a1                  	| [$f56e: ld   de,table_F131]
	add.w	d3,a0                            	| [$f571: add  hl,de]

	move.l	a0,-(sp)                        	| [$f572: push hl]
	move.b	#0x0E,d5                        	| [$f573: ld   h,$0E]
	move.b	#0x04,d6                        	| [$f575: ld   l,$04]
	jbsr	compute_screen_address_from_XY_B2F6	| [$f577: call compute_screen_address_from_XY_B2F6]

	move.l	a0,-(sp)                        	| [$f57a: push hl]
	move.b	unknown_CF05,d0                 	| [$f57b: ld   a,(unknown_CF05)]
	cmp.b	#0x03,d0                         	| [$f57e: cp   $03]
	jne	l_f584                             	| [$f580: jp   nz,$F584]
	subq.b	#1,d0                           	| [$f583: dec  a]
l_f584:
	move.b	d0,d3                           	| [$f584: ld   d,a]
	move.b	#0x20,d4                        	| [$f585: ld   e,$20]
	jbsr	multiply_de_B0C3                  	| [$f587: call multiply_de_B0C3]
	move.l	(sp)+,a0                        	| [$f58a: pop  hl]
	tst.b	d0                               	| [$f58b: and  a]
	sub.w	d3,a0								| [sbc  hl,de]
	* screen shit, ends with read on CF06 WTF!
	trap	#14
	move.l	a0,-(sp)                        	| [$f58e: push hl]
	move.l	(sp)+,a3                        	| [$f58f: pop  iy]
	move.l	(sp)+,a2                        	| [$f591: pop  ix]
	move.b	(0x00,a2),d0                    	| [$f593: ld   a,(ix+$00)]
	move.b	d0,(0x00,a3)                    	| [$f596: ld   (iy+$00),a]
	move.w  #0x400,d1                      	| [$f599: ld   bc,$0400]
	add.w	d1,a3                            	| [$f59c: add  iy,bc]
	move.b	#0xA8,(0x00,a3)                 	| [$f59e: ld   (iy+$00),$A8]
	move.l	unknown_pointer_CF06,a3             	| [$f5a2: ld   iy,(unknown_pointer_CF06)]
	move.b	unknown_CF05,d0                 	| [$f5a6: ld   a,(unknown_CF05)]
	cmp.b	#0x03,d0                         	| [$f5a9: cp   $03]
	jne	l_f5af                             	| [$f5ab: jp   nz,$F5AF]
	subq.b	#1,d0                           	| [$f5ae: dec  a]
l_f5af:
	asl.b	#1,d0                            	| [$f5af: sla  a]
	addq.b	#0x06,d0                        	| [$f5b1: add  a,$06]
	clr.w	d1                               	| [$f5b3: ld   b,$00]
	move.b	d0,d1                           	| [$f5b5: ld   c,a]
	add.w	d1,a3                            	| [$f5b6: add  iy,bc]

	move.b	(0x00,a2),d0                    	| [$f5b8: ld   a,(ix+$00)]
	move.b	d0,(0x00,a3)                    	| [$f5bb: ld   (iy+$00),a]
	move.b	(0x01,a2),d0                    	| [$f5be: ld   a,(ix+$01)]
	move.b	d0,(0x01,a3)                    	| [$f5c1: ld   (iy+$01),a]
	move.b	unknown_CF05,d0                 	| [$f5c4: ld   a,(unknown_CF05)]
	cmp.b	#0x03,d0                         	| [$f5c7: cp   $03]
	jeq	l_f5cd                             	| [$f5c9: jp   z,$F5CD]
	addq.b	#1,d0                           	| [$f5cc: inc  a]
l_f5cd:
	move.b	d0,unknown_CF05                 	| [$f5cd: ld   (unknown_CF05),a]
l_f5d0:
	move.b	#0x08,d1                        	| [$f5d0: ld   b,$08]
l_f5d2:
	move.b	#0x01,d0                        	| [$f5d2: ld   a,$01]
	movem.w	d1/d2,-(sp)                    	| [$f5d4: push bc]
	jbsr	suspend_this_task_B65E            	| [$f5d5: call suspend_this_task_B65E]
	move.b	unknown_CF03,d0                 	| [$f5d8: ld   a,(unknown_CF03)]
	moveq	#1,d7
	sbcd.b	d7,d0                        	| [$f5db: sub  $01]
	move.b	d0,unknown_CF03                 	| [$f5de: ld   (unknown_CF03),a]
	move.b	unknown_CF02,d0                 	| [$f5e1: ld   a,(unknown_CF02)]
	clr.b	d7
	sbcd.b	d7,d0                        	| [$f5e4: sbc  a,$00]

	move.b	d0,unknown_CF02                 	| [$f5e7: ld   (unknown_CF02),a]
	move.b	#0x18,d5                        	| [$f5ea: ld   h,$18]
	move.b	#0x03,d6                        	| [$f5ec: ld   l,$03]
	jbsr	compute_screen_address_from_XY_B2F6	| [$f5ee: call compute_screen_address_from_XY_B2F6]
	move.b	unknown_CF02,d0                 	| [$f5f1: ld   a,(unknown_CF02)]
	lsr.b	#4,d0                            	| [$f5f4: srl  a] * 4
	jbsr	osd_w_videoram                       	| [$f5fc: ld   (hl),a]

	move.w	d6,d4                        	| [$f5fd: push hl]
	                        	| [$f5fe: pop  iy]
	move.b	unknown_CF02,d0                 	| [$f600: ld   a,(unknown_CF02)]
	and.b	#0x0F,d0                         	| [$f603: and  $0F]
	sub.w	#0x20,d4
	move.w	d6,-(a7)
	move.w	d4,d6
	jbsr	osd_w_videoram                   	| [$f605: ld   (iy-$20),a]
	move.w	(a7)+,d6
	move.w  #0x420,d1                      	| [$f608: ld   bc,$0400]
	add.w	d1,d4                            	| [$f60b: add  iy,bc]
	move.w	d6,-(a7)
	move.w	d4,d6
	move.b	#0x98,d0
	jbsr	osd_w_colorram                   	| [$f60d: ld   (iy+$00),$98]
	sub.w	#0x20,d6
	jbsr	osd_w_colorram                	| [$f611: ld   (iy-$20),$98]
	move.w	(a7)+,d6
	
	             	
	jbsr	read_current_player_controls_BB96 	| [$f615: call read_current_player_controls_BB96]
	movem.w	(sp)+,d1/d2                    	| [$f618: pop  bc]
	and.b	#0x0F,d0                         	| [$f619: and  $0F]
	jeq	l_f620                             	| [$f61b: jp   z,$F620]
	move.b	#0x08,d1                        	| [$f61e: ld   b,$08]
l_f620:
	lea	unknown_CF02,a0                	| [$f620: ld   hl,unknown_CF02]
	move.b	(a0)+,d0                         	| [$f623: ld   a,(hl)]
	                           	| [$f624: inc  hl]
	or.b	(a0),d0                           	| [$f625: or   (hl)]
	jne	l_f62c                             	| [$f626: jp   nz,$F62C]
	st.b	d0                                	| [$f629: ld   a,$FF]
	rts                                    	| [$f62b: ret]
l_f62c:
	subq.b	#1,d1                           	| [...]
	jne	l_f5d2                             	| [$f62c: djnz $F5D2]
	jra	l_f3f3                             	| [$f62e: jp   $F3F3]


l_f631:
	move.b	#0x01,d0                        	| [$f631: ld   a,$01]
	jbsr	play_sound_BBB5                   	| [$f633: call play_sound_BBB5]
	move.b	#0x01,d0                        	| [$f636: ld   a,$01]
	jbsr	suspend_this_task_B65E            	| [$f638: call suspend_this_task_B65E]
	jbsr	l_f2f0                            	| [$f63b: call $F2F0]
	move.w	#0x703C,d1                      	| [$f63e: ld   bc,$703C]
	jbsr	fill_video_and_attribute_memory_B316	| [$f641: call fill_video_and_attribute_memory_B316]
	lea	referee_x_pos_C700,a2          	| [$f644: ld   ix,referee_x_pos_C700]
	move.b	#0x40,d1                        	| [$f648: ld   b,$40]
l_f64a:
	clr.b	(0x00,a2)                        	| [$f64a: ld   (ix+$00),$00]
	addq.w	#4,a2                           	| [$f64e: inc  ix] * 4
	subq.b	#1,d1                           	| [...]
	jne	l_f64a                             	| [$f656: djnz $F64A]
	lea	name_registration_time_str_EDD1(pc),a0                  	| [$f658: ld   hl,name_registration_time_str_EDD1]
	jbsr	display_multicolor_text_B391      	| [$f65b: call display_multicolor_text_B391]
	jbsr	display_hiscores_F1AE             	| [$f65e: call display_hiscores_F1AE]
	lea	unknown_CF08,a2                	| [$f661: ld   ix,unknown_CF08]
	move.b	#0x05,(0x00,a2)                 	| [$f665: ld   (ix+$00),$05]
	move.b	#0x04,(0x01,a2)                 	| [$f669: ld   (ix+$01),$04]
	move.b	#0x3C,(0x02,a2)                 	| [$f66d: ld   (ix+$02),$3C]
	move.b	#0x0D,(0x04,a2)                 	| [$f671: ld   (ix+$04),$0D]
	move.b	#0x0A,(0x05,a2)                 	| [$f675: ld   (ix+$05),$0A]
	move.b	#0x17,(0x06,a2)                 	| [$f679: ld   (ix+$06),$17]
	move.b	#0xFF,(0x07,a2)                 	| [$f67d: ld   (ix+$07),$FF]
	move.b	computer_skill_C910,d0          	| [$f681: ld   a,(computer_skill_C910)]
	addq.b	#1,d0                           	| [$f684: inc  a]
	move.b	d0,(0x03,a2)                    	| [$f685: ld   (ix+$03),a]
	cmp.b	#0x0A,d0                         	| [$f688: cp   $0A]
	jcs	l_f6ac                             	| [$f68a: jp   c,$F6AC]
	move.b	#0x01,(0x02,a2)                 	| [$f68d: ld   (ix+$02),$01]
	clr.b	(0x03,a2)                        	| [$f691: ld   (ix+$03),$00]
	jeq	l_f6ac                             	| [$f695: jp   z,$F6AC]
	move.b	#0x0C,(0x02,a2)                 	| [$f698: ld   (ix+$02),$0C]
	move.b	#0x11,(0x03,a2)                 	| [$f69c: ld   (ix+$03),$11]
	move.b	#0x0A,(0x04,a2)                 	| [$f6a0: ld   (ix+$04),$0A]
	move.b	#0x16,(0x05,a2)                 	| [$f6a4: ld   (ix+$05),$16]
	move.b	#0x19,(0x06,a2)                 	| [$f6a8: ld   (ix+$06),$19]
l_f6ac:
	lea	unknown_CF08,a0                	| [$f6ac: ld   hl,unknown_CF08]
	move.b	#0xA8,d3                        	| [$f6af: ld   d,$A8]
	jbsr	display_text_B357                 	| [$f6b1: call display_text_B357]
	clr.b	d0                               	| [$f6b4: xor  a]
	move.b	d0,unknown_CF03                 	| [$f6b5: ld   (unknown_CF03),a]
	move.b	#0x30,d0                        	| [$f6b8: ld   a,$30]
	move.b	d0,unknown_CF02                 	| [$f6ba: ld   (unknown_CF02),a]
	clr.b	d0                               	| [$f6bd: xor  a]
	move.b	d0,unknown_CF05                 	| [$f6be: ld   (unknown_CF05),a]
	move.b	#0x05,d0                        	| [$f6c1: ld   a,$05]
	move.b	d0,temp_numeric_buffer_CF00     	| [$f6c3: ld   (temp_numeric_buffer_CF00),a]
	move.b	#0x07,d0                        	| [$f6c6: ld   a,$07]
	move.b	d0,unknown_CF01                 	| [$f6c8: ld   (unknown_CF01),a]
	move.b	#0x01,d0                        	| [$f6cb: ld   a,$01]
	jbsr	l_f39f                            	| [$f6cd: call $F39F]
	jbsr	l_f3f3                            	| [$f6d0: call $F3F3]
	jbsr	display_hiscores_F1AE             	| [$f6d3: call display_hiscores_F1AE]
	move.b	#0x30,d0                        	| [$f6d6: ld   a,$30]
	jbsr	suspend_this_task_B65E            	| [$f6d8: call suspend_this_task_B65E]
	move.b	#0x01,d0                        	| [$f6db: ld   a,$01]
	move.b	#0x01,d1                        	| [$f6dd: ld   b,$01]
	jbsr	task_manipulation_B6AE            	| [$f6df: call task_manipulation_B6AE]
	jbsr	task_yield_B5A5                   	| [$f6e2: call task_yield_B5A5]
	
* copy contents of ROM in $C040
init_C040_F6E5:
	move.w	#0x006C,d1                      	| [$f6e5: ld   bc,$006C] 108
	lea	table_F6F1(pc),a0                  	| [$f6e8: ld   hl,table_F6F1]
	lea	unknown_C040,a1                	| [$f6eb: ld   de,unknown_C040]
	jbsr	ldir                              	| [$f6ee: ldir]
	rts                                    	| [$f6f0: ret]
table_F6F1:
	dc.b	0x02,0x00,0x00,0x00,0x00,0x00,0x13,0xb0 | table_F6F1
	dc.b	0x1e,0xb0,0x0c,0xb0,0x14,0xb0,0x22,0xb0 | $f6f9
	dc.b	0x00,0x03,0x01,0x80,0x00,0x00,0x00,0x00 | $f701
	dc.b	0x16,0xb0,0x0a,0xb0,0x1b,0xb0,0x22,0xb0 | $f709
	dc.b	0x3c,0xb0,0x00,0x02,0x01,0x60,0x00,0x00 | $f711
	dc.b	0x00,0x00,0x14,0xb0,0x1e,0xb0,0x17,0xb0 | $f719
	dc.b	0x1d,0xb0,0x0a,0xb0,0x00,0x02,0x01,0x40 | $f721
	dc.b	0x00,0x00,0x00,0x00,0x1b,0xb0,0x0e,0xb0 | $f729
	dc.b	0x12,0xb0,0x14,0xb0,0x18,0xb0,0x00,0x01 | $f731
	dc.b	0x01,0x20,0x00,0x00,0x00,0x00,0x13,0xb0 | $f739
	dc.b	0x18,0xb0,0x17,0xb0,0x22,0xb0,0x3c,0xb0 | $f741
	dc.b	0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00 | $f749
	dc.b	0x2f,0xb0,0x2f,0xb0,0x2f,0xb0,0x2f,0xb0 | $f751
	dc.b	0x2f,0xb0,0x00,0x01 | $f759
	
* < A2: sprite 4-byte data (0xC7xx)
* < D0: movement index in table
* < D5,D6: X,Y
animate_guided_character_F75D:
	
	lea	game_mem+0xF7C4,a3                  	| [$f75d: ld   iy,table_F7C4]
	moveq	#0,d3                      	| [$f761: ld   de,$0000] 0
	move.b	d0,d3                           	| [$f764: ld   e,a]
	add.w	d3,d3                            	| [$f765: sla  e]
												| [$f767: rl   d]
	add.w	d3,a3                            	| [$f769: add  iy,de]
	move.w	(a3),d3                    	| [$f76b: ld   e,(iy+$00)]
	SWAP_WORD	d3
	move.l	d3,a3
	add.l	#game_mem+2,a3
										| [$f76e: ld   d,(iy+$01)]
										| [$f771: push de]
										| [$f772: pop  iy]
										| [$f774: ld   bc,$0002]
										| [$f777: add  iy,bc]
	* get previous_ data
	move.b	(-1,a3),d1                   	| [$f779: ld   b,(iy-$01)]
	move.b	(-2,a3),d2                   	| [$f77c: ld   c,(iy-$02)]
l_f77f:
	movem.w	d1/d2,-(sp)                    	| [$f77f: push bc]
	move.b	d2,d1                           	| [$f780: ld   b,c]

	movem.w	d5/d6,-(sp)                        	| [$f781: push hl]
l_f782:
												| [$f782: ld   a,h] X
	* stores X position in sprite shadow ram
	move.b	d5,(a2)                    	| [$f783: ld   (ix+$00),a]
	move.b	(a3),d0                    	| [$f786: ld   a,(iy+$00)]
	* store character code
	move.b	d0,(1,a2)                    	| [$f789: ld   (ix+$01),a]
	move.b	(2,a3),d0                    	| [$f78c: ld   a,(iy+$02)]
	move.b	d0,(2,a2)                    	| [$f78f: ld   (ix+$02),a]
											| [$f792: ld   a,l]
	* stores Y position in sprite shadow ram
	move.b	d6,(3,a2)                    	| [$f793: ld   (ix+$03),a]
	move.b	(1,a3),d0                    	| [$f796: ld   a,(iy+$01)]
	asl.b	#4,d0                            	| [$f799: sla  a] * 4
	or.b	(2,a2),d0                      	| [$f7a1: or   (ix+$02)]
	move.b	d0,(2,a2)                    	| [$f7a4: ld   (ix+$02),a]
	move.b	#0x10,d0                        	| [$f7a7: ld   a,$10]
	add.b	d5,d0                            	| [$f7a9: add  a,h]
	move.b	d0,d5                           	| [$f7aa: ld   h,a]
	addq.w	#3,a3                           	| [$f7ab: inc  iy] * 3
	* next elementary sprite
	addq.w	#4,a2                           	| [$f7b1: inc  ix] * 4
	subq.b	#1,d1                           	| [...]
	jne	l_f782                             	| [$f7b9: djnz $F782]
	movem.w	(sp)+,d5/d6                        	| [$f7bb: pop  hl]
	move.b	#0x10,d0                        	| [$f7bc: ld   a,$10]
	add.b	d6,d0                            	| [$f7be: add  a,l]
	move.b	d0,d6                           	| [$f7bf: ld   l,a]
	movem.w	(sp)+,d1/d2                    	| [$f7c0: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_f77f                             	| [$f7c1: djnz $F77F]
	rts                                    	| [$f7c3: ret]
table_F7C4:
	.word	0xf822 | $f7c4
	.word	0xf83c | $f7c6
	.word	0xf88c | $f7c8
	.word	0xf89a | $f7ca
	.word	0xf8b6 | $f7cc
	.word	0xf8c4 | $f7ce
	.word	0xf8a8 | $f7d0
	.word	0xf7f8 | $f7d2
	.word	0xf806 | $f7d4
	.word	0xf814 | $f7d6
	.word	0xf857 | $f7d8
	.word	0xf871 | $f7da
	.word	0xffff | $f7dc
	.word	0xffff | $f7de
	.word	0xffff | $f7e0
	.word	0xffff | $f7e2
	.word	0xf8d8 | $f7e4
	.word	0xf8fe | $f7e6
	.word	0xf924 | $f7e8
	.word	0xf950 | $f7ea
	.word	0xf924 | $f7ec
	.word	0xf950 | $f7ee
	.word	0xf97c | $f7f0
	.word	0xf996 | $f7f2
	.word	0xf9b0 | $f7f4
	.word	0xf9ca | $f7f6

draw_something_f9r4:
	lea	table_FA28(pc),a3                  	| [$f9e4: ld   iy,table_FA28]
	clr.w	d3                               	| [$f9e8: ld   d,$00]
	move.b	d0,d3                           	| [$f9ea: ld   e,a]
	add.w	d3,d3                            	| [$f9eb: sla  e]
	add.w	d3,d3                           	| [$f9ed: rl   d]
	add.w	d3,a3                            	| [$f9ef: add  iy,de]
	move.l	(a3),a1                    	| [$f9f1: ld   e,(iy+$00)]
										| [$f9f4: ld   d,(iy+$01)]
	move.l	a1,a3                        	| [$f9f7: push de]
											| [$f9f8: pop  iy]
	move.b	(0x01,a3),d1                    	| [$f9fa: ld   b,(iy+$01)]
	move.b	(0x00,a3),d2                    	| [$f9fd: ld   c,(iy+$00)]
l_fa00:
	addq.w	#2,a3                           	| [$fa00: inc  iy]
l_fa04:
	movem.w	d1/d2,-(sp)                    	| [$fa04: push bc]
	move.b	d2,d1                           	| [$fa05: ld   b,c]
l_fa06:
	movem.w	d1/d2,-(sp)                    	| [$fa06: push bc]

	movem.w	d5/d6,-(sp)                        	| [$fa07: push hl]
	jbsr	compute_screen_address_from_XY_B2F6	| [$fa08: call compute_screen_address_from_XY_B2F6]
	move.b	(a3),d0                    	| [$fa0b: ld   a,(iy+$00)]
	jbsr		osd_w_videoram                         	| [$fa0e: ld   (hl),a]
	                      	| [$fa0f: ld   de,$0400]
	add.w	#0x400,d6                            	| [$fa12: add  hl,de]
	move.b	(0x01,a3),d0                    	| [$fa13: ld   a,(iy+$01)]
	jbsr		osd_w_colorram                         	| [$fa16: ld   (hl),a]
	movem.w	(sp)+,d5/d6                        	| [$fa17: pop  hl]
	movem.w	(sp)+,d1/d2                    	| [$fa18: pop  bc]
	addq.b	#1,d5                           	| [$fa19: inc  h]
	addq.w	#2,a3                           	| [$fa1a: inc  iy] * 2
	subq.b	#1,d1                           	| [...]
	jne	l_fa06                             	| [$fa1e: djnz $FA06]
	move.b	d5,d0                           	| [$fa20: ld   a,h]
	sub.b	d2,d0                            	| [$fa21: sub  c]
	move.b	d0,d5                           	| [$fa22: ld   h,a]
	addq.b	#1,d6                           	| [$fa23: inc  l]
	movem.w	(sp)+,d1/d2                    	| [$fa24: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_fa04                             	| [$fa25: djnz $FA04]
	rts                                    	| [$fa27: ret]
table_FA28:
	.long	0xfab2-0xfa68+l_fa68                           	|  $fa28
	.long	0xfac6-0xfa68+l_fa68                           	|  $fa2a
	.long	0xfb0a-0xfa68+l_fa68                           	|  $fa2c
	.long	0xfbec-0xfa68+l_fa68                           	|  $fa2e
	.long	0xfada-0xfa68+l_fa68                           	|  $fa30 INSERT COIN text
	.long	0xfaf2-0xfa68+l_fa68                           	|  $fa32
	.long	0xfc2e-0xfa68+l_fa68                           	|  $fa34
	.long	0xfc42-0xfa68+l_fa68                           	|  $fa36
	.long	0xfc56-0xfa68+l_fa68                           	|  $fa38
	.long	0xfc6a-0xfa68+l_fa68                           	|  $fa3a
	.long	-1                           	|  $fa3c
	.long	-1                           	|  $fa3e
	.long	-1                           	|  $fa40
	.long	-1                           	|  $fa42
	.long	-1                           	|  $fa44
	.long	-1                           	|  $fa46
	.long	l_fa68                           	|  $fa48
	.long	l_fa68                           	|  $fa4a
	.long	l_fa68                           	|  $fa4c
	.long	l_fa68                           	|  $fa4e
	.long	l_fa68                           	|  $fa50
	.long	l_fa68                           	|  $fa52
	.long	l_fa68                           	|  $fa54
	.long	l_fa68                           	|  $fa56
	.long	l_fa68                           	|  $fa58
	.long	l_fa68                           	|  $fa5a
	.long	l_fa68                           	|  $fa5c
	.long	l_fa68                           	|  $fa5e
	.long	l_fa68                           	|  $fa60
	.long	l_fa68                           	|  $fa62
	.long	l_fa68                           	|  $fa64
	.long	l_fa68                           	|  $fa66
l_fa68:
	dc.b	0x09,0x04,0xa1,0x3a,0xa2,0x3a,0xa2,0x3a | $fa68
	dc.b	0xa2,0x3a,0xa2,0x3a,0xa2,0x3a,0xa2,0x3a | $fa70
	dc.b	0xa2,0x3a,0xa4,0x3a,0x3f,0x38,0x3f,0x38 | $fa78
	dc.b	0x3f,0x38,0x3f,0x38,0x3f,0x38,0x3f,0x38 | $fa80
	dc.b	0x3f,0x38,0x3f,0x38,0xa3,0x3a,0x3f,0x38 | $fa88
	dc.b	0x3f,0x38,0x3f,0x38,0x3f,0x38,0x3f,0x38 | $fa90
	dc.b	0x3f,0x38,0x3f,0x38,0x3f,0x38,0xa3,0x3a | $fa98
	dc.b	0x3f,0x38,0x3f,0x38,0x3f,0x38,0x3f,0x38 | $faa0
	dc.b	0x3f,0x38,0x3f,0x38,0x3f,0x38,0x3f,0x38 | $faa8
	dc.b	0xa5,0x3a,0x03,0x03,0x5c,0x42,0x5e,0x5a | $fab0
	dc.b	0x60,0x62,0x5d,0x42,0x5f,0x5a,0x61,0x62 | $fab8
	dc.b	0x60,0x62,0x5c,0x42,0x62,0x5a,0x03,0x03 | $fac0
	dc.b	0x5e,0x5a,0x62,0x5a,0x60,0x62,0x5f,0x5a | $fac8
	dc.b	0x62,0x5a,0x61,0x62,0x60,0x62,0x5e,0x5a | $fad0
	dc.b	0x5c,0x42,0x0b,0x01,0x12,0x88,0x17,0x88 | $fad8
	dc.b	0x1c,0x88,0x0e,0x88,0x1b,0x88,0x1d,0x88 | $fae0
	dc.b	0x3c,0x88,0x0c,0x88,0x18,0x88,0x12,0x88 | $fae8
	dc.b	0x17,0x88,0x0b,0x01,0x3c,0x88,0x3c,0x88 | $faf0
	dc.b	0x3c,0x88,0x3c,0x88,0x3c,0x88,0x3c,0x88 | $faf8
	dc.b	0x3c,0x88,0x3c,0x88,0x3c,0x88,0x3c,0x88 | $fb00
	dc.b	0x3c,0x88,0x1c,0x04,0x5c,0x42,0x5e,0x5a | $fb08
	dc.b	0x60,0x62,0x62,0x42,0x5d,0x62,0x5f,0xb2 | $fb10
	dc.b	0x61,0x42,0x61,0x62,0x5c,0x62,0x5f,0x62 | $fb18
	dc.b	0x5e,0x42,0x61,0x42,0x5f,0x42,0x63,0x42 | $fb20
	dc.b	0x62,0x5a,0x5d,0x62,0x63,0xb2,0x60,0x42 | $fb28
	dc.b	0x63,0x62,0x5d,0x62,0x5f,0xb2,0x5c,0x5a | $fb30
	dc.b	0x60,0x42,0x60,0x42,0x5e,0x62,0x60,0x42 | $fb38
	dc.b	0x5f,0x62,0x5e,0x62,0x5c,0x62,0x63,0x42 | $fb40
	dc.b	0x61,0x5a,0x5d,0xb2,0x5e,0xb2,0x5e,0x62 | $fb48
	dc.b	0x5e,0xb2,0x5e,0x62,0x5e,0x42,0x5e,0x62 | $fb50
	dc.b	0x5e,0x5a,0x5e,0x42,0x60,0x42,0x60,0x5a | $fb58
	dc.b	0x62,0x62,0x5d,0x42,0x62,0x62,0x62,0xb2 | $fb60
	dc.b	0x5d,0x62,0x5f,0x62,0x5d,0xb2,0x5d,0x62 | $fb68
	dc.b	0x5d,0x42,0x5d,0x62,0x5d,0x5a,0x5f,0x42 | $fb70
	dc.b	0x5d,0x62,0x5d,0x62,0x5c,0x42,0x5e,0x62 | $fb78
	dc.b	0x5e,0x42,0x5c,0x62,0x5e,0x62,0x60,0x62 | $fb80
	dc.b	0x5e,0x42,0x5c,0xb2,0x60,0x5a,0x62,0x42 | $fb88
	dc.b	0x62,0x42,0x5c,0x62,0x5c,0x42,0x5c,0x42 | $fb90
	dc.b	0x5c,0x5a,0x60,0x42,0x62,0xb2,0x62,0x62 | $fb98
	dc.b	0x62,0x42,0x5e,0x42,0x60,0x42,0x60,0x62 | $fba0
	dc.b	0x60,0x42,0x5c,0xb2,0x63,0xb2,0x61,0x62 | $fba8
	dc.b	0x5f,0x42,0x5f,0x62,0x5c,0x42,0x5e,0x5a | $fbb0
	dc.b	0x60,0x62,0x62,0x42,0x5d,0x62,0x5f,0xb2 | $fbb8
	dc.b	0x61,0x42,0x61,0x62,0x5c,0x62,0x5f,0x62 | $fbc0
	dc.b	0x5e,0x42,0x61,0x42,0x5f,0x42,0x63,0x42 | $fbc8
	dc.b	0x62,0x5a,0x5d,0x62,0x63,0xb2,0x60,0x42 | $fbd0
	dc.b	0x63,0x62,0x5d,0x62,0x5f,0xb2,0x5c,0x5a | $fbd8
	dc.b	0x60,0x42,0x60,0x42,0x5e,0x62,0x60,0x42 | $fbe0
	dc.b	0x5f,0x62,0x5e,0x62,0x20,0x01,0x3c,0x48 | $fbe8
	dc.b	0x3c,0x48,0x3c,0x48,0x3c,0x48,0x3c,0x48 | $fbf0
	dc.b	0x3c,0x48,0x3c,0x48,0x3c,0x48,0x3c,0x48 | $fbf8
	dc.b	0x3c,0x48,0x3c,0x48,0x3c,0x48,0x3c,0x48 | $fc00
	dc.b	0x3c,0x48,0x3c,0x48,0x3c,0x48,0x3c,0x48 | $fc08
	dc.b	0x3c,0x48,0x3c,0x48,0x3c,0x48,0x3c,0x48 | $fc10
	dc.b	0x3c,0x48,0x3c,0x48,0x3c,0x48,0x3c,0x48 | $fc18
	dc.b	0x3c,0x48,0x3c,0x48,0x3c,0x48,0x3c,0x48 | $fc20
	dc.b	0x3c,0x48,0x3c,0x48,0x3c,0x48,0x03,0x03 | $fc28
	dc.b	0x5c,0x42,0x5e,0x5a,0x60,0x42,0x5d,0x62 | $fc30
	dc.b	0x5f,0xb2,0x61,0x42,0x5c,0x62,0x5f,0x62 | $fc38
	dc.b	0x5e,0x42,0x03,0x03,0x5f,0x42,0x60,0x5a | $fc40
	dc.b	0x62,0x42,0x63,0x62,0x60,0xb2,0x5e,0x42 | $fc48
	dc.b	0x62,0x62,0x62,0x62,0x5d,0x42,0x03,0x03 | $fc50
	dc.b	0x63,0x42,0x62,0x5a,0x5f,0x42,0x60,0x62 | $fc58
	dc.b	0x60,0xb2,0x60,0x42,0x5d,0x62,0x62,0x62 | $fc60
	dc.b	0x5d,0x42,0x03,0x03,0x5e,0x42,0x5e,0x5a | $fc68
	dc.b	0x5f,0x42,0x62,0x62,0x60,0xb2,0x5d,0x42 | $fc70
	dc.b	0x60,0x62,0x5d,0x62,0x60,0x42 | $fc78
	.align	2

display_players_rank_B0B4:
display_players_rank_FD44:
	move.b	#0x04,d4                        	| [$fd44: ld   e,$04]
	move.b	#0x90,d3                        	| [$fd46: ld   d,$90]
	lea	computer_skill_C910,a0         	| [$fd48: ld   hl,computer_skill_C910]
	move.b	unknown_C032,d0                 	| [$fd4b: ld   a,(unknown_C032)]
	and.b	#0x03,d0                         	| [$fd4e: and  $03]
	cmp.b	#0x03,d0                         	| [$fd50: cp   $03]
	jne	l_fd66                             	| [$fd52: jp   nz,$FD66]
	move.b	#0x02,d4                        	| [$fd55: ld   e,$02]
	move.b	#0x98,d3                        	| [$fd57: ld   d,$98]
	lea	map_index_C900,a0              	| [$fd59: ld   hl,map_index_C900]
	jbsr	display_player_rank_FD6A          	| [$fd5c: call display_player_rank_FD6A]
	move.b	#0x06,d4                        	| [$fd5f: ld   e,$06]
	move.b	#0x90,d3                        	| [$fd61: ld   d,$90]
	lea	unknown_C908,a0                	| [$fd63: ld   hl,unknown_C908]
l_fd66:
	jbsr	display_player_rank_FD6A          	| [$fd66: call display_player_rank_FD6A]
	rts                                    	| [$fd69: ret]

display_player_rank_FD6A:
	movem.w	d3/d4,-(sp)                    	| [$fd6a: push de]
	move.l	a1,-(sp)                        	| [$fd6a: push de]

	move.l	a0,-(sp)                        	| [$fd6b: push hl]
	addq.b	#4,d4                           	| [$fd6c: inc  e] * 4
	lea	unknown_CF08,a2                	| [$fd70: ld   ix,unknown_CF08]
	move.b	d4,(0x00,a2)                    	| [$fd74: ld   (ix+$00),e]
	move.b	#0x01,(0x01,a2)                 	| [$fd77: ld   (ix+$01),$01]
	move.l	(sp)+,a0                        	| [$fd7b: pop  hl]
* check level number, to display 1ST => 10G => CMP
* only called at start of a round
	move.b	(a0),d0                         	| [$fd7c: ld   a,(hl)]
	cmp.b	#0x0A,d0                         	| [$fd7d: cp   $0A]
	jcs	l_fd84                             	| [$fd7f: jp   c,$FD84] < 10 ? skip
* max to 10
	move.b	#0x0A,d0                        	| [$fd82: ld   a,$0A]
l_fd84:
	move.b	d0,d2                           	| [$fd84: ld   c,a]
	add.b	d0,d0                            	| [$fd85: add  a,a]
	add.b	d2,d0                            	| [$fd86: add  a,c]
	clr.w	d1                               	| [$fd88: ld   b,$00]
	move.b	d0,d1                           	| [$fd87: ld   c,a]
	lea	position_table_FDA3(pc),a0         	| [$fd8a: ld   hl,position_table_FDA3]
	add.w	d1,a0                            	| [$fd8d: add  hl,bc]
	lea	unknown_CF0A,a1                	| [$fd8e: ld   de,unknown_CF0A]
	jbsr	ldi                               	| [$fd91: ldi]
	jbsr	ldi                               	| [$fd93: ldi]
	jbsr	ldi                               	| [$fd95: ldi]
	move.b	#0xFF,(0x05,a2)                 	| [$fd97: ld   (ix+$05),$FF]
	lea	unknown_CF08,a0                	| [$fd9b: ld   hl,unknown_CF08]
	move.l	(sp)+,a1                        	| [$fd9e: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$fd9e: pop  de]
	jbsr	display_text_B357                 	| [$fd9f: call display_text_B357]
	rts                                    	| [$fda2: ret]
* 1ST, 2ND ...
position_table_FDA3:
	dc.b	0x01,0x1c,0x1d,0x02,0x17,0x0d,0x03,0x1b | position_table_FDA3
	dc.b	0x0d,0x04,0x1d,0x11,0x05,0x1d,0x11,0x06 | $fdab
	dc.b	0x1d,0x11,0x07,0x1d,0x11,0x08,0x1d,0x11 | $fdb3
	dc.b	0x09,0x1d,0x11,0x01,0x00,0x10,0x0c,0x16 | $fdbb
	dc.b	0x19 | $fdc3
	.align	2
	
clear_score_text_FDC4:
	lea	space_text_FDE1(pc),a0             	| [$fdc4: ld   hl,space_text_FDE1]
	jra	l_fddd                             	| [$fdc7: jp   $FDDD]

	move.b	background_and_state_bits_C911,d0	| [$fdca: ld   a,(background_and_state_bits_C911)]
	btst.b	#7,d0                           	| [$fdcd: bit  7,a]
	jne	l_fddd                             	| [$fdcf: jp   nz,$FDDD]
	lea	score_00_text_FE14(pc),a0          	| [$fdd2: ld   hl,score_00_text_FE14]
	cmp.b	#0x08,d0                         	| [$fdd5: cp   $08]
	jeq	l_fddd                             	| [$fdd7: jp   z,$FDDD]
	lea	score_00_text_FE45(pc),a0          	| [$fdda: ld   hl,score_00_text_FE45]
l_fddd:
	jbsr	display_multicolor_text_B391      	| [$fddd: call display_multicolor_text_B391]
	rts                                    	| [$fde0: ret]
space_text_FDE1:
	dc.b	0x06,0x05,0x9e,0x92,0x9f,0x92,0xbb,0x92 | space_text_FDE1
	dc.b	0xbc,0x92,0xbd,0x92,0xbe,0x92,0xbf,0x92 | $fde9
	dc.b	0xfe,0x06,0x06,0xc0,0x92,0x8d,0x92,0x8e | $fdf1
	dc.b	0x92,0x8f,0x92,0x90,0x92,0x91,0x92,0x92 | $fdf9
	dc.b	0x92,0xfe,0x06,0x07,0x93,0x92,0x94,0x92 | $fe01
	dc.b	0x95,0x92,0x96,0x92,0x97,0x92,0x98,0x92 | $fe09
	dc.b	0x99,0x92,0xff | $fe11
score_00_text_FE14:
	dc.b	0x02,0x05,0x7a,0xba,0x7b,0xba,0x7c,0xba | score_00_text_FE14
	dc.b	0x7d,0xba,0x00,0x00,0x7e,0xba,0x7f,0xba | $fe1c
	dc.b	0xfe,0x02,0x06,0x80,0xb2,0x81,0xb2,0x82 | $fe24
	dc.b	0xb2,0x83,0xb2,0x84,0xb2,0x85,0xb2,0x86 | $fe2c
	dc.b	0xb2,0xfe,0x02,0x07,0x87,0xb2,0x88,0xb2 | $fe34
	dc.b	0x89,0xb2,0x8a,0xb2,0x8b,0xb2,0x8c,0xb2 | $fe3c
	dc.b	0xff | $fe44
score_00_text_FE45:
	dc.b	0x06,0x05,0x7a,0xba,0x7b,0xba,0x7c,0xba | score_00_text_FE45
	dc.b	0x7d,0xba,0x00,0x00,0x7e,0xba,0x7f,0xba | $fe4d
	dc.b	0xfe,0x06,0x06,0x80,0xb2,0x81,0xb2,0x82 | $fe55
	dc.b	0xb2,0x83,0xb2,0x84,0xb2,0x85,0xb2,0x86 | $fe5d
	dc.b	0xb2,0xfe,0x06,0x07,0x87,0xb2,0x88,0xb2 | $fe65
	dc.b	0x89,0xb2,0x8a,0xb2,0x8b,0xb2,0x8c,0xb2 | $fe6d
	dc.b	0xff | $fe75
copyright_data_east_text_FE76:
	dc.b	0x07,0x1d,0x30,0x3c,0x0c,0x18,0x19,0x22 | copyright_data_east_text_FE76
	dc.b	0x1b,0x12,0x10,0x11,0x1d,0x3c,0x01,0x09 | $fe7e
	dc.b	0x08,0x04,0xfe,0x07,0x1f,0x0d,0x0a,0x1d | $fe86
	dc.b	0x0a,0x3c,0x0e,0x0a,0x1c,0x1d,0x3c,0x1e | $fe8e
	dc.b	0x1c,0x0a,0x31,0x12,0x17,0x0c,0x25,0xff | $fe96
	dc.b	0x00 | $fe9e
	rts                                    	| [$fe9f: ret]
	
* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
ldir:
    subq.w    #1,d1
0:
    move.b    (a0)+,(a1)+
    dbf        d1,0b
    clr.w    d1
    rts

* < A0: source (HL)
* < A1: destination (DE)
* < D1: decremented (16 bit)
ldi:

    move.b    (a0)+,(a1)+
    subq.w    #1,d1
    rts
	
* Repeats the instruction LDD (Does a LD (DE),(HL) and decrements
* each of DE, HL, and BC) until BC=0.
* Note that if BC=0 before the start of the routine, it will try loop around until BC=0 again.

lddr:
    subq.w    #1,d1
0:
    move.b    (a0),(a1)
	subq	#1,a0
	subq	#1,a1
    dbf        d1,0b
    clr.w    d1
    rts
