
*
* 68k transcode by JOTD in 2023 using (https://github.com/jotd666/amiga68ktools)
  
* register conventions (imposed by z80268k mostly) are as follows:
*
* A: D0
* B: D1
* C: D2
* BC: manual
* D: D3
* E: D4
* DE: A1 or D3
* H: D5
* L: D6
* HL: A0 or D6 (video addresses)
* carry: manual, using D7 (push/pop af has no portable equivalent as SR is privileged on 68020+)
*
*
* Karate Champ VS 2. Reverse-engineering attempt by JOTD, focusing on 2 points:
* - CPU A.I.
* - animations
*
* CF02: time when entering highscore (BCD)
*
* current level info is propagated at 3 locations which mean different things:
*
* C0DC: number (1ST, 2ND...)
* C900: map index (picture, girl)
* C910: skill level (see below)
* background_and_state_bits_C911: background+state bits

* C028: attack flags (red player/red cpu), can be 08,09,0A TODO figure out when????

* nb_credits_minus_one_C024: 0 when no credit, then if coin is inserted, set to 1, then
* immediately decreased, while showing "press 1P button" screen

* C910: skill level / speed of computer
* 0: slow => 12: super fast. $10 seems a threshold
* aggressivity is also increased
* increasing skill level dynamically works: computer goes super ninja)
*
* C556-59: 4 bytes looks like counters. When move is completed all 4 values are 8

* C02D
* players_type_human_or_cpu_flags_C02D: 05 1 player vs CPU, 0F 2 players. Changing dynamically works too!

* note: there are 4 structures C200, C220, C240, C260... there are copies of data for instance C229/C22A are copied
* to C269/C26A. Not sure of everything that's written below in terms of addresses...
* C200/C240: player 1 structures
* C220/C260: player 1 structures


* C220: another structure, A.I. related, probably sharing both parties characteristics
* TODO: figure out more values from that structure, specially:
* +07/+08: frame id/pointer on frame structure of own player, used as input of check_hl_in_ix_list_B009 by A.I
*  so the CPU can recognize the moves
* +09 white player x ($20 min $DF max)
* +0A: current move index (at least during practice)
* +0B/+0C: frame id, like 07/08 for opponent player. Note: bit 8 of C22C set: opponent facing right, maybe
*     only important for frame display
* +0D opponent player x
* +0E oppnent move index
* +0F ($C20F): player logical distance, often addressed as  bit  7,(iy+$0f)
* distance seems to be computed from the backs of the players
* bit 7 set => means current player is turning his back to opponent)
* then
* 0: back 2 back distance > 0x70
* 1-4: opponent faces current player (which can turn its back to opponent, see bit 7)
* 1: back 2 back distance > 0x58
* 2: back 2 back distance > 0x40
* 3: back 2 back distance > 0x28
* 4: back 2 back distance > 0x10
* 5-7: opponent turns back to current player (which can turn its back to opponent, see bit 7)
* 5: back 2 back distance > 0x60
* 6: back 2 back distance > 0x30
* 7: back 2 back distance > 0x18
* 8: smaller distance (<= 0x10/0x18) (at least one player must turn his back)
*
* there's a $10 (8 ?) offset depending on facing

* C240: player 1 structure
* +2: 0 when not animated, else number of ticks to stay in the current animation frame
* +7,8: animation related. Bit 7 of C248: facing direction
* C249 (+$9): player 1 x coord. Ranges $20 (32 top left) to $DF (223 right), starts at 0x30
* C24A (+$A): player 1 y coord. $E0 when fighting. Practice:
* C24B (+$B): player 1 current move: codes below
* C24C (+$C): rough distance 0-4
* 0: far
* 1: intermediate, facing other player  (regardless of other player facing direction)
* 2: very close, facing other player   ("")
* 3: intermediate, turning back to other player  ("")
* 4: very close, turning back to other player    ("")
*
*
* C260: player 2 structure
* C269 (+$9): x coord. starts at 0xD0
* C26A (+$A): y coord. $E0 when fighting. Practice: $90
* C26B: player 2 current move (see codes below). Also set during "practice"
* C26C: player 2 rough distance to player 1 0 (same as C24C for second player)
*
* for instance if white is on the left (facing right) and red is on the right, close (facing right)
* the value of
* C24C is: 02
* C26C is: 04
*
* changing C249 immediately reflects on player 1 (white) moving x wise
* changing C269 immediately reflects on player 2 (red) moving x wise
* players can't be exactly at the same position. At least $10 distance is required
* (setting values too close to each other results in game correcting them, same for min/max)
*

* the codes don't match exact moves, but rather the attack type
* there is often only one attack type (back kick) but sometimes there are
* several: example with front kick and weak reverse punch, that only differ
* by attack distance
*
* values marked with "**" trigger the relevant moves only when injecting
* them by setting a at AB56. Injecting 07 doesn't make CPU turn around, but
* does something else.
*
* also attacks can be triggered in other places

* 0x00: not moving, guard
* 0x01: moving back
* 0x02: moving forward
* 0x03: pre-jump (jump to avoid low blow?)
* 0x04: crouch
* 0x05: back kick
* 0x06: ** back kick
* 0x07: turn around (only CPU can do that without using an aborted back jump/round kick)
* 0x08: jumping back kick
* 0x09: foot sweep (back)
* 0x0A: front kick (can also be small reverse punch at short range apparently)
* 0x0B: back round kick
* 0x0C: lunge punch (medium 200-400 forward+forward)
* 0x0D: jumping side kick
* 0x0E: ** foot sweep (front)
* 0x0F: round kick
* 0x10: lunge punch (high 300-600 rear+up)
* 0x11: lunge punch (high 500-1000 forward+up)
* 0x12: rear sommersault
* 0x13: reverse punch (crouch 400-800)
* 0x14: low kick
* 0x15: ** low kick
* 0x16: ** low kick
* 0x17: front sommersault
* 0x18: foot sweep (front)

* difficulty level only has an effect before "CMP" level number 16
* in CMP (champ) level and stage 16 (brige CMP if I'm not mistaken),
* difficulty dip switches are ignored, game is just super fast
* and super hard
*
*A.I: how computer maintains its moves ?
*
* - attack moves: once the attack went through (and failed), depending
*   on the skill level, computer waits a while with the move frozen
*   (including jumping moves, which looks a bit weird). In champion level
*   from level 16, there is no wait at all.
* - blocking moves: maintaned as long as the opponent is performing
*   an attack move with a matching attack height

* I should get more info about player_2_attack_flags_C028 what does the values mean (09,0A...)
* probably related to animation frames not to A.I. so less interesting

* VS Version Info:
* ---------------
* Memory Map:
* Main CPU
* 0000-bfff ROM (encrypted)
* c000-cfff RAM
* d000-d3ff char videoram
* d400-d7ff color videoram
* d800-d8ff sprites
* e000-ffff ROM (encrypted)

* IO Ports:
* Main CPU
* INPUT  00 = Player 1 Controls - ( ACTIVE LOW )
* INPUT  40 = Player 2 Controls - ( ACTIVE LOW )
* INPUT  80 = Coins and Start Buttons - ( ACTIVE LOW )
* INPUT  C0 = Dip Switches - ( ACTIVE LOW )
* OUTPUT 00 = Screen Flip
* OUTPUT 01 = CPU Control
*                 bit 0 = external nmi enable
* OUTPUT 02 = Sound Reset
* OUTPUT 40 = Sound latch write
*
* Sound CPU
* INPUT  01 = Sound latch read
* OUTPUT 00 = AY8910 #1 data write
* OUTPUT 01 = AY8910 #1 control write
* OUTPUT 02 = AY8910 #2 data write
* OUTPUT 03 = AY8910 #2 control write
* OUTPUT 04 = MSM5205 write
* OUTPUT 05 = CPU Control
*                 bit 0 = MSM5205 trigger
*                 bit 1 = external nmi enable


    .global karate_champ_irq
    .global karate_champ_reset

	.ifdef	__amiga__
	.include "karate_champ_ram.68k"
	.align	2
	.endif

karate_champ_irq:
	bra		on_periodic_interrupt_B72F
	
karate_champ_reset:
	* default: 1 update/irq call
	* we need 60 updates / second so on amiga PAL
	* we need to set this variable to 2 once out of 5 calls
	move.b	#1,vb_ticks_count
	lea		stack_top_CF00,sp
l_0000:
	jra	startup_B045                       	| [jp   startup_B045]
	
* routines called by the main scheduler at B502
task_address_table_0020:
	.long	task_5250                           	|  $0020
	.long	task_53d2                           	|  $0022
	.long	task_544f                           	|  $0024
	.long	task_6491                           	|  $0026
	.long	task_6529                           	|  $0028
	.long	task_7c5d                           	|  $002a
	.long	task_6f89                           	|  $002c
	.long	task_6622                           	|  $002e
	.long	task_755b                           	|  $0030
	.long	task_7657                           	|  $0032
	.long	task_3a9c                           	|  $0034
	.long	task_3a9c                           	|  $0036
	.long	task_illegal
	.long	task_illegal
	.long	task_illegal
	.long	task_6d5e                           	|  $003e
	.long	task_47d6                           	|  $0040
	.long	task_47d6                           	|  $0042
	.long	task_47d6                           	|  $0044
	.long	task_47d6                           	|  $0046
	.long	task_50f2                           	|  $0048
	.long	task_b099                           	|  $004a
	.long	task_b09c                           	|  $004c
	.long	task_b09f                           	|  $004e

* stubs
task_illegal:
	illegal
	nop
	
l_5974:
	trap	#2
l_b0b4:
	trap	#3
l_5925:
	trap	#4
l_78ea:	
	trap	#5
l_b078:	
	trap	#6
l_b07b:	
	trap	#7
l_5f2a:
	trap	#8
l_5bf4:
	trap	#9
l_b08d:
	trap	#10
l_5836:
	trap	#12
l_58ff:
	trap	#11
l_56f8:
	trap	#14
l_5f09:
	trap	#15
l_58c7:
	trap	#1
l_e000:
	trap	#0

		
.macro		taskstub	offset
task_\offset:
	move.w	#0x\offset,d0
	trap	#0
	.endm
	

	taskstub	6f89   
	taskstub	6622   
  
	taskstub	7657   
	taskstub	3a9c
	taskstub	6d5e   
	taskstub	47d6   
	taskstub	50f2   
	taskstub	b099   
	taskstub	b09c   
	taskstub	b09f
	

* used for random seed or whatever
table_4000:
	dc.b	0x0a,0x40,0xf7,0x6b,0x08,0xfe,0xd7,0xe7 | $4000
	dc.b	0x44,0xcf,0xd7,0x77,0x2c,0x02,0xf7,0xdd | $4008
	dc.b	0x09,0xd6,0x77,0x2c,0x03,0xf7,0xdd,0x0a | $4010
	dc.b	0x63,0x00,0x00,0xe2,0x1a,0x5b,0x1a,0x00 | $4018
	dc.b	0x00,0xe2,0x1a,0x9a,0x1a,0x5b,0x1a,0x9a | $4020
	dc.b	0x1a,0x5b,0x1a,0x00,0x00,0x00,0x00,0x5b | $4028
	dc.b	0x1a,0x5b,0x1a,0xe2,0x1a,0x00,0x00,0x00 | $4030
	dc.b	0x02,0x07,0x00,0x0d,0x02,0x08,0x00,0x1a | $4038
	dc.b	0x02,0xfc,0x00,0x5b,0x02,0x00,0x00,0x27 | $4040
	dc.b	0x02,0x04,0x00,0xf2,0x04,0xfd,0x00,0x1e | $4048
	dc.b	0x03,0x02,0x00,0x34,0x02,0xf8,0x00,0xff | $4050
	dc.b	0xff,0x00,0x02,0x06,0x00,0x0d,0x02,0x07 | $4058
	dc.b	0x00,0x1a,0x02,0xfa,0x00,0x5b,0x02,0xff | $4060
	dc.b	0x00,0x27,0x02,0x03,0x00,0xf2,0x04,0xfc | $4068
	dc.b	0x00,0x1e,0x03,0x01,0x00,0x34,0x02,0xf7 | $4070
	dc.b	0x00,0xff,0xff,0x00,0x02,0x07,0x00,0x0d | $4078
	dc.b	0x02,0x08,0x00,0x1a,0x02,0xfc,0x00,0x5b | $4080
	dc.b	0x02,0x00,0x00,0x27,0x02,0x04,0x00,0xf2 | $4088
	dc.b	0x04,0xfe,0x00,0x1e,0x03,0x02,0x00,0x34 | $4090
	dc.b	0x02,0xf9,0x00,0xff,0xff,0xf7,0xce,0x07 | $4098
	dc.b	0xf7,0xcc,0x08,0x6b,0xb6,0x11,0x04,0x00 | $40a0
	dc.b	0x13,0xde,0xec,0x7f,0x6a,0xb2,0x40,0x67 | $40a8
	dc.b	0x72,0xb0,0x63,0x9a,0x11,0xc9,0x6b,0xbf | $40b0
	dc.b	0xfe,0x50,0x6a,0xdc,0x40,0xfe,0x10,0x7a | $40b8
	dc.b	0xdc,0x40,0x77,0x81,0x1c,0xc7,0xec,0xf0 | $40c0
	dc.b	0xfe,0x10,0x6a,0x46,0x41,0x9a,0x28,0xc0 | $40c8
	dc.b	0xfe,0x0b,0x6a,0x46,0x41,0x77,0x81,0x4c | $40d0
	dc.b	0xc7,0x69,0x46,0x41,0x77,0x81,0x4c,0xc7 | $40d8
	dc.b	0x9a,0x28,0xc0,0xfe,0x0b,0x6a,0x46,0x41 | $40e0
	dc.b	0x77,0x81,0x1c,0xc7,0xf7,0xe5,0xf7,0x81 | $40e8
	dc.b	0x60,0xc2,0xf7,0xce,0x07,0xf7,0xcc,0x08 | $40f0
	dc.b	0x6b,0xb6,0x11,0x08,0x00,0x13,0xde,0x6b | $40f8


table_4019:
	dc.b	0x00,0x00,0xe2,0x1a,0x5b,0x1a,0x00,0x00 | table_4019
	dc.b	0xe2,0x1a,0x9a,0x1a,0x5b,0x1a,0x9a,0x1a | $4021
	dc.b	0x5b,0x1a,0x00,0x00,0x00,0x00,0x5b,0x1a | $4029
	dc.b	0x5b,0x1a,0xe2,0x1a,0x00,0x00,0x00,0x02 | $4031
	dc.b	0x07,0x00,0x0d,0x02,0x08,0x00,0x1a,0x02 | $4039
	dc.b	0xfc,0x00,0x5b,0x02,0x00,0x00,0x27,0x02 | $4041
	dc.b	0x04,0x00,0xf2,0x04,0xfd,0x00,0x1e,0x03 | $4049
	dc.b	0x02,0x00,0x34,0x02,0xf8,0x00,0xff,0xff | $4051
	dc.b	0x00,0x02,0x06,0x00,0x0d,0x02,0x07,0x00 | $4059
	dc.b	0x1a,0x02,0xfa,0x00,0x5b,0x02,0xff,0x00 | $4061
	dc.b	0x27,0x02,0x03,0x00,0xf2,0x04,0xfc,0x00 | $4069
	dc.b	0x1e,0x03,0x01,0x00,0x34,0x02,0xf7,0x00 | $4071
	dc.b	0xff,0xff,0x00,0x02,0x07,0x00,0x0d,0x02 | $4079
	dc.b	0x08,0x00,0x1a,0x02,0xfc,0x00,0x5b,0x02 | $4081
	dc.b	0x00,0x00,0x27,0x02,0x04,0x00,0xf2,0x04 | $4089
	dc.b	0xfe,0x00,0x1e,0x03,0x02,0x00,0x34,0x02 | $4091
	dc.b	0xf9,0x00,0xff,0xff | $4099
	.align	2
	
l_4d84:
	jbsr	load_iy_with_player_structure_B04B	| [$4d84: call load_iy_with_player_structure_B04B]
	jbsr	clear_player_structure_partial_b012        	| [$4d87: call $B012]

	move.l	a3,-(sp)                        	| [$4d8a: push iy]
	move.b	#0x08,d0                        	| [$4d8c: ld   a,$08]
	lea	players_type_human_or_cpu_flags_C02D(pc),a0	| [$4d8e: ld   hl,players_type_human_or_cpu_flags_C02D]
	btst.b	#2,(a0)                         	| [$4d91: bit  2,(hl)]
	jne	l_4d97                             	| [$4d93: jp   nz,$4D97]
	addq.b	#1,d0                           	| [$4d96: inc  a]
l_4d97:
	jbsr	schedule_task_to_start_B057       	| [$4d97: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$4d9a: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$4d9b: call nz,display_error_text_B075]
0:
	move.b	#0x0A,d0                        	| [$4d9e: ld   a,$0A]
	lea	players_type_human_or_cpu_flags_C02D(pc),a0	| [$4da0: ld   hl,players_type_human_or_cpu_flags_C02D]
	btst.b	#2,(a0)                         	| [$4da3: bit  2,(hl)]
	jne	l_4da9                             	| [$4da5: jp   nz,$4DA9]
	addq.b	#1,d0                           	| [$4da8: inc  a]
l_4da9:
	jbsr	schedule_task_to_start_B057       	| [$4da9: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$4dac: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$4dad: call nz,display_error_text_B075]
0:
	move.b	#0x04,d0                        	| [$4db0: ld   a,$04]
	jbsr	schedule_task_to_start_B057       	| [$4db2: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$4db5: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$4db6: call nz,display_error_text_B075]
0:
	move.b	#0x14,d0                        	| [$4db9: ld   a,$14]
	jbsr	schedule_task_to_start_B057       	| [$4dbb: call schedule_task_to_start_B057]
l_4dbe:
	tst.b	d0                               	| [$4dbe: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$4dbf: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$4dc2: pop  iy]

	move.l	a3,-(sp)                        	| [$4dc4: push iy]
	clr.b	d0                               	| [$4dc6: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$4dc8: call suspend_this_task_B05A]
	cmp.b	#0x10,d0                         	| [$4dcb: cp   $10]
	jeq	l_4de0                             	| [$4dcd: jp   z,$4DE0]
	cmp.b	#0x01,d0                         	| [$4dd0: cp   $01]
	beq	0f
	jbsr	display_error_text_B075           	| [$4dd2: call nz,display_error_text_B075]
0:
	move.b	#0x0F,d0                        	| [$4dd5: ld   a,$0F]
	move.b	#0x20,d1                        	| [$4dd7: ld   b,$20]
	jbsr	task_manipulation_B05D            	| [$4dd9: call task_manipulation_B05D]
	tst.b	d0                               	| [$4ddc: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$4ddd: call nz,display_error_text_B075]
0:
l_4de0:
	move.l	(sp)+,a3                        	| [$4de0: pop  iy]

	move.l	a3,-(sp)                        	| [$4de2: push iy]
	move.b	#0xF0,d0                        	| [$4de4: ld   a,$F0]
	jbsr	suspend_this_task_B05A            	| [$4de6: call suspend_this_task_B05A]
	tst.b	d0                               	| [$4de9: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$4dea: call nz,display_error_text_B075]
0:
	move.l	(sp)+,a3                        	| [$4ded: pop  iy]
	move.b	#0x01,d0                        	| [$4def: ld   a,$01]
	move.b	#0x01,d1                        	| [$4df1: ld   b,$01]
	jbsr	task_manipulation_B05D            	| [$4df3: call task_manipulation_B05D]
	tst.b	d0                               	| [$4df6: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$4df7: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                  	| [$4dfa: call task_yield_B051]
	move.b	#0x0A,d1
	move.b	#0x1C,d2                      	| [$4dfd: ld   bc,$0A1C]
	move.b	#0x88,d3
	move.b	#0x3c,d4                  	| [$4e00: ld   de,table_883c]
	move.b	#0x1D,d5
	move.b	#0,d6                      	| [$4e03: ld   hl,$1D00]
	jbsr	fill_rectangle_B01B                            	| [$4e06: call $B01B]
	lea	temp_numeric_buffer_CF00(pc),a2    	| [$4e09: ld   ix,temp_numeric_buffer_CF00]
	move.b	#0x02,(0x00,a2)                 	| [$4e0d: ld   (ix+$00),$02]
	move.b	#0x10,(0x01,a2)                 	| [$4e11: ld   (ix+$01),$10]
	move.b	#0xFF,(0x1e,a2)                 	| [$4e15: ld   (ix+$1e),$FF]
	lea	table_4000(pc),a0                      	| [$4e19: ld   hl,$4000]
l_4e1c:

	move.l	a2,-(sp)                        	| [$4e1c: push ix]
	move.b	#0x1C,d1                        	| [$4e1e: ld   b,$1C]
	move.b	#0xEC,d2                        	| [$4e20: ld   c,$EC]
l_4e22:
	move.b	(a0),d3                         	| [$4e22: ld   d,(hl)]
	move.b	#0x03,d4                        	| [$4e23: ld   e,$03]
	movem.w	d1/d2,-(sp)                    	| [$4e25: push bc]
	jbsr	random_B006                       	| [$4e26: call random_B006]
	movem.w	(sp)+,d1/d2                    	| [$4e29: pop  bc]
	add.b	d2,d0                            	| [$4e2a: add  a,c]
	move.b	d0,(0x02,a2)                    	| [$4e2b: ld   (ix+$02),a]
	addq.w	#1,a2                           	| [$4e2e: inc  ix]
	addq.w	#1,a0                           	| [$4e30: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_4e22                             	| [$4e31: djnz $4E22]
	move.l	(sp)+,a1                        	| [$4e33: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$4e33: pop  de]

	move.l	a0,-(sp)                        	| [$4e34: push hl]
	movem.w	d3/d4,-(sp)                    	| [$4e35: push de]
	move.l	a1,-(sp)                        	| [$4e35: push de]
	exg	a1,a0                              	| [$4e36: ex   de,hl]
	move.b	#0xE2,d3                        	| [$4e37: ld   d,$E2]
	jbsr	display_text_B039                 	| [$4e39: call display_text_B039]
	move.l	(sp)+,a2                        	| [$4e3c: pop  ix]
	move.l	(sp)+,a0                        	| [$4e3e: pop  hl]
	move.b	#0x1F,d0                        	| [$4e3f: ld   a,$1F]
	cmp.b	(0x01,a2),d0                     	| [$4e41: cp   (ix+$01)]
	jeq	l_4e4d                             	| [$4e44: jp   z,$4E4D]
	addq.b	#1,(0x01,a2)                    	| [$4e47: inc  (ix+$01)]
	jra	l_4e1c                             	| [$4e4a: jp   $4E1C]
l_4e4d:
	lea	table_4E73(pc),a0                  	| [$4e4d: ld   hl,table_4E73]
	move.b	#0x8A,d3                        	| [$4e50: ld   d,$8A]
	jbsr	display_text_B039                 	| [$4e52: call display_text_B039]
	lea	table_4F4B(pc),a0                  	| [$4e55: ld   hl,table_4F4B]
	move.b	#0x93,d3                        	| [$4e58: ld   d,$93]
	move.b	computer_skill_C910,d0          	| [$4e5a: ld   a,(computer_skill_C910)]
	cmp.b	#0x05,d0                         	| [$4e5d: cp   $05]
	jcs	l_4e6f                             	| [$4e5f: jp   c,$4E6F]
	lea	table_4F65(pc),a0                  	| [$4e62: ld   hl,table_4F65]
	cmp.b	#0x08,d0                         	| [$4e65: cp   $08]
	jcs	l_4e6f                             	| [$4e67: jp   c,$4E6F]
	lea	table_4F7F(pc),a0                  	| [$4e6a: ld   hl,table_4F7F]
	move.b	#0x23,d3                        	| [$4e6d: ld   d,$23]
l_4e6f:
	jbsr	display_text_B039                 	| [$4e6f: call display_text_B039]
	rts                                    	| [$4e72: ret]
table_4E73:
	dc.b	0x1a,0x00,0xf1,0xf4,0xf4,0xf4,0xfe,0x1b | table_4E73
	dc.b	0x01,0xf1,0xf4,0xf4,0xfe,0x1c,0x02,0xf1 | $4e7b
	dc.b	0xf4,0xfe,0x09,0x01,0xef,0xf4,0xf0,0xef | $4e83
	dc.b	0xf0,0xfe,0x07,0x02,0xef,0xf4,0xf4,0xf4 | $4e8b
	dc.b	0xf4,0xf4,0xf4,0xf0,0xfe,0x05,0x03,0xef | $4e93
	dc.b	0xf4,0xf4,0xf4,0xf4,0xfe,0x05,0x04,0xf4 | $4e9b
	dc.b	0xf4,0xf4,0xf4,0xf4,0xfe,0x04,0x05,0xef | $4ea3
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4eab
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf0,0xfe,0x16,0x02 | $4eb3
	dc.b	0xef,0xf4,0xf0,0xfe,0x15,0x03,0xef,0xf4 | $4ebb
	dc.b	0xf4,0xf4,0xf0,0xfe,0x14,0x04,0xef,0xf4 | $4ec3
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf0,0xfe,0x14,0x05 | $4ecb
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf2,0xfe | $4ed3
	dc.b	0x03,0x06,0xef,0xf4,0xf4,0xf4,0xf4,0xf4 | $4edb
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4ee3
	dc.b	0xf4,0xf0,0xef,0xf4,0xf4,0xf4,0xf4,0xf4 | $4eeb
	dc.b	0xf4,0xf0,0xfe,0x03,0x07,0xf4,0xf4,0xf4 | $4ef3
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4efb
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4f03
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf0,0xfe,0x03 | $4f0b
	dc.b	0x08,0xf1,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4f13
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4f1b
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4f23
	dc.b	0xf4,0xf4,0xf0,0xfe,0x04,0x09,0xf1,0xf4 | $4f2b
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4f33
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4 | $4f3b
	dc.b	0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf2,0xff | $4f43
table_4F4B:
	dc.b	0x0a,0x03,0xa9,0xaa,0xab,0xac,0xad,0xae | table_4F4B
	dc.b	0xaf,0xb0,0xb1,0xb2,0xfe,0x0a,0x04,0xb3 | $4f53
	dc.b	0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb | $4f5b
	dc.b	0xbc,0xff | $4f63
table_4F65:
	dc.b	0x0a,0x03,0xbd,0xbe,0xbf,0xc0,0xc1,0xc2 | table_4F65
	dc.b	0xc3,0xc4,0xc5,0xc6,0xfe,0x0a,0x04,0xc7 | $4f6d
	dc.b	0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf | $4f75
	dc.b	0x83,0xff | $4f7d
table_4F7F:
	dc.b	0x0a,0x03,0x00,0x01,0x02,0x03,0x04,0x05 | table_4F7F
	dc.b	0x06,0x07,0x08,0x09,0xfe,0x0a,0x04,0x0a | $4f87
	dc.b	0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12 | $4f8f
	dc.b	0x13,0xff | $4f97
	
task_5250:
	clr.b	d0                               	| [$5250: ld   a,$00]
	lea	map_index_C900,a2              	| [$5252: ld   ix,map_index_C900]
	move.b	d0,(0x00,a2)                    	| [$5256: ld   (ix+$00),a]
	lea	table_53CC(pc),a0                  	| [$5259: ld   hl,table_53CC]
	move.b	d6,(0x02,a2)                    	| [$525c: ld   (ix+$02),l]
	move.b	d5,(0x03,a2)                    	| [$525f: ld   (ix+$03),h]
	move.b	(a0),d0                         	| [$5262: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$5263: ld   (ix+$01),a]
l_5266:
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5266: ld   a,(players_type_human_or_cpu_flags_C02D)]
	move.b	d0,unknown_C032                 	| [$5269: ld   (unknown_C032),a]
	move.b	#0x01,d0                        	| [$526c: ld   a,$01]
	jbsr	schedule_task_to_start_B057                 	| [$526e: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5271: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5272: call nz,display_error_text_B075]
0:
	move.b	#0x80,d0                        	| [$5275: ld   a,$80]
	jbsr	stop_sound_b0ae                            	| [$5277: call $B0AE]
	move.b	dip_switches_copy_C030,d0       	| [$527a: ld   a,(dip_switches_copy_C030)]
	btst.b	#7,d0                           	| [$527d: bit  7,a] free play bit
	jeq	l_5287                             	| [$527f: jp   z,$5287]
	move.b	#0x03,d0                        	| [$5282: ld   a,$03]
	move.b	d0,nb_credits_minus_one_C024    	| [$5284: ld   (nb_credits_minus_one_C024),a]
l_5287:
	clr.b	d0                               	| [$5287: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$5289: call suspend_this_task_B05A]
	* reached when coin is inserted
	jbsr	set_normal_screen_b060                            	| [$528c: call $B060]
	move.b	#0x01,d0                        	| [$528f: ld   a,$01]
	jbsr	resume_tasks_b015                            	| [$5291: call $B015]
	move.b	nb_credits_minus_one_C024,d0    	| [$5294: ld   a,(nb_credits_minus_one_C024)]
												| [$5297: and  a]
* after game over check if there are still credits
	jeq	task_5250                             	| [$5298: jp   z,$5250]
	lea	map_index_C900,a2              	| [$529b: ld   ix,map_index_C900]
	lea	unknown_C908,a3                	| [$529f: ld   iy,unknown_C908]
	clr.b	d0                               	| [$52a3: ld   a,$00]
	move.b	d0,(0x00,a2)                    	| [$52a5: ld   (ix+$00),a]
	move.b	d0,(0x00,a3)                    	| [$52a8: ld   (iy+$00),a]
	lea	table_534d(pc),a0                  	| [$52ab: ld   hl,table_534d]
	move.b	(a0),d0                         	| [$52ae: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$52af: ld   (ix+$01),a]
	move.b	d0,(0x01,a3)                    	| [$52b2: ld   (iy+$01),a]
	move.b	d6,(0x02,a2)                    	| [$52b5: ld   (ix+$02),l]
	move.b	d6,(0x02,a3)                    	| [$52b8: ld   (iy+$02),l]
	move.b	d5,(0x03,a2)                    	| [$52bb: ld   (ix+$03),h]
	move.b	d5,(0x03,a3)                    	| [$52be: ld   (iy+$03),h]
	clr.b	d0                               	| [$52c1: ld   a,$00]
	move.b	d0,(0x04,a2)                    	| [$52c3: ld   (ix+$04),a]
	move.b	d0,(0x04,a3)                    	| [$52c6: ld   (iy+$04),a]
	move.b	d0,(0x05,a2)                    	| [$52c9: ld   (ix+$05),a]
	move.b	d0,(0x05,a3)                    	| [$52cc: ld   (iy+$05),a]
	move.b	d0,(0x06,a2)                    	| [$52cf: ld   (ix+$06),a]
	move.b	d0,(0x06,a3)                    	| [$52d2: ld   (iy+$06),a]
	move.b	d0,(0x07,a2)                    	| [$52d5: ld   (ix+$07),a]
	move.b	d0,(0x07,a3)                    	| [$52d8: ld   (iy+$07),a]
	move.b	d0,level_number_C0DC            	| [$52db: ld   (level_number_C0DC),a]
	move.b	d0,unknown_C0DD                 	| [$52de: ld   (unknown_C0DD),a]
	move.b	d0,unknown_C0DE                 	| [$52e1: ld   (unknown_C0DE),a]
	move.b	d0,unknown_C0DF                 	| [$52e4: ld   (unknown_C0DF),a]
	move.b	d0,unknown_C0E0                 	| [$52e7: ld   (unknown_C0E0),a]
	move.b	d0,unknown_C0E1                 	| [$52ea: ld   (unknown_C0E1),a]
	move.b	d0,unknown_C0E2                 	| [$52ed: ld   (unknown_C0E2),a]
	move.b	d0,unknown_C0E3                 	| [$52f0: ld   (unknown_C0E3),a]
	move.b	d0,unknown_C0E4                 	| [$52f3: ld   (unknown_C0E4),a]
	move.b	d0,unknown_C0E5                 	| [$52f6: ld   (unknown_C0E5),a]
	lea	players_type_human_or_cpu_flags_C02D,a0	| [$52f9: ld   hl,players_type_human_or_cpu_flags_C02D]
	bset.b	#0,(a0)                         	| [$52fc: set  0,(hl)]
	bset.b	#2,(a0)                         	| [$52fe: set  2,(hl)]
	lea	nb_credits_minus_one_C024,a0   	| [$5300: ld   hl,nb_credits_minus_one_C024]
	move.b	(a0),d0                         	| [$5303: ld   a,(hl)]
	subq.b	#0x01,d0                        	| [$5304: sub  $01]
*daa
	move.b	d0,(a0)                         	| [$5307: ld   (hl),a]
	jbsr	clear_C7xx_B01E                    	| [$5308: call $B01E]
	move.b	#0x01,d0                        	| [$530b: ld   a,$01]
	jbsr	suspend_this_task_B05A            	| [$530d: call suspend_this_task_B05A]
	move.w	#0x003C,d1                      	| [$5310: ld   bc,$003C] 60
	jbsr	fill_video_and_attribute_memory_B030                    	| [$5313: call $B030]
	move.b	#0x80,d0                        	| [$5316: ld   a,$80]
	jbsr	play_sound_B072                   	| [$5318: call play_sound_B072]
l_531b:
	jbsr	disable_interrupts_B0BD                            	| [$531b: call $B0C0]
	jbsr	display_start_message_7b92                           	| [$531e: call $7B92]
	jbsr	display_credits_7C1C                            	| [$5321: call $7C1C]
	jbsr	check_coin_ports_B069                            	| [$5324: call $B069]
	btst.b	#2,d0                           	| [$5327: bit  2,a]
	jne	l_5266                             	| [$5329: jp   nz,$5266]
	move.b	nb_credits_minus_one_C024,d0    	| [$532c: ld   a,(nb_credits_minus_one_C024)]
	tst.b	d0                               	| [$532f: and  a]
	jeq	l_531b                             	| [$5330: jp   z,$531B]
	jbsr	check_coin_ports_B069                            	| [$5333: call $B069]
	btst.b	#3,d0                           	| [$5336: bit  3,a]
	jeq	l_531b                             	| [$5338: jp   z,$531B]
* set 2 player mode
	lea	players_type_human_or_cpu_flags_C02D(pc),a0	| [$533b: ld   hl,players_type_human_or_cpu_flags_C02D]
	bset.b	#1,(a0)                         	| [$533e: set  1,(hl)]
	bset.b	#3,(a0)                         	| [$5340: set  3,(hl)]
	lea	nb_credits_minus_one_C024(pc),a0   	| [$5342: ld   hl,nb_credits_minus_one_C024]
	move.b	(a0),d0                         	| [$5345: ld   a,(hl)]
	subq.b	#0x01,d0                        	| [$5346: sub  $01]
*daa
	move.b	d0,(a0)                         	| [$5349: ld   (hl),a]
	jra	l_5266                             	| [$534a: jp   $5266]
table_534d:
	dc.b	0x53,0x27,0x07,0x37,0x17,0x55,0x24,0x04 | table_534d
	dc.b	0x34,0x14,0x55,0x22,0x02,0x32,0x12,0x55 | $5355
	dc.b	0x20,0x00,0x30,0x10,0x55,0x2a,0x0a,0x3a | $535d
	dc.b	0x1a,0x55,0x28,0x08,0x38,0x18,0x55,0x25 | $5365
	dc.b	0x05,0x35,0x15,0x55,0x29,0x09,0x39,0x19 | $536d
	dc.b	0x55,0x26,0x06,0x36,0x16,0x55,0x23,0x03 | $5375
	dc.b	0x33,0x13,0x55,0x21,0x01,0x31,0x11,0x55 | $537d
	dc.b	0x2b,0x0b,0x3b,0x1b,0x55,0x27,0x07,0x37 | $5385
	dc.b	0x17,0x55,0x24,0x04,0x34,0x14,0x55,0x22 | $538d
	dc.b	0x02,0x32,0x12,0x55,0x20,0x00,0x30,0x10 | $5395
	dc.b	0x55,0x2a,0x0a,0x3a,0x1a,0x55,0x28,0x08 | $539d
	dc.b	0x38,0x18,0x55,0x25,0x05,0x35,0x15,0x55 | $53a5
	dc.b	0x29,0x09,0x39,0x19,0x55,0x26,0x06,0x36 | $53ad
	dc.b	0x16,0x55,0x23,0x03,0x33,0x13,0x55,0x21 | $53b5
	dc.b	0x01,0x31,0x11,0x55,0x2b,0x0b,0xff,0x4d | $53bd
	dc.b	0x53 | $53c5
table_53C6:
	dc.b	0x54,0x40,0x51
table_53C9:
	dc.b	0x3b,0x54,0x51 | table_53C9
table_53CC:
	dc.b	0xd2,0xd0,0x80,0xff,0xcc,0x53 | table_53CC
	.align	2

task_53d2:
	lea	unknown_C0C8(pc),a0                	| [$53d2: ld   hl,unknown_C0C8]
	move.b	#0x10,d1                        	| [$53d5: ld   b,$10]
l_53d7:
	clr.b	(a0)+                             	| [$53d7: ld   (hl),$00]
												| [$53d9: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_53d7                             	| [$53da: djnz $53D7]
	jbsr	set_normal_screen_b060                  	| [$53dc: call $B060]
* 1 player mode (and also at game bootup)
	lea	players_type_human_or_cpu_flags_C02D(pc),a0	| [$53df: ld   hl,players_type_human_or_cpu_flags_C02D]
	bset.b	#2,(a0)                         	| [$53e2: set  2,(hl)]
l_53e4:
	move.b	#0x80,d0                        	| [$53e4: ld   a,$80]
	jbsr	play_sound_B072                   	| [$53e6: call play_sound_B072]
	move.b	#0x02,d0                        	| [$53e9: ld   a,$02]
	jbsr	resume_tasks_b015              	| [$53eb: call resume_tasks_b015]
l_53ee:
	jbsr	clear_C7xx_B01E                   	| [$53ee: call clear_C7xx_B01E]
	move.b	#0x01,d0                        	| [$53f1: ld   a,$01]
	jbsr	suspend_this_task_B05A                 	| [$53f3: call suspend_this_task_B05A]
	tst.b	d0                               	| [$53f6: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$53f7: call nz,display_error_text_B075]
0:
	move.w	#0x003C,d1                      	| [$53fa: ld   bc,$003C] 60
	jbsr	fill_video_and_attribute_memory_B030	| [$53fd: call fill_video_and_attribute_memory_B030]
	lea	unknown_C908(pc),a0                	| [$5400: ld   hl,unknown_C908]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5403: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$5406: bit  2,a]
	jeq	l_540e                             	| [$5408: jp   z,$540E]
* copy the contents of C900 to C907 (8 bytes)
	lea	map_index_C900(pc),a0              	| [$540b: ld   hl,map_index_C900]
l_540e:
	lea	computer_skill_C910(pc),a1         	| [$540e: ld   de,computer_skill_C910]
	move.w	#0x0008,d1                      	| [$5411: ld   bc,$0008] 8
	jbsr	ldir                              	| [$5414: ldir]
	move.b	#0x03,d0                        	| [$5416: ld   a,$03]
	jbsr	schedule_task_to_start_B057       	| [$5418: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$541b: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$541c: call nz,display_error_text_B075]
0:
	move.b	#0x02,d0                        	| [$541f: ld   a,$02]
	jbsr	schedule_task_to_start_B057       	| [$5421: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5424: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5425: call nz,display_error_text_B075]
0:
	move.b	#0x05,d0                        	| [$5428: ld   a,$05]
	jbsr	schedule_task_to_start_B057       	| [$542a: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$542d: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$542e: call nz,display_error_text_B075]
0:
	move.b	#0x0F,d0                        	| [$5431: ld   a,$0F]
	jbsr	schedule_task_to_start_B057       	| [$5433: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5436: and  a]
	beq.b	0f
	jbsr	display_error_text_B075           	| [$5437: call nz,display_error_text_B075]
0:
	clr.b	d0                               	| [$543a: ld   a,$00]
	jbsr	suspend_this_task_B05A                 	| [$543c: call suspend_this_task_B05A]
	jbsr	l_5974                            	| [$543f: call $5974]
	tst.b	d0                               	| [$5442: and  a]
	jeq	l_53e4                             	| [$5443: jp   z,$53E4]
	clr.b	d0                               	| [$5446: ld   a,$00]
	move.b	d0,d1                           	| [$5448: ld   b,a]
	jbsr	task_manipulation_B05D            	| [$5449: call task_manipulation_B05D]
	jbsr	task_yield_B051                  	| [$544c: call task_yield_B051]
task_544f:
	jbsr	l_7a89                            	| [$544f: call $7A89]
	jbsr	l_7ad6                            	| [$5452: call $7AD6]
	jbsr	is_title_screen_demo_mode_B0B1    	| [$5455: call is_title_screen_demo_mode_B0B1]
	tst.b	d0                               	| [$5458: and  a]
	jeq	l_5464                             	| [$5459: jp   z,$5464]
	jbsr	l_b0b4                            	| [$545c: call $B0B4]
	clr.b	d0                               	| [$545f: ld   a,$00]
	jbsr	l_b018                            	| [$5461: call $B018]
l_5464:
	move.b	background_and_state_bits_C911,d0	| [$5464: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$5467: res  7,a]
	asl.b	#2,d0                            	| [$5469: sla  a] *4 (long pointer)
	clr.w	d1                               	| [$546c: ld   b,$00]
	move.b	d0,d1                           	| [$546b: ld   c,a]
	lea	jump_table_547B(pc),a2             	| [$546e: ld   ix,jump_table_547B]
	add.w	d1,a2                            	| [$5472: add  ix,bc]
	move.l	(a2),a0                    		| [$5474: ld   l,(ix+$00)]
											| [$5477: ld   h,(ix+$01)]
	jra	(a0)                               	| [$547a: jp   (hl)]
	

jump_table_547B:
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_5529
	.long	l_56f8
	.long	l_b084
	.long	l_4d84
	.long	l_56f8
	.long	l_b087
	.long	l_56f8
	.long	l_4d84
	.long	l_56f8
	.long	l_4d84
	.long	l_b08a
	.long	l_b08d
	.long	l_4d84
	.long	0
	.long	0
	.long	0
	.long	0
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58c7
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_58ff
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_5925
	.long	l_78ea
	.long	l_b078
	.long	l_b07b
	.long	l_5f2a
	.long	l_5bf4
	.long	l_5836
	.long	display_error_text_B075


l_5529:
	clr.b	d0                               	| [$5529: ld   a,$00]
	move.b	d0,unknown_C147                 	| [$552b: ld   (unknown_C147),a]
	move.b	d0,unknown_C148                 	| [$552e: ld   (unknown_C148),a]
l_5531:
	move.b	#0x0A,d0                        	| [$5531: ld   a,$0A]
	jbsr	schedule_task_to_start_B057       	| [$5533: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5536: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$5537: call nz,display_error_text_B075]
0:
	move.b	#0x0B,d0                        	| [$553a: ld   a,$0B]
	jbsr	schedule_task_to_start_B057       	| [$553c: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$553f: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$5540: call nz,display_error_text_B075]
0:
	move.b	#0x04,d0                        	| [$5543: ld   a,$04]
	jbsr	schedule_task_to_start_B057       	| [$5545: call schedule_task_to_start_B057]
	move.b	#0x03,d0                        	| [$5548: ld   a,$03]
	jbsr	schedule_task_to_start_B057       	| [$554a: call schedule_task_to_start_B057]
	move.b	#0x07,d0                        	| [$554d: ld   a,$07]
	jbsr	schedule_task_to_start_B057       	| [$554f: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5552: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$5553: call nz,display_error_text_B075]
0:
	move.b	#0x08,d0                        	| [$5556: ld   a,$08]
	jbsr	schedule_task_to_start_B057       	| [$5558: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$555b: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$555c: call nz,display_error_text_B075]
0:
	move.b	#0x09,d0                        	| [$555f: ld   a,$09]
	jbsr	schedule_task_to_start_B057       	| [$5561: call schedule_task_to_start_B057]
	tst.b	d0                               	| [$5564: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$5565: call nz,display_error_text_B075]
0:
l_5568:
	clr.b	d0                               	| [$5568: ld   a,$00]
	jbsr	suspend_this_task_B05A                 	| [$556a: call suspend_this_task_B05A]
	cmp.b	#0x08,d0                         	| [$556d: cp   $08]
	jne	l_559c                             	| [$556f: jp   nz,$559C]
	move.b	#0x0A,d0                        	| [$5572: ld   a,$0A]
	move.b	#0x08,d1                        	| [$5574: ld   b,$08]
	jbsr	task_manipulation_B05D            	| [$5576: call task_manipulation_B05D]
	move.b	#0x0B,d0                        	| [$5579: ld   a,$0B]
	move.b	#0x08,d1                        	| [$557b: ld   b,$08]
	jbsr	task_manipulation_B05D            	| [$557d: call task_manipulation_B05D]
	move.b	#0x08,d0                        	| [$5580: ld   a,$08]
	move.b	#0x09,d1                        	| [$5582: ld   b,$09]
	jbsr	task_manipulation_B05D            	| [$5584: call task_manipulation_B05D]
	move.b	#0x09,d0                        	| [$5587: ld   a,$09]
	move.b	#0x09,d1                        	| [$5589: ld   b,$09]
	jbsr	task_manipulation_B05D            	| [$558b: call task_manipulation_B05D]
	move.b	#0x07,d0                        	| [$558e: ld   a,$07]
	move.b	#0x08,d1                        	| [$5590: ld   b,$08]
	jbsr	task_manipulation_B05D            	| [$5592: call task_manipulation_B05D]
	tst.b	d0                               	| [$5595: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$5596: call nz,display_error_text_B075]
0:
	jra	l_5568                             	| [$5599: jp   $5568]
l_559c:
	cmp.b	#0x01,d0                         	| [$559c: cp   $01]
	jeq	l_55a9                             	| [$559e: jp   z,$55A9]
	cmp.b	#0x02,d0                         	| [$55a1: cp   $02]
	jeq	l_5650                             	| [$55a3: jp   z,$5650]
	jbsr	display_error_text_B075           	| [$55a6: call display_error_text_B075]
l_55a9:
	move.b	#0x80,d0                        	| [$55a9: ld   a,$80]
	jbsr	play_sound_B072                   	| [$55ab: call play_sound_B072]
	move.b	#0x07,d0                        	| [$55ae: ld   a,$07]
	jbsr	resume_task_B054               	| [$55b0: call resume_task_B054]
	move.b	#0x08,d0                        	| [$55b3: ld   a,$08]
	jbsr	resume_task_B054               	| [$55b5: call resume_task_B054]
	move.b	#0x09,d0                        	| [$55b8: ld   a,$09]
	jbsr	resume_task_B054               	| [$55ba: call resume_task_B054]
	move.b	#0x0B,d0                        	| [$55bd: ld   a,$0B]
	jbsr	resume_task_B054               	| [$55bf: call resume_task_B054]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$55c2: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$55c5: bit  2,a]
	jeq	l_5614                             	| [$55c7: jp   z,$5614]
	move.b	match_timer_C167,d0             	| [$55ca: ld   a,(match_timer_C167)]
	tst.b	d0                               	| [$55cd: and  a]
	jeq	l_5614                             	| [$55ce: jp   z,$5614]
l_55d1:
	move.b	match_timer_C167,d0             	| [$55d1: ld   a,(match_timer_C167)]
	subq.b	#0x01,d0                        	| [$55d4: sub  $01]
*daa
	move.b	d0,match_timer_C167             	| [$55d7: ld   (match_timer_C167),a]
	jbsr	l_64fb                            	| [$55da: call $64FB]
	move.b	#0x08,d0                        	| [$55dd: ld   a,$08]
	jbsr	play_sound_B072                   	| [$55df: call play_sound_B072]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$55e2: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x0C,d0                         	| [$55e5: and  $0C]
	cmp.b	#0x0C,d0                         	| [$55e7: cp   $0C]
	jne	l_55fe                             	| [$55e9: jp   nz,$55FE]
	lea	players_type_human_or_cpu_flags_C02D(pc),a0	| [$55ec: ld   hl,players_type_human_or_cpu_flags_C02D]
	bclr.b	#3,(a0)                         	| [$55ef: res  3,(hl)]
	move.b	#0x01,d0                        	| [$55f1: ld   a,$01]
	jbsr	l_b018                            	| [$55f3: call $B018]
	lea	players_type_human_or_cpu_flags_C02D(pc),a0	| [$55f6: ld   hl,players_type_human_or_cpu_flags_C02D]
	bset.b	#3,(a0)                         	| [$55f9: set  3,(hl)]
	jra	l_5603                             	| [$55fb: jp   $5603]
l_55fe:
	move.b	#0x01,d0                        	| [$55fe: ld   a,$01]
	jbsr	l_b018                            	| [$5600: call $B018]
l_5603:
	move.b	#0x06,d0                        	| [$5603: ld   a,$06]
	jbsr	suspend_this_task_B05A                 	| [$5605: call suspend_this_task_B05A]
	move.b	match_timer_C167,d0             	| [$5608: ld   a,(match_timer_C167)]
	tst.b	d0                               	| [$560b: and  a]
	jne	l_55d1                             	| [$560c: jp   nz,$55D1]
	move.b	#0x3C,d0                        	| [$560f: ld   a,$3C]
	jbsr	suspend_this_task_B05A                 	| [$5611: call suspend_this_task_B05A]
l_5614:
	move.b	#0x07,d0                        	| [$5614: ld   a,$07]
	jbsr	resume_task_B054               	| [$5616: call resume_task_B054]
	move.b	#0x0A,d0                        	| [$5619: ld   a,$0A]
	jbsr	resume_task_B054               	| [$561b: call resume_task_B054]
	move.b	background_and_state_bits_C911,d0	| [$561e: ld   a,(background_and_state_bits_C911)]
	btst.b	#7,d0                           	| [$5621: bit  7,a]
	jne	l_5643                             	| [$5623: jp   nz,$5643]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5626: ld   a,(players_type_human_or_cpu_flags_C02D)]
	cmp.b	#0x0A,d0                         	| [$5629: cp   $0A]
	jeq	l_5638                             	| [$562b: jp   z,$5638]
	lea	unknown_C148(pc),a0                	| [$562e: ld   hl,unknown_C148]
	addq.b	#1,(a0)                         	| [$5631: inc  (hl)]
	move.b	(a0),d0                         	| [$5632: ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [$5633: cp   $02]
	jcs	l_5531                             	| [$5635: jp   c,$5531]
l_5638:
	lea	unknown_C0E0(pc),a0                	| [$5638: ld   hl,unknown_C0E0]
	jbsr	l_5f09                            	| [$563b: call $5F09]
	move.b	#0x64,d0                        	| [$563e: ld   a,$64]
	jbsr	suspend_this_task_B05A                 	| [$5640: call suspend_this_task_B05A]
l_5643:
	move.b	#0x01,d0                        	| [$5643: ld   a,$01]
	move.b	d0,d1                           	| [$5645: ld   b,a]
	jbsr	task_manipulation_B05D            	| [$5646: call task_manipulation_B05D]
	tst.b	d0                               	| [$5649: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$564a: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                  	| [$564d: call task_yield_B051]
l_5650:
	move.b	#0x80,d0                        	| [$5650: ld   a,$80]
	jbsr	play_sound_B072                   	| [$5652: call play_sound_B072]
	move.b	#0x07,d0                        	| [$5655: ld   a,$07]
	jbsr	resume_task_B054               	| [$5657: call resume_task_B054]
	move.b	#0x08,d0                        	| [$565a: ld   a,$08]
	jbsr	resume_task_B054               	| [$565c: call resume_task_B054]
	move.b	#0x09,d0                        	| [$565f: ld   a,$09]
	jbsr	resume_task_B054               	| [$5661: call resume_task_B054]
	move.b	#0x0A,d0                        	| [$5664: ld   a,$0A]
	jbsr	resume_task_B054               	| [$5666: call resume_task_B054]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5669: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#3,d0                           	| [$566c: bit  3,a]
	jeq	l_56bb                             	| [$566e: jp   z,$56BB]
	move.b	match_timer_C167,d0             	| [$5671: ld   a,(match_timer_C167)]
												| [$5674: and  a]
	jeq	l_56bb                             	| [$5675: jp   z,$56BB]
l_5678:
	move.b	match_timer_C167,d0             	| [$5678: ld   a,(match_timer_C167)]
	subq.b	#0x01,d0                        	| [$567b: sub  $01]
*daa
	move.b	d0,match_timer_C167             	| [$567e: ld   (match_timer_C167),a]
	jbsr	l_64fb                            	| [$5681: call $64FB]
	move.b	#0x08,d0                        	| [$5684: ld   a,$08]
	jbsr	play_sound_B072                   	| [$5686: call play_sound_B072]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$5689: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x0C,d0                         	| [$568c: and  $0C]
	cmp.b	#0x0C,d0                         	| [$568e: cp   $0C]
	jne	l_56a5                             	| [$5690: jp   nz,$56A5]
	lea	players_type_human_or_cpu_flags_C02D(pc),a0	| [$5693: ld   hl,players_type_human_or_cpu_flags_C02D]
	bclr.b	#2,(a0)                         	| [$5696: res  2,(hl)]
	move.b	#0x01,d0                        	| [$5698: ld   a,$01]
	jbsr	l_b018                            	| [$569a: call $B018]
	lea	players_type_human_or_cpu_flags_C02D(pc),a0	| [$569d: ld   hl,players_type_human_or_cpu_flags_C02D]
	bset.b	#2,(a0)                         	| [$56a0: set  2,(hl)]
	jra	l_56aa                             	| [$56a2: jp   $56AA]
l_56a5:
	move.b	#0x01,d0                        	| [$56a5: ld   a,$01]
	jbsr	l_b018                            	| [$56a7: call $B018]
l_56aa:
	move.b	#0x06,d0                        	| [$56aa: ld   a,$06]
	jbsr	suspend_this_task_B05A                 	| [$56ac: call suspend_this_task_B05A]
	move.b	match_timer_C167,d0             	| [$56af: ld   a,(match_timer_C167)]
	tst.b	d0                               	| [$56b2: and  a]
	jne	l_5678                             	| [$56b3: jp   nz,$5678]
	move.b	#0x3C,d0                        	| [$56b6: ld   a,$3C]
	jbsr	suspend_this_task_B05A                 	| [$56b8: call suspend_this_task_B05A]
l_56bb:
	move.b	#0x07,d0                        	| [$56bb: ld   a,$07]
	jbsr	resume_task_B054               	| [$56bd: call resume_task_B054]
	move.b	#0x0B,d0                        	| [$56c0: ld   a,$0B]
	jbsr	resume_task_B054               	| [$56c2: call resume_task_B054]
	move.b	background_and_state_bits_C911,d0	| [$56c5: ld   a,(background_and_state_bits_C911)]
	btst.b	#7,d0                           	| [$56c8: bit  7,a]
	jne	l_56ea                             	| [$56ca: jp   nz,$56EA]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$56cd: ld   a,(players_type_human_or_cpu_flags_C02D)]
	cmp.b	#0x05,d0                         	| [$56d0: cp   $05]
	jeq	l_56df                             	| [$56d2: jp   z,$56DF]
	lea	unknown_C147(pc),a0                	| [$56d5: ld   hl,unknown_C147]
	addq.b	#1,(a0)                         	| [$56d8: inc  (hl)]
	move.b	(a0),d0                         	| [$56d9: ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [$56da: cp   $02]
	jcs	l_5531                             	| [$56dc: jp   c,$5531]
l_56df:
	lea	unknown_C0E3(pc),a0                	| [$56df: ld   hl,unknown_C0E3]
	jbsr	l_5f09                            	| [$56e2: call $5F09]
	move.b	#0x64,d0                        	| [$56e5: ld   a,$64]
	jbsr	suspend_this_task_B05A                 	| [$56e7: call suspend_this_task_B05A]
l_56ea:
	move.b	#0x01,d0                        	| [$56ea: ld   a,$01]
	move.b	#0x02,d1                        	| [$56ec: ld   b,$02]
	jbsr	task_manipulation_B05D            	| [$56ee: call task_manipulation_B05D]
	tst.b	d0                               	| [$56f1: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$56f2: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                  	| [$56f5: call task_yield_B051]

task_6491:
	move.b	background_and_state_bits_C911,d0	| [$6491: ld   a,(background_and_state_bits_C911)]
	and.b	#0x7F,d0                         	| [$6494: and  $7F]
	cmp.b	#0x10,d0                         	| [$6496: cp   $10]
	jcs	l_649e                             	| [$6498: jp   c,$649E]
	jbsr	task_yield_B051                  	| [$649b: call task_yield_B051]
* initialize match timer to 30 seconds (BCD)
l_649e:
	move.w	#0x0030,d5                      	| [$649e: ld   hl,$0030] 48
	lea	match_timer_C167(pc),a2            	| [$64a1: ld   ix,match_timer_C167]
	move.b	d6,(0x00,a2)                    	| [$64a5: ld   (ix+$00),l]
	move.b	d5,(0x01,a2)                    	| [$64a8: ld   (ix+$01),h]
	jbsr	l_64fb                            	| [$64ab: call $64FB]
l_64ae:
	clr.b	d0                               	| [$64ae: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$64b0: call suspend_this_task_B05A]
	cmp.b	#0x09,d0                         	| [$64b3: cp   $09]
	jeq	l_64ae                             	| [$64b5: jp   z,$64AE]
	cmp.b	#0x0A,d0                         	| [$64b8: cp   $0A]
	beq	0f
	jbsr	display_error_text_B075           	| [$64ba: call nz,display_error_text_B075]
0:
l_64bd:
	move.b	#0x3C,d0                        	| [$64bd: ld   a,$3C]
	jbsr	suspend_this_task_B05A            	| [$64bf: call suspend_this_task_B05A]
	cmp.b	#0x09,d0                         	| [$64c2: cp   $09]
	jeq	l_64ae                             	| [$64c4: jp   z,$64AE]
	tst.b	d0                               	| [$64c7: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$64c8: call nz,display_error_text_B075]
0:
	move.b	match_timer_C167,d0             	| [$64cb: ld   a,(match_timer_C167)]
	subq.b	#0x01,d0                        	| [$64ce: sub  $01]
*daa
	move.b	d0,match_timer_C167             	| [$64d1: ld   (match_timer_C167),a]
	move.b	unknown_C168,d0                 	| [$64d4: ld   a,(unknown_C168)]
*	subx.b	#0x00,d0                        	| [$64d7: sbc  a,$00]
*daa
	move.b	d0,unknown_C168                 	| [$64da: ld   (unknown_C168),a]
	cmp.b	#0x99,d0                         	| [$64dd: cp   $99]
	jeq	l_64e8                             	| [$64df: jp   z,$64E8]
	jbsr	l_64fb                            	| [$64e2: call $64FB]
	jra	l_64bd                             	| [$64e5: jp   $64BD]
l_64e8:
	clr.b	d0                               	| [$64e8: ld   a,$00]
	move.b	d0,match_timer_C167             	| [$64ea: ld   (match_timer_C167),a]
	move.b	#0x02,d0                        	| [$64ed: ld   a,$02]
	move.b	#0x08,d1                        	| [$64ef: ld   b,$08]
	jbsr	task_manipulation_B05D            	| [$64f1: call task_manipulation_B05D]
	tst.b	d0                               	| [$64f4: and  a]
	beq	0f
	jbsr	display_error_text_B075           	| [$64f5: call nz,display_error_text_B075]
0:
	jbsr	task_yield_B051                  	| [$64f8: call task_yield_B051]

l_64fb:
	move.b	#0x98,d3                        	| [$64fb: ld   d,$98]
	move.w	#0x05,d5                      	| [$64fd: ld   hl,$050F]
	move.w	#0x0F,d6                      	| [$64fd: ld   hl,$050F]
l_6500:
	move.b	d6,temp_numeric_buffer_CF00     	| [$6500: ld   (temp_numeric_buffer_CF00),hl]
	move.b	d5,temp_numeric_buffer_CF00+1     	| [$6500: ld   (temp_numeric_buffer_CF00),hl]
	st.b	d0                                	| [$6503: ld   a,$FF]
	move.b	d0,unknown_CF06                 	| [$6505: ld   (unknown_CF06),a]
	move.b	match_timer_C167,d0             	| [$6508: ld   a,(match_timer_C167)]
	move.b	d0,d1                           	| [$650b: ld   b,a]
	and.b	#0x0F,d0                         	| [$650c: and  $0F]
	move.b	d0,d6                           	| [$650e: ld   l,a]
	move.b	d3,d5                           	| [$650f: ld   h,d]
	move.b	d6,address_of_current_player_move_byte_CF04	| [$6510: ld   (address_of_current_player_move_byte_CF04),hl]
	move.b	d5,address_of_current_player_move_byte_CF04+1	| [$6510: ld   (address_of_current_player_move_byte_CF04),hl]
	move.b	d1,d0                           	| [$6513: ld   a,b]
	lsr.b	#4,d0                            	| [$6514: srl  a] * 4
	and.b	#0x0F,d0                         	| [$651c: and  $0F]
	move.b	d0,d6                           	| [$651e: ld   l,a]
	move.b	d6,unknown_CF02                 	| [$651f: ld   (unknown_CF02),hl]
	move.b	d5,unknown_CF02+1                 	| [$651f: ld   (unknown_CF02),hl]
	lea	temp_numeric_buffer_CF00,a0    	| [$6522: ld   hl,temp_numeric_buffer_CF00]
	jbsr	display_multicolor_text_B03C      	| [$6525: call display_multicolor_text_B03C]
	rts                                    	| [$6528: ret]


task_6529:
	clr.b	d0                               	| [$6529: xor  a]
	jbsr	suspend_this_task_B05A            	| [$652a: call suspend_this_task_B05A]
l_652d:
	move.w	d0,-(sp)                        	| [$652d: push af]
	move.b	d1,d0                           	| [$652e: ld   a,b]
	lea	unknown_C7F8(pc),a2                	| [$652f: ld   ix,unknown_C7F8]
	lea	task_struct_C140(pc),a3                	| [$6533: ld   iy,task_struct_C140]
	cmp.b	#0x02,d0                         	| [$6537: cp   $02]
	jeq	l_656c                             	| [$6539: jp   z,$656C]
	cmp.b	#0x07,d0                         	| [$653c: cp   $07]
	jeq	l_656c                             	| [$653e: jp   z,$656C]
	cmp.b	#0x17,d0                         	| [$6541: cp   $17]
	jeq	l_656c                             	| [$6543: jp   z,$656C]
	lea	player_1_struct_C240,a3        	| [$6546: ld   iy,player_1_struct_C240]
	cmp.b	#0x09,d0                         	| [$654a: cp   $09]
	jeq	l_656c                             	| [$654c: jp   z,$656C]
	cmp.b	#0x0A,d0                         	| [$654f: cp   $0A]
	jeq	l_656c                             	| [$6551: jp   z,$656C]
	lea	player_2_struct_C260,a3        	| [$6554: ld   iy,player_2_struct_C260]
	cmp.b	#0x0B,d0                         	| [$6558: cp   $0B]
	jeq	l_65e3                             	| [$655a: jp   z,$65E3]
	lea	task_struct_C380(pc),a3                	| [$655d: ld   iy,unknown_C380]
	cmp.b	#0x14,d0                         	| [$6561: cp   $14]
	jeq	l_65c2                             	| [$6563: jp   z,$65C2]
	jbsr	load_struct_C100_from_A_index_B04E                            	| [$6566: call $B04E]
	jra	l_65b7                             	| [$6569: jp   $65B7]
l_656c:
	move.b	(0x0a,a3),d0                    	| [$656c: ld   a,(iy+$0a)]
	sub.b	#0x46,d0                         	| [$656f: sub  $46]
	move.b	d0,(0x03,a2)                    	| [$6571: ld   (ix+$03),a]
l_6574:
	move.b	(0x09,a3),d0                    	| [$6574: ld   a,(iy+$09)]
	subq.b	#0x07,d0                        	| [$6577: sub  $07]
	move.b	d0,(0x00,a2)                    	| [$6579: ld   (ix+$00),a]
	move.b	#0x01,d0                        	| [$657c: ld   a,$01]
	move.b	d0,(0x02,a2)                    	| [$657e: ld   (ix+$02),a]
l_6581:
	lea	table_65FB(pc),a3                  	| [$6581: ld   iy,table_65FB]
	move.w	(sp)+,d0                        	| [$6585: pop  af]
											| [$6586: and  a]
	bne.b	0f
	jbsr	task_6529                            	| [$6587: call z,$6529]
0:
	cmp.b	#0x0D,d0                         	| [$658a: cp   $0D]
	bcs	0f
	jbsr	display_error_text_B075           	| [$658c: call nc,display_error_text_B075]
0:
	clr.w	d1                               	| [$6593: ld   b,$00]
	move.b	d0,d2                           	| [$658f: ld   c,a]
	add.b	d0,d0                            	| [$6590: add  a,a]
	add.b	d2,d0                            	| [$6591: add  a,c]
	move.b	d0,d1                           	| [$6592: ld   c,a]
	add.w	d1,a3                            	| [$6595: add  iy,bc]

	move.b	(0x00,a3),d0                    	| [$6597: ld   a,(iy+$00)]
	move.b	d0,(0x01,a2)                    	| [$659a: ld   (ix+$01),a]
	move.b	(0x01,a3),d0                    	| [$659d: ld   a,(iy+$01)]
	or.b	(0x02,a2),d0                      	| [$65a0: or   (ix+$02)]
	move.b	d0,(0x02,a2)                    	| [$65a3: ld   (ix+$02),a]
	move.b	#0x5A,d0                        	| [$65a6: ld   a,$5A]
	jbsr	suspend_this_task_B05A            	| [$65a8: call suspend_this_task_B05A]
	tst.b	d0                               	| [$65ab: and  a]
	jne	l_652d                             	| [$65ac: jp   nz,$652D]
	clr.b	d0                               	| [$65af: ld   a,$00]
	move.b	d0,unknown_C7F8                 	| [$65b1: ld   (unknown_C7F8),a]
	jra	task_6529                             	| [$65b4: jp   $6529]
l_65b7:
	move.b	(0x0a,a3),d0                    	| [$65b7: ld   a,(iy+$0a)]
	sub.b	#0x18,d0                         	| [$65ba: sub  $18]
	move.b	d0,(0x03,a2)                    	| [$65bc: ld   (ix+$03),a]
	jra	l_6574                             	| [$65bf: jp   $6574]
l_65c2:
	move.b	(0x0a,a3),d0                    	| [$65c2: ld   a,(iy+$0a)]
	subq.b	#0x03,d0                        	| [$65c5: sub  $03]
	move.b	d0,(0x03,a2)                    	| [$65c7: ld   (ix+$03),a]
	move.b	#0x06,d0                        	| [$65ca: ld   a,$06]
	btst.b	#7,(0x08,a3)                    	| [$65cc: bit  7,(iy+$08)]
	jeq	l_65d5                             	| [$65d0: jp   z,$65D5]
	move.b	#0xEC,d0                        	| [$65d3: ld   a,$EC]
l_65d5:
	add.b	(0x09,a3),d0                     	| [$65d5: add  a,(iy+$09)]
	move.b	d0,(0x00,a2)                    	| [$65d8: ld   (ix+$00),a]
	move.b	#0x02,d0                        	| [$65db: ld   a,$02]
	move.b	d0,(0x02,a2)                    	| [$65dd: ld   (ix+$02),a]
	jra	l_6581                             	| [$65e0: jp   $6581]
l_65e3:
	move.b	(0x0a,a3),d0                    	| [$65e3: ld   a,(iy+$0a)]
	sub.b	#0x46,d0                         	| [$65e6: sub  $46]
	move.b	d0,(0x03,a2)                    	| [$65e8: ld   (ix+$03),a]
	move.b	(0x09,a3),d0                    	| [$65eb: ld   a,(iy+$09)]
	subq.b	#0x07,d0                        	| [$65ee: sub  $07]
	move.b	d0,(0x00,a2)                    	| [$65f0: ld   (ix+$00),a]
	move.b	#0x02,d0                        	| [$65f3: ld   a,$02]
	move.b	d0,(0x02,a2)                    	| [$65f5: ld   (ix+$02),a]
	jra	l_6581                             	| [$65f8: jp   $6581]
table_65FB:
	dc.b	0x00,0x00,0x00,0xf1,0x30,0x01,0xf2,0x30 | table_65FB
	dc.b	0x02,0xf3,0x30,0x03,0xf4,0x30,0x04,0xf5 | $6603
	dc.b	0x30,0x05,0xf6,0x30,0x06,0xf7,0x30,0x07 | $660b
	dc.b	0xf8,0x30,0x08,0xf9,0x30,0x09,0xfa,0x30 | $6613
	dc.b	0x0a,0xe0,0x40,0x0b,0xe1,0x40,0x0c,0x67 | $661b
	dc.b	0x4d,0x7a,0x67,0xf5,0x69,0x67,0xee,0x69 | $6623
	dc.b	0x67,0x6b,0x6a,0x9a,0x00,0xc7 | $662b
	.align	2

l_7a89:
	lea	table_7B12(pc),a2                  	| [$7a89: ld   ix,table_7B12]
	move.b	background_and_state_bits_C911,d0	| [$7a8d: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$7a90: res  7,a]
	cmp.b	#0x50,d0                         	| [$7a92: cp   $50]
	jcs	l_7a98                             	| [$7a94: jp   c,$7A98]
	rts                                    	| [$7a97: ret]
l_7a98:
	and.b	#0x0F,d0                         	| [$7a98: and  $0F]
	add.b	d0,d0                            	| [$7a9a: add  a,a]
	add.b	d0,d0                            	| [$7a9b: add  a,a]
	clr.w	d1                               	| [$7a9d: ld   b,$00]
	move.b	d0,d1                           	| [$7a9c: ld   c,a]
	lea	table_7B12(pc),a2                  	| [$7a9f: ld   ix,table_7B12]
	add.w	d1,a2                            	| [$7aa3: add  ix,bc]
	move.b	(a2),d0                    	| [$7aa5: ld   a,(ix+$00)]
	and.b	(0x01,a2),d0                     	| [$7aa8: and  (ix+$01)]
	cmp.b	#0xFF,d0                         	| [$7aab: cp   $FF]
	bne.b	0f
	rts                                    	| [$7aad: ret  z]
0:
	move.b	(0x00,a2),d2                    	| [$7aae: ld   c,(ix+$00)]
	move.b	(0x01,a2),d1                    	| [$7ab1: ld   b,(ix+$01)]

	move.l	a2,-(sp)                        	| [$7ab4: push ix]
	jbsr	fill_video_and_attribute_memory_B030	| [$7ab6: call fill_video_and_attribute_memory_B030]
	move.l	(sp)+,a2                        	| [$7ab9: pop  ix]
	move.b	(0x02,a2),d6                    	| [$7abb: ld   l,(ix+$02)]
	move.b	(0x03,a2),d5                    	| [$7abe: ld   h,(ix+$03)]
l_7ac1:
	move.b	(a0)+,d0                         	| [$7ac1: ld   a,(hl)]
										| [$7ac2: inc  hl]
	and.b	(a0),d0                          	| [$7ac3: and  (hl)]
	cmp.b	#0xFF,d0                         	| [$7ac4: cp   $FF]
	bne.b	0f
	rts                                    	| [$7ac6: ret  z]
0:
	subq.b	#1,a0                           	| [$7ac7: dec  hl]

	move.l	a0,-(sp)                        	| [$7ac8: push hl]
	move.b	(a0)+,d4                         	| [$7ac9: ld   e,(hl)]
	                           	| [$7aca: inc  hl]
	move.b	(a0),d3                         	| [$7acb: ld   d,(hl)]
	exg	a1,a0                              	| [$7acc: ex   de,hl]
	jbsr	display_multicolor_text_B03C      	| [$7acd: call display_multicolor_text_B03C]
	move.l	(sp)+,a0                        	| [$7ad0: pop  hl]
	addq.w	#2,a0                           	| [$7ad1: inc  hl] * 2
	jra	l_7ac1                             	| [$7ad3: jp   $7AC1]
l_7ad6:
	move.b	unknown_C032,d0                 	| [$7ad6: ld   a,(unknown_C032)]
	btst.b	#1,d0                           	| [$7ad9: bit  1,a]
	bne.b	0f
	rts                                    	| [$7adb: ret  z]
0:
	move.b	background_and_state_bits_C911,d0	| [$7adc: ld   a,(background_and_state_bits_C911)]
	cmp.b	#0x54,d0                         	| [$7adf: cp   $54]
	jeq	l_7aee                             	| [$7ae1: jp   z,$7AEE]
	cmp.b	#0x53,d0                         	| [$7ae4: cp   $53]
	jeq	l_7aee                             	| [$7ae6: jp   z,$7AEE]
	jbsr	is_title_screen_demo_mode_B0B1    	| [$7ae9: call is_title_screen_demo_mode_B0B1]
	tst.b	d0                               	| [$7aec: and  a]
	bne.b	0f
	rts                                    	| [$7aed: ret  z]
0:
l_7aee:
	move.b	#0x14,d1
	move.b	#0x06,d2                      	| [$7aee: ld   bc,$1406]
	lea	two_p_color_text_7B02(pc),a0       	| [$7af1: ld   hl,two_p_color_text_7B02]
	movem.w	d1/d2,-(sp)                    	| [$7af4: push bc]
	jbsr	display_multicolor_text_B03C      	| [$7af5: call display_multicolor_text_B03C]
	movem.w	(sp)+,d1/d2                    	| [$7af8: pop  bc]
	lea	unknown_C0D0(pc),a0                	| [$7af9: ld   hl,unknown_C0D0]
	move.b	#0x98,d3                        	| [$7afc: ld   d,$98]
	jbsr	display_text_color_2_B03F                            	| [$7afe: call $B03F]
	rts                                    	| [$7b01: ret]
two_p_color_text_7B02:
	dc.b	0x14,0x05,0x02,0x98,0x1e,0x98,0x19,0x98 | two_p_color_text_7B02
	dc.b	0xfe,0x18,0x06,0x00,0x98,0x00,0x98,0xff | $7b0a
table_7B12:                                         
	dc.b	0x3f,0x90,0x4a,0x7b,0x3d,0xa0,0x50,0x7b | table_7B12
	dc.b	0x31,0xa4,0x56,0x7b,0x3c,0xf8,0x5c,0x7b | $7b1a
	dc.b	0x3c,0xf8,0x80,0x7b,0x3f,0xd8,0x62,0x7b | $7b22
	dc.b	0x3d,0x98,0x68,0x7b,0x3e,0xf8,0x6e,0x7b | $7b2a
	dc.b	0x3c,0xf8,0x74,0x7b,0x3e,0xf8,0x7a,0x7b | $7b32
	dc.b	0x3d,0xc6,0x86,0x7b,0x3d,0xf0,0x8c,0x7b | $7b3a
	dc.b	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff | $7b42
	dc.b	0x16,0x81,0x36,0x7d,0xff,0xff,0xae,0x7e | $7b4a
	dc.b	0x36,0x7d,0xff,0xff,0xe9,0x83,0x36,0x7d | $7b52
	dc.b	0xff,0xff,0x4a,0x87,0x36,0x7d,0xff,0xff | $7b5a
	dc.b	0xf0,0x89,0x36,0x7d,0xff,0xff,0x78,0x8c | $7b62
	dc.b	0x36,0x7d,0xff,0xff,0x49,0x8e,0x36,0x7d | $7b6a
	dc.b	0xff,0xff,0x81,0x91,0x36,0x7d,0xff,0xff | $7b72
	dc.b	0x4b,0x94,0x36,0x7d,0xff,0xff,0x1a,0x97 | $7b7a
	dc.b	0x36,0x7d,0xff,0xff,0x9f,0x99,0x36,0x7d | $7b82
	dc.b	0xff,0xff,0xb8,0x9c,0x36,0x7d,0xff,0xff | $7b8a
	
display_start_message_7b92:
	move.b	nb_credits_minus_one_C024,d0    	| [$7b92: ld   a,(nb_credits_minus_one_C024)]
	lea	start_1P_message_7BA6(pc),a0       	| [$7b95: ld   hl,start_1P_message_7BA6]
	cmp.b	#0x00,d0                         	| [$7b98: cp   $00]
	jeq	l_7ba0                             	| [$7b9a: jp   z,$7BA0]
	lea	start_2P_message_7BCA(pc),a0       	| [$7b9d: ld   hl,start_2P_message_7BCA]
l_7ba0:
	move.b	#0x98,d3                        	| [$7ba0: ld   d,$98]
	jbsr	display_text_B039                 	| [$7ba2: call display_text_B039]
	rts                                    	| [$7ba5: ret]
start_1P_message_7BA6:
	dc.b	0x05,0x0a,0x19,0x1b,0x0e,0x1c,0x1c,0x3c | table_7BA6
	dc.b	0x01,0x19,0x3c,0x0b,0x1e,0x1d,0x1d,0x18 | $7bae
	dc.b	0x17,0x3c,0x0f,0x18,0x1b,0xfe,0x09,0x0c | $7bb6
	dc.b	0x1c,0x12,0x17,0x10,0x15,0x0e,0x3c,0x19 | $7bbe
	dc.b	0x15,0x0a,0x22,0xff | $7bc6
start_2P_message_7BCA:
	dc.b	0x05,0x0a,0x19,0x1b,0x0e,0x1c,0x1c,0x3c | table_7BCA
	dc.b	0x01,0x19,0x3c,0x0b,0x1e,0x1d,0x1d,0x18 | $7bd2
	dc.b	0x17,0x3c,0x0f,0x18,0x1b,0xfe,0x09,0x0c | $7bda
	dc.b	0x1c,0x12,0x17,0x10,0x15,0x0e,0x3c,0x19 | $7be2
	dc.b	0x15,0x0a,0x22,0xfe,0x05,0x0e,0x19,0x1b | $7bea
	dc.b	0x0e,0x1c,0x1c,0x3c,0x02,0x19,0x3c,0x0b | $7bf2
	dc.b	0x1e,0x1d,0x1d,0x18,0x17,0x3c,0x0f,0x18 | $7bfa
	dc.b	0x1b,0xfe,0x04,0x10,0x0f,0x12,0x10,0x11 | $7c02
	dc.b	0x1d,0x3c,0x0b,0x0e,0x1d,0x20,0x0e,0x0e | $7c0a
	dc.b	0x17,0x3c,0x19,0x15,0x0a,0x22,0x0e,0x1b | $7c12
	dc.b	0x1c,0xff | $7c1a

display_credits_7C1C:
	lea	credit_text_7C54(pc),a0            	| [$7c1c: ld   hl,credit_text_7C54]
	move.b	#0x98,d3                        	| [$7c1f: ld   d,$98]
	jbsr	display_text_B039                 	| [$7c21: call display_text_B039]
											| [$7c24: ld   hl,$1F1C]
	move.w	#0x1C1F,temp_numeric_buffer_CF00     	| [$7c27: ld   (temp_numeric_buffer_CF00),hl]
* at least during "press 1P button" screen
* check number of credits, maybe to display them
* as there's a "daa" instruction (bcd conversion)
	move.b	nb_credits_minus_one_C024,d0    	| [$7c2a: ld   a,(nb_credits_minus_one_C024)]
	addq.b	#0x01,d0                        	| [$7c2d: add  a,$01]
**daa
	move.b	d0,d1                           	| [$7c30: ld   b,a]
	lea	temp_numeric_buffer_CF00(pc),a2    	| [$7c31: ld   ix,temp_numeric_buffer_CF00]
	and.b	#0x0F,d0                         	| [$7c35: and  $0F]
	move.b	d0,(0x03,a2)                    	| [$7c37: ld   (ix+$03),a]
	move.b	d1,d0                           	| [$7c3a: ld   a,b]
	lsr.b	#4,d0                            	| [$7c3b: srl  a] * 4
	move.b	d0,(0x02,a2)                    	| [$7c43: ld   (ix+$02),a]
	st.b	d0                                	| [$7c46: ld   a,$FF]
	move.b	d0,(0x04,a2)                    	| [$7c48: ld   (ix+$04),a]
	lea	temp_numeric_buffer_CF00(pc),a0    	| [$7c4b: ld   hl,temp_numeric_buffer_CF00]
	move.b	#0x98,d3                        	| [$7c4e: ld   d,$98]
	jbsr	display_text_B039                 	| [$7c50: call display_text_B039]
	rts                                    	| [$7c53: ret]
credit_text_7C54:
	dc.b	0x15,0x1f,0x0c,0x1b,0x0e,0x0d,0x12,0x1d | credit_7C54
	dc.b	0xff | $7c5c
	.align	2
	
task_7c5d:
	move.b	background_and_state_bits_C911,d0	| [$7c5d: ld   a,(background_and_state_bits_C911)]
	cmp.b	#0x54,d0                         	| [$7c60: cp   $54]
	move.b	#0x02,d0                        	| [$7c62: ld   a,$02]
	jeq	l_7c78                             	| [$7c64: jp   z,$7C78]
	move.b	background_and_state_bits_C911,d0	| [$7c67: ld   a,(background_and_state_bits_C911)]
	cmp.b	#0x53,d0                         	| [$7c6a: cp   $53]
	move.b	#0x02,d0                        	| [$7c6c: ld   a,$02]
	jeq	l_7c78                             	| [$7c6e: jp   z,$7C78]
	jbsr	is_title_screen_demo_mode_B0B1    	| [$7c71: call is_title_screen_demo_mode_B0B1]
	tst.b	d0                               	| [$7c74: and  a]
	bne	0f
	jbsr	task_yield_B051                   	| [$7c75: call z,task_yield_B051]
0:
l_7c78:
	subq.b	#1,d0                           	| [$7c78: dec  a]
	add.b	d0,d0                            	| [$7c79: add  a,a]
	add.b	d0,d0                            	| [$7c79: add  a,a]
	clr.w	d1                               	| [$7c7b: ld   b,$00]
	move.b	d0,d1                           	| [$7c7a: ld   c,a]
	lea	table_7D06(pc),a2                  	| [$7c7d: ld   ix,table_7D06]
	add.w	d1,a2                            	| [$7c81: add  ix,bc]

	move.l	(0x00,a2),a0                    	| [$7c83: ld   l,(ix+$00)]
										| [$7c86: ld   h,(ix+$01)]

	move.l	a0,-(sp)                        	| [$7c89: push hl]
											| [$7c8a: ld   bc,$0004] 4
	addq.w	#8,a0                            	| [$7c8d: add  hl,bc]

	move.l	a0,a3                        	| [$7c8e: push hl]
										| [$7c8f: pop  iy]
	move.l	(sp)+,a0                        	| [$7c91: pop  hl]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$7c92: ld   a,(players_type_human_or_cpu_flags_C02D)]
	btst.b	#2,d0                           	| [$7c95: bit  2,a]
	jne	l_7c9e                             	| [$7c97: jp   nz,$7C9E]
											| [$7c9a: ld   bc,$0004] 4
	addq.w	#8,a0                            	| [$7c9d: add  hl,bc]
  
l_7c9e:

	move.l	a0,a2                        	| [$7c9e: push hl]
	                        	| [$7c9f: pop  ix]
l_7ca1:

	move.l	a2,-(sp)                        	| [$7ca1: push ix]

	move.l	a3,-(sp)                        	| [$7ca3: push iy]
	move.b	(0x00,a2),d6                    	| [$7ca5: ld   l,(ix+$00)]
	move.b	(0x01,a2),d5                    	| [$7ca8: ld   h,(ix+$01)]
	jbsr	display_multicolor_text_B03C      	| [$7cab: call display_multicolor_text_B03C]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$7cae: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x0C,d0                         	| [$7cb1: and  $0C]
	cmp.b	#0x0C,d0                         	| [$7cb3: cp   $0C]
	jne	l_7cc1                             	| [$7cb5: jp   nz,$7CC1]
	move.b	(0x00,a3),d6                    	| [$7cb8: ld   l,(iy+$00)]
	move.b	(0x01,a3),d5                    	| [$7cbb: ld   h,(iy+$01)]
	jbsr	display_multicolor_text_B03C      	| [$7cbe: call display_multicolor_text_B03C]
l_7cc1:
	move.b	#0x28,d0                        	| [$7cc1: ld   a,$28]
	jbsr	suspend_this_task_B05A            	| [$7cc3: call suspend_this_task_B05A]
	move.l	(sp)+,a3                        	| [$7cc6: pop  iy]
	move.l	(sp)+,a2                        	| [$7cc8: pop  ix]
	tst.b	d0                               	| [$7cca: and  a]
	jne	l_7cfa                             	| [$7ccb: jp   nz,$7CFA]

	move.l	a2,-(sp)                        	| [$7cce: push ix]

	move.l	a3,-(sp)                        	| [$7cd0: push iy]
	move.b	(0x02,a2),d6                    	| [$7cd2: ld   l,(ix+$02)]
	move.b	(0x03,a2),d5                    	| [$7cd5: ld   h,(ix+$03)]
	jbsr	display_multicolor_text_B03C      	| [$7cd8: call display_multicolor_text_B03C]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$7cdb: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x0C,d0                         	| [$7cde: and  $0C]
	cmp.b	#0x0C,d0                         	| [$7ce0: cp   $0C]
	jne	l_7cee                             	| [$7ce2: jp   nz,$7CEE]
	move.b	(0x02,a3),d6                    	| [$7ce5: ld   l,(iy+$02)]
	move.b	(0x03,a3),d5                    	| [$7ce8: ld   h,(iy+$03)]
	jbsr	display_multicolor_text_B03C      	| [$7ceb: call display_multicolor_text_B03C]
l_7cee:
	move.b	#0x28,d0                        	| [$7cee: ld   a,$28]
	jbsr	suspend_this_task_B05A            	| [$7cf0: call suspend_this_task_B05A]
	move.l	(sp)+,a3                        	| [$7cf3: pop  iy]
	move.l	(sp)+,a2                        	| [$7cf5: pop  ix]
	jra	l_7ca1                             	| [$7cf7: jp   $7CA1]
l_7cfa:

	move.l	a2,-(sp)                        	| [$7cfa: push ix]
	clr.b	d0                               	| [$7cfc: ld   a,$00]
	jbsr	suspend_this_task_B05A            	| [$7cfe: call suspend_this_task_B05A]
	move.l	(sp)+,a2                        	| [$7d01: pop  ix]
	jra	l_7ca1                             	| [$7d03: jp   $7CA1]
table_7D06:
	.long	table_7d0a                       	|  $7d06
	.long	table_7d0a                       	|  $7d08
table_7d0a:
	.long	table_7d12                       	|  $7d0a
	.long	table_7d1b                       	|  $7d0c
	.long	table_7d24                       	|  $7d0e
	.long	table_7d2d                       	|  $7d10
table_7d12:
 * 1UP
	dc.b	0x14,0x03,0x01,0x98,0x1e,0x98,0x19,0x98 | $7d12
	dc.b	0xff | $7d1a
table_7d1b:
	dc.b	0x14,0x03,0x3c,0x98,0x3c,0x98,0x3c,0x98 | $7d1b
	dc.b	0xff | $7d23
table_7d24:
 * 2UP
	dc.b	0x14,0x05,0x02,0x98,0x1e,0x98,0x19,0x98 | $7d24
	dc.b	0xff | $7d2c
table_7d2d:
	dc.b	0x14,0x05,0x3c,0x98,0x3c,0x98,0x3c,0x98 | $7d2d
	dc.b	0xff | $7d35
table_7D36:
	dc.b	0x05,0x00,0xc6,0x90,0xc7,0x90,0xc8,0x90 | table_7D36
	dc.b	0xc8,0x90,0xc8,0x90,0xc8,0x90,0xc8,0x90 | $7d3e
	dc.b	0xc9,0x90,0xca,0x90,0x1b,0x91,0x1b,0x91 | $7d46
	dc.b	0x1b,0x91,0x1b,0x91,0xcb,0x90,0xc8,0x90 | $7d4e
	dc.b	0xc8,0x90,0xc8,0x90,0xc8,0x90,0xc8,0x90 | $7d56
	dc.b	0xc8,0x90,0xc9,0x90,0xcc,0x90,0xfe,0x05 | $7d5e
	dc.b	0x01,0xcd,0x90,0xce,0x98,0xcf,0x98,0x3c | $7d66
	dc.b	0x98,0x3c,0x98,0x3c,0x98,0xce,0x90,0xcf | $7d6e
	dc.b	0x90,0xd0,0x90,0xd1,0x90,0xd2,0x90,0xd6 | $7d76
	dc.b	0x90,0xd6,0x90,0xe4,0x90,0x11,0x98,0x12 | $7d7e
	dc.b	0x98,0x1c,0x98,0x0c,0x98,0x18,0x98,0x1b | $7d86
	dc.b	0x98,0x0e,0x98,0xe5,0x90,0xfe,0x05,0x02 | $7d8e
	dc.b	0xcd,0x90,0xd3,0x10,0xd3,0x10,0xd4,0x98 | $7d96
	dc.b	0xd5,0x98,0xb3,0x9a,0xd3,0x10,0xd3,0x10 | $7d9e
	dc.b	0xd0,0x90,0xd6,0x90,0xd6,0x90,0xd6,0x90 | $7da6
	dc.b	0xd6,0x90,0xe4,0x90,0x3c,0x98,0x3c,0x98 | $7dae
	dc.b	0x02,0x98,0x00,0x98,0x00,0x98,0x00,0x98 | $7db6
	dc.b	0x00,0x98,0xe5,0x90,0xfe,0x05,0x03,0xcd | $7dbe
	dc.b	0x90,0x3c,0x98,0xd3,0x10,0xd8,0x98,0xd9 | $7dc6
	dc.b	0x98,0xda,0x98,0xd3,0x10,0x3c,0x98,0xd0 | $7dce
	dc.b	0x90,0x3c,0x98,0x3c,0x98,0x3c,0x98,0x3c | $7dd6
	dc.b	0x98,0xe4,0x90,0x3c,0x98,0x01,0x98,0x1e | $7dde
	dc.b	0x98,0x19,0x98,0x3c,0x98,0x3c,0x98,0x3c | $7de6
	dc.b	0x98,0xe5,0x90,0xfe,0x05,0x04,0xdb,0x90 | $7dee
	dc.b	0xdc,0x90,0xdd,0x90,0xdd,0x90,0xdd,0x90 | $7df6
	dc.b	0xdd,0x90,0xdd,0x90,0xde,0x90,0xdf,0x90 | $7dfe
	dc.b	0x1d,0x20,0x12,0x20,0x16,0x20,0x0e,0x20 | $7e06
	dc.b	0xe4,0x90,0x3c,0x98,0x3c,0x98,0x3c,0x98 | $7e0e
	dc.b	0x3c,0x98,0x3c,0x98,0x00,0x98,0x00,0x98 | $7e16
	dc.b	0xe5,0x90,0xfe,0x05,0x05,0x38,0x90,0x3c | $7e1e
	dc.b	0x98,0x3c,0x98,0x3c,0x98,0x3c,0x98,0x3c | $7e26
	dc.b	0x98,0x3c,0x98,0x3c,0x98,0x3c,0x98,0x3c | $7e2e
	dc.b	0x20,0x03,0x98,0x00,0x98,0x3c,0x20,0xe4 | $7e36
	dc.b	0x90,0x3c,0x98,0x3c,0x98,0x3c,0x98,0x3c | $7e3e
	dc.b	0x98,0x3c,0x98,0x3c,0x98,0x3c,0x98,0xe5 | $7e46
	dc.b	0x90,0xfe,0x05,0x06,0x38,0x90,0x3c,0x98 | $7e4e
	dc.b	0x3c,0x98,0x3c,0x98,0x3c,0x98,0x3c,0x98 | $7e56
	dc.b	0x3c,0x98,0x3c,0x98,0x3c,0x98,0x3c,0x20 | $7e5e
	dc.b	0x3c,0x20,0x3c,0x20,0x3c,0x20,0xe4,0x90 | $7e66
	dc.b	0x3c,0x98,0x3c,0x98,0x3c,0x98,0x3c,0x98 | $7e6e
	dc.b	0x3c,0x98,0x3c,0x98,0x3c,0x98,0xe5,0x90 | $7e76
	dc.b	0xfe,0x05,0x07,0x39,0x90,0x3a,0x90,0x3a | $7e7e
	dc.b	0x90,0x3a,0x90,0x3a,0x90,0x3a,0x90,0x3a | $7e86
	dc.b	0x90,0x3a,0x90,0x3a,0x90,0x4a,0x90,0x4a | $7e8e
	dc.b	0x90,0x4a,0x90,0x4a,0x90,0xeb,0x90,0xec | $7e96
	dc.b	0x90,0xec,0x90,0xec,0x90,0xec,0x90,0xec | $7e9e
	dc.b	0x90,0xec,0x90,0xed,0x90,0xee,0x90,0xff | $7ea6
	dc.b	0x02,0x00,0x3d,0x28,0x3d,0x28,0x3d,0x28 | $7eae
	dc.b	0xfe,0x1b,0x00,0x3d,0x28,0x3d,0x28,0x3d | $7eb6
	dc.b	0x28,0xfe,0x02,0x01,0x3d,0x28,0x3d,0x28 | $7ebe
	dc.b	0x3d,0x28,0xfe,0x1b,0x01,0x3d,0x28,0x3d | $7ec6
	dc.b	0x28,0x3d,0x28,0xfe,0x02,0x02,0x3f,0x5b | $7ece
	dc.b	0x3f,0x5b,0x3f,0x5b,0xfe,0x1b,0x02,0x3f | $7ed6
	dc.b	0x5b,0x3f,0x5b,0x3f,0x5b,0xfe,0x02,0x03 | $7ede
	dc.b	0x40,0x5b,0x40,0x5b,0x40,0x5b,0xfe,0x1b | $7ee6
	dc.b	0x03,0x40,0x5b,0x40,0x5b,0x40,0x5b,0xfe | $7eee
	dc.b	0x02,0x04,0x41,0x03,0x42,0x03,0x41,0x03 | $7ef6
	dc.b	0xfe,0x1b,0x04,0x42,0x03,0x41,0x03,0x42 | $7efe
	dc.b	0x03,0xfe,0x02,0x05,0x41,0x03,0x42,0x03 | $7f06
	dc.b	0x41,0x03,0xfe,0x1b,0x05,0x42,0x03,0x41 | $7f0e
	dc.b	0x03,0x42,0x03,0xfe,0x02,0x06,0x41,0x03 | $7f16
	dc.b	0x42,0x03,0x41,0x03,0xfe,0x1b,0x06,0x42 | $7f1e
	dc.b	0x03,0x41,0x03,0x42,0x03,0xfe,0x02,0x07 | $7f26
	dc.b	0x41,0x03,0x42,0x03,0x41,0x03,0xfe,0x1b | $7f2e
	dc.b	0x07,0x42,0x03,0x41,0x03,0x42,0x03,0xfe | $7f36
	dc.b	0x02,0x08,0x41,0x03,0x42,0x03,0x41,0x03 | $7f3e
	dc.b	0x42,0x03,0x41,0x03,0x42,0x03,0x41,0x03 | $7f46
	dc.b	0x41,0x03,0x3c,0x00,0x3c,0x00,0x3c,0x00 | $7f4e
	dc.b	0x3c,0x03,0x43,0x03,0x42,0x03,0x41,0x03 | $7f56
	dc.b	0x42,0x03,0x41,0x03,0x42,0x03,0x41,0x03 | $7f5e
	dc.b	0x42,0x03,0x41,0x03,0x42,0x03,0x41,0x03 | $7f66
	dc.b	0x42,0x03,0x41,0x03,0x42,0x03,0x41,0x03 | $7f6e
	dc.b	0x42,0x03,0xfe,0x02,0x09,0x41,0x03,0x42 | $7f76
	dc.b	0x03,0x41,0x03,0x42,0x03,0x41,0x03,0x42 | $7f7e
	dc.b	0x03,0x41,0x03,0x41,0x03,0x3c,0x00,0x3c | $7f86
	dc.b	0x00,0x3c,0x00,0x3c,0x03,0x43,0x03,0x42 | $7f8e
	dc.b	0x03,0x41,0x03,0x42,0x03,0x41,0x03,0x42 | $7f96
	dc.b	0x03,0x41,0x03,0x42,0x03,0x41,0x03,0x42 | $7f9e
	dc.b	0x03,0x41,0x03,0x42,0x03,0x41,0x03,0x42 | $7fa6
	dc.b	0x03,0x41,0x03,0x42,0x03,0xfe,0x02,0x0a | $7fae
	dc.b	0x41,0x03,0x42,0x03,0x41,0x03,0x42,0x03 | $7fb6
	dc.b	0x41,0x03,0x42,0x03,0x41,0x03,0x41,0x03 | $7fbe
	dc.b	0x3c,0x00,0x3c,0x00,0x3c,0x00,0x3c,0x03 | $7fc6
	dc.b	0x43,0x03,0x42,0x03,0x41,0x03,0x42,0x03 | $7fce
	dc.b	0x41,0x03,0x42,0x03,0x41,0x03,0x42,0x03 | $7fd6
	dc.b	0x41,0x03,0x42,0x03,0x41,0x03,0x42,0x03 | $7fde
	dc.b	0x41,0x03,0x42,0x03,0x41,0x03,0x42,0x03 | $7fe6
	dc.b	0xfe,0x02,0x0b,0x41,0x03,0x42,0x03,0x41 | $7fee
	dc.b	0x03,0x42,0x03,0x41,0x03,0x42,0x03,0x41 | $7ff6
	dc.b	0x03,0x41,0x03,0x3c,0x00,0x3c,0x00,0x3c | $7ffe
	dc.b	0x00,0x3c,0x03,0x43,0x03,0x42,0x03,0x41 | $8006
	dc.b	0x03,0x42,0x03,0x41,0x03,0x42,0x03,0x41 | $800e
	dc.b	0x03,0x42,0x03,0x41,0x03,0x42,0x03,0x41 | $8016
	dc.b	0x03,0x42,0x03,0x41,0x03,0x42,0x03,0x41 | $801e
	dc.b	0x03,0x42,0x03,0xfe,0x02,0x0c,0x3d,0x5b | $8026
	dc.b	0x3f,0x5b,0x3f,0x5b,0x3f,0x5b,0x3f,0x5b | $802e
	dc.b	0x3f,0x5b,0x3f,0x5b,0x3f,0x5b,0x3c,0x00 | $8036
	dc.b	0x3c,0x00,0x3c,0x00,0x3c,0x03,0x3d,0x5b | $803e
	dc.b	0x3f,0x5b,0x3f,0x5b,0x3f,0x5b,0x3f,0x5b | $8046
	dc.b	0x3f,0x5b,0x3f,0x5b,0x3f,0x5b,0x3f,0x5b | $804e
	dc.b	0x3f,0x5b,0x3d,0x5b,0x3f,0x5b,0x3f,0x5b | $8056
	dc.b	0x3f,0x5b,0x3f,0x5b,0x3f,0x5b,0xfe,0x02 | $805e
	dc.b	0x0d,0x3e,0x5b,0x40,0x5b,0x40,0x5b,0x40 | $8066
	dc.b	0x5b,0x40,0x5b,0x40,0x5b,0x40,0x5b,0x40 | $806e
	dc.b	0x5b,0x3c,0x00,0x3c,0x00,0x3c,0x00,0x3c | $8076
	dc.b	0x03,0x3e,0x5b,0x40,0x5b,0x40,0x5b,0x40 | $807e
	dc.b	0x5b,0x40,0x5b,0x40,0x5b,0x40,0x5b,0x40 | $8086
	dc.b	0x5b,0x40,0x5b,0x40,0x5b,0x3e,0x5b,0x40 | $808e
	dc.b	0x5b,0x40,0x5b,0x40,0x5b,0x40,0x5b,0x40 | $8096
	dc.b	0x5b,0xfe,0x02,0x0e,0x3d,0x28,0x3d,0x28 | $809e
	dc.b	0x3d,0x28,0x3d,0x28,0x3d,0x28,0x3d,0x28 | $80a6
	dc.b	0x3d,0x28,0x3d,0x28,0x3a,0x2b,0x3a,0x2b | $80ae
	dc.b	0x3a,0x2b,0x3b,0x2b,0x3d,0x28,0x3d,0x28 | $80b6
	dc.b	0x3d,0x28,0x3d,0x28,0x3d,0x28,0x3d,0x28 | $80be
	dc.b	0x3d,0x28,0x3d,0x28,0x3d,0x28,0x3d,0x28 | $80c6
	dc.b	0x3d,0x28,0x3d,0x28,0x3d,0x28,0x3d,0x28 | $80ce
	dc.b	0x3d,0x28,0x3d,0x28,0xfe,0x02,0x0f,0x3d | $80d6
	dc.b	0x28,0x3d,0x28,0x3d,0x28,0x3d,0x28,0x3d | $80de
	dc.b	0x28,0x3d,0x28,0x3d,0x28,0x3d,0x28,0x3d | $80e6
	dc.b	0x28,0x3d,0x28,0x3d,0x28,0x3d,0x28,0x3d | $80ee
	dc.b	0x28,0x3d,0x28,0x3d,0x28,0x3d,0x28,0x3d | $80f6
	dc.b	0x28,0x3d,0x28,0x3d,0x28,0x3d,0x28,0x3d | $80fe
	dc.b	0x28,0x3d,0x28,0x3d,0x28,0x3d,0x28,0x3d | $8106
	dc.b	0x28,0x3d,0x28,0x3d,0x28,0x3d,0x28,0xff | $810e
	dc.b	0x05,0x09,0x63,0x8b,0x3f,0x88,0x64,0x8b | $8116
	dc.b	0xfe,0x03,0x0a,0x63,0x8b,0x3f,0x88,0x3f | $811e
	dc.b	0x88,0x3f,0x88,0x3f,0x88,0x3f,0x88,0x64 | $8126
	dc.b	0x8b,0xfe,0x02,0x0b,0x63,0x8b,0x3f,0x88 | $812e
	dc.b	0x3f,0x88,0x3f,0x88,0x3f,0x88,0x3f,0x88 | $8136
	dc.b	0x3f,0x88,0x3f,0x88,0x3f,0x88,0x64,0x8b | $813e
	dc.b	0xfe,0x02,0x0c,0x65,0x8b,0x3f,0x88,0x3f | $8146
	dc.b	0x88,0x3f,0x88,0x3f,0x88,0x3f,0x88,0x3f | $814e
	dc.b	0x88,0x3f,0x88,0x3f,0x88,0x66,0x8b,0xfe | $8156
	dc.b	0x04,0x0d,0x65,0x8b,0x3f,0x88,0x3f,0x88 | $815e
	dc.b	0x66,0x8b,0x65,0x8b,0x3f,0x88,0x66,0x8b | $8166
	dc.b	0xfe,0x0e,0x0c,0x63,0x8b,0x3f,0x88,0x3f | $816e
	dc.b	0x88,0x64,0x8b,0xfe,0x0d,0x0d,0x63,0x8b | $8176
	dc.b	0x3f,0x88,0x3f,0x88,0x3f,0x88,0x66,0x8b | $817e
	dc.b	0xfe,0x0d,0x0e,0x65,0x8b,0x66,0x8b,0x65 | $8186
	dc.b	0x8b,0x66,0x8b,0xfe,0x16,0x0d,0x5b,0xdb | $818e
	dc.b	0x5b,0xdb,0x5b,0xdb,0x5b,0xdb,0x5b,0xdb | $8196
	dc.b	0x5b,0xdb,0x5b,0xdb,0x5b,0xdb,0xfe,0x15 | $819e
	dc.b	0x0e,0x50,0xdb,0x5c,0x7b,0x4f,0x7b,0x5c | $81a6
	dc.b	0x7b,0x4f,0x7b,0x4f,0x7b,0x4f,0x7b,0x5c | $81ae
	dc.b	0x7b,0x4f,0x7b,0xfe,0x14,0x0f,0x51,0xdb | $81b6
	dc.b	0x4f,0x7b,0x5c,0x7b,0x4f,0x7b,0x4f,0x7b | $81be
	dc.b	0x5c,0x7b,0x4f,0x7b,0x4f,0x7b,0x4f,0x7b | $81c6
	dc.b	0x5c,0x7b,0xfe,0x15,0x10,0x52,0xdb,0x4f | $81ce
	dc.b	0x7b,0x55,0xa3,0x57,0xa3,0x4f,0x7b,0x5c | $81d6
	dc.b	0x7b,0x55,0xa3,0x57,0xa3,0x55,0xa3,0xfe | $81de
	dc.b	0x16,0x11,0x52,0xdb,0x69,0x9b,0x62,0x9b | $81e6
	dc.b	0x57,0xa3,0x55,0xa3,0x3f,0xa0,0x61,0x9b | $81ee
	dc.b	0x62,0x9b,0xfe,0x17,0x12,0x67,0x63,0x69 | $81f6
	dc.b	0x9b,0x3f,0xa0,0x3f,0xa0,0x62,0x9b,0x61 | $81fe
	dc.b	0x9b,0x3f,0xa0,0xfe,0x18,0x13,0x5d,0x63 | $8206
	dc.b	0x69,0x9b,0x61,0x9b,0x3f,0xa0,0x62,0x9b | $820e
	dc.b	0x59,0xa3,0xfe,0x18,0x14,0x5e,0x63,0x6a | $8216
	dc.b	0x9b,0x61,0x9b,0x3f,0xa0,0x58,0xa3,0x5c | $821e
	dc.b	0x7b,0xfe,0x18,0x15,0x5f,0x63,0x69,0x9b | $8226
	dc.b	0x59,0xa3,0x5a,0xa3,0x4f,0x7b,0x5c,0x7b | $822e
	dc.b	0xfe,0x18,0x16,0x60,0x63,0x58,0x7b,0x4f | $8236
	dc.b	0x7b,0x5c,0x7b,0x5c,0x7b,0x4f,0x7b,0xfe | $823e
	dc.b	0x18,0x17,0x5d,0x63,0x57,0x7b,0x5c,0x7b | $8246
	dc.b	0x4f,0x7b,0x4f,0x7b,0x5c,0x7b,0xfe,0x02 | $824e
	dc.b	0x16,0x5b,0xdb,0x5b,0xdb,0xfe,0x02,0x17 | $8256
	dc.b	0x4f,0x7b,0x4f,0x7b,0x53,0xdb,0xfe,0x02 | $825e
	dc.b	0x18,0x44,0x7b,0x4d,0x9b,0x4e,0x9b,0x3f | $8266
	dc.b	0x98,0x3f,0x98,0x4e,0x9b,0x4e,0x9b,0x3f | $826e
	dc.b	0x98,0x4e,0x9b,0x4e,0x9b,0x3f,0x98,0x4e | $8276
	dc.b	0x9b,0x3f,0x98,0x4d,0x9b,0x3f,0x98,0x3f | $827e
	dc.b	0x98,0x4e,0x9b,0x4e,0x9b,0x4e,0x9b,0x3f | $8286
	dc.b	0x98,0x3f,0x98,0x4e,0x9b,0x3f,0x98,0x4e | $828e
	dc.b	0x9b,0x3f,0x98,0x4e,0x9b,0x4e,0x9b,0x46 | $8296
	dc.b	0x7b,0xfe,0x02,0x19,0x4c,0x9b,0x4d,0x9b | $829e
	dc.b	0x4c,0x9b,0x4d,0x9b,0x4c,0x9b,0x4d,0x9b | $82a6
	dc.b	0x4c,0x9b,0x4d,0x9b,0x4c,0x9b,0x4c,0x9b | $82ae
	dc.b	0x4d,0x9b,0x4d,0x9b,0x4c,0x9b,0x4d,0x9b | $82b6
	dc.b	0x4c,0x9b,0x4d,0x9b,0x4d,0x9b,0x4d,0x9b | $82be
	dc.b	0x4d,0x9b,0x4d,0x9b,0x4c,0x9b,0x4c,0x9b | $82c6
	dc.b	0x4d,0x9b,0x4d,0x9b,0x4c,0x9b,0x4d,0x9b | $82ce
	dc.b	0x4c,0x9b,0x4c,0x9b,0xfe,0x02,0x1a,0x4a | $82d6
	dc.b	0x9b,0x4b,0x9b,0x4a,0x9b,0x4b,0x9b,0x4a | $82de
	dc.b	0x9b,0x4b,0x9b,0x4a,0x9b,0x4a,0x9b,0x4a | $82e6
	dc.b	0x9b,0x4b,0x9b,0x4b,0x9b,0x4b,0x9b,0x4a | $82ee
	dc.b	0x9b,0x4b,0x9b,0x4b,0x9b,0x4a,0x9b,0x4a | $82f6
	dc.b	0x9b,0x4b,0x9b,0x4b,0x9b,0x4a,0x9b,0x4b | $82fe
	dc.b	0x9b,0x4a,0x9b,0x4b,0x9b,0x4b,0x9b,0x4b | $8306
	dc.b	0x9b,0x4a,0x9b,0x4a,0x9b,0x4b,0x9b,0xfe | $830e
	dc.b	0x02,0x1b,0x45,0x53,0x48,0x9b,0x49,0x9b | $8316
	dc.b	0x49,0x9b,0x49,0x9b,0x48,0x9b,0x48,0x9b | $831e
	dc.b	0x48,0x9b,0x49,0x9b,0x49,0x9b,0x48,0x9b | $8326
	dc.b	0x49,0x9b,0x48,0x9b,0x49,0x9b,0x49,0x9b | $832e
	dc.b	0x49,0x9b,0x48,0x9b,0x48,0x9b,0x49,0x9b | $8336
	dc.b	0x48,0x9b,0x49,0x9b,0x48,0x9b,0x48,0x9b | $833e
	dc.b	0x49,0x9b,0x49,0x9b,0x48,0x9b,0x49,0x9b | $8346
	dc.b	0x47,0x53,0xfe,0x02,0x1c,0x4f,0x7b,0x4f | $834e
	dc.b	0x7b,0x4f,0x7b,0x4f,0x7b,0x4f,0x7b,0x53 | $8356
	dc.b	0xdb,0xfe,0x16,0x1c,0x50,0xdb,0x4f,0x7b | $835e
	dc.b	0x4f,0x7b,0x5c,0x7b,0x4f,0x7b,0x5c,0x7b | $8366
	dc.b	0x4f,0x7b,0x4f,0x7b,0xfe,0x02,0x1d,0x4f | $836e
	dc.b	0x7b,0x5c,0x7b,0x4f,0x7b,0x4f,0x7b,0x5c | $8376
	dc.b	0x7b,0x4f,0x7b,0x53 | $837e
table_8382:
	dc.b	0xdb,0xfe,0x15,0x1d,0x50,0xdb,0x4f,0x7b | table_8382
	dc.b	0x5c,0x7b,0x5c,0x7b,0x4f,0x7b,0x5c,0x7b | $838a
	dc.b	0x4f,0x7b,0x5c,0x7b,0x4f,0x7b,0xfe,0x02 | $8392
	dc.b	0x1e,0x4f,0x7b,0x4f,0x7b,0x4f,0x7b,0x5c | $839a
	dc.b	0x7b,0x4f,0x7b,0x5c,0x7b,0x4f,0x7b,0x54 | $83a2
	dc.b	0xdb,0xfe,0x15,0x1e,0x52,0xdb,0x5c,0x7b | $83aa
	dc.b	0x4f,0x7b,0x4f,0x7b,0x5c,0x7b,0x4f,0x7b | $83b2
	dc.b	0x5c,0x7b,0x4f,0x7b,0x4f,0x7b,0xfe,0x02 | $83ba
	dc.b	0x1f,0x4f,0x7b,0x5c,0x7b,0x4f,0x7b,0x4f | $83c2
	dc.b	0x7b,0x5c,0x7b,0x4f,0x7b,0x5c,0x7b,0x53 | $83ca
	dc.b	0xdb,0xfe,0x15,0x1f,0x50,0xdb,0x4f,0x7b | $83d2
	dc.b	0x5c,0x7b,0x4f,0x7b,0x4f,0x7b,0x4f,0x7b | $83da
	dc.b	0x4f,0x7b,0x4f,0x7b,0x4f,0x7b,0xff | $83e2
table_83e9:
	dc.b	0x02,0x00,0x2f,0x0c,0x23,0x0c,0x30,0x0c | $83e9
	dc.b	0xfe,0x02,0x01,0x31,0xa4,0x24,0x0c,0x29 | $83f1
	dc.b	0x0c,0xfe,0x02,0x02,0x31,0xa4,0x24,0x0c | $83f9
	dc.b	0x2b,0x0c,0xfe,0x02,0x03,0x2e,0x0c,0x24 | $8401
	dc.b	0x0c,0x2a,0x0c,0xfe,0x02,0x04,0x30,0x0c | $8409
	dc.b	0x23,0x0c,0x2c,0x0c,0xfe,0x02,0x05,0x29 | $8411
	dc.b	0x0c,0x24,0x0c,0x2d,0x0c,0xfe,0x02,0x06 | $8419
	dc.b	0x2b,0x0c,0x23,0x0c,0x2f,0x0c,0xfe,0x02 | $8421
	dc.b	0x07,0x2a,0x0c,0x24,0x0c,0x31,0xa4,0xfe | $8429
	dc.b	0x1b,0x00,0x24,0x0c,0x2e,0x0c,0x2f,0x0c | $8431
	dc.b	0xfe,0x1b,0x01,0x23,0x0c,0x30,0x0c,0x2d | $8439
	dc.b	0x0c,0xfe,0x1b,0x02,0x24,0x0c,0x31,0xa4 | $8441
	dc.b	0x2f,0x0c,0xfe,0x1b,0x03,0x23,0x0c,0x2d | $8449
	dc.b	0x0c,0x2e,0x0c,0xfe,0x1b,0x04,0x24,0x0c | $8451
	dc.b	0x2f,0x0c,0x30,0x0c,0xfe,0x1b,0x05,0x23 | $8459
	dc.b	0x0c,0x31,0xa4,0x29,0x0c,0xfe,0x1b,0x06 | $8461
	dc.b	0x24,0x0c,0x31,0xa4,0x2b,0x0c,0xfe,0x1b | $8469
	dc.b	0x07,0x23,0x0c,0x29,0x0c,0x2a,0x0c,0xfe | $8471
	dc.b	0x02,0x08,0x2c,0x0c,0x23,0x0c,0x31,0xa4 | $8479
	dc.b	0x1d,0x84,0x1e,0x84,0x1f,0x84,0x24,0x0c | $8481
	dc.b	0x31,0xa4,0x31,0xa4,0x24,0x0c,0x27,0x0c | $8489
	dc.b	0x28,0x0c,0x31,0xa4,0x23,0x0c,0x29,0x0c | $8491
	dc.b	0x2a,0x0c,0x31,0xa4,0x29,0x0c,0x2a,0x0c | $8499
	dc.b	0x31,0xa4,0x23,0x0c,0x31,0xa4,0x25,0x0c | $84a1
	dc.b	0x26,0x0c,0x31,0xa4,0x24,0x0c,0x2b,0x0c | $84a9
	dc.b	0x2c,0x0c,0xfe,0x02,0x09,0x20,0x84,0x24 | $84b1
	dc.b	0x0c,0x22,0x84,0x0a,0xb4,0x31,0xa4,0x31 | $84b9
	dc.b	0xa4,0x18,0x84,0x19,0x84,0x1a,0x84,0x31 | $84c1
	dc.b	0xa4,0x31,0xa4,0x25,0x0c,0x26,0x0c,0x24 | $84c9
	dc.b	0x0c,0x2b,0x0c,0x2c,0x0c,0x31,0xa4,0x2b | $84d1
	dc.b	0x0c,0x2c,0x0c,0x31,0xa4,0x24,0x0c,0x31 | $84d9
	dc.b	0xa4,0x27,0x0c,0x28,0x0c,0x0a,0xb4,0x29 | $84e1
	dc.b	0x0c,0x2a,0x0c,0x31,0xa4,0xfe,0x02,0x0a | $84e9
	dc.b	0x1d,0x84,0x23,0x0c,0x1f,0x84,0x31,0xa4 | $84f1
	dc.b	0x31,0xa4,0x1c,0x84,0x13,0x84,0x14,0x84 | $84f9
	dc.b	0x15,0x84,0x16,0x84,0x31,0xa4,0x27,0x0c | $8501
	dc.b	0x28,0x0c,0x17,0x84,0x18,0x84,0x19,0x84 | $8509
	dc.b	0x1a,0x84,0x31,0xa4,0x31,0xa4,0x31,0xa4 | $8511
	dc.b	0x23,0x0c,0x31,0xa4,0x31,0xa4,0x31,0xa4 | $8519
	dc.b	0x31,0xa4,0x2b,0x0c,0x2c,0x0c,0x20,0x84 | $8521
	dc.b	0xfe,0x02,0x0b,0x31,0xa4,0x24,0x0c,0x31 | $8529
	dc.b	0xa4,0x0a,0xb4,0x31,0xa4,0x1b,0x84,0x0d | $8531
	dc.b	0x84,0x0e,0x84,0x0f,0x84,0x10,0x84,0x31 | $8539
	dc.b	0xa4,0x31,0xa4,0x11,0x84,0x12,0x84,0x13 | $8541
	dc.b	0x84,0x14,0x84,0x15,0x84,0x16,0x84,0x0a | $8549
	dc.b	0xb4,0x31,0xa4,0x24,0x0c,0x31,0xa4,0x09 | $8551
	dc.b	0xb4,0x0a,0xb4,0x29,0x0c,0x2a,0x0c,0x31 | $8559
	dc.b	0xa4,0x1d,0x84,0xfe,0x03,0x0c,0x23,0x0c | $8561
	dc.b	0xfe,0x0e,0x0c,0x0b,0x84,0x0c,0x84,0x0d | $8569
	dc.b	0x84,0x0e,0x84,0x0f,0x84,0x10,0x84,0x31 | $8571
	dc.b	0xa4,0x31,0xa4,0x31,0xa4,0x31,0xa4,0x31 | $8579
	dc.b	0xa4,0x31,0xa4,0x2b,0x0c,0x2c,0x0c,0xfe | $8581
	dc.b	0x03,0x0d,0x24,0x0c,0xfe,0x0b,0x0d,0x09 | $8589
	dc.b	0xb4,0x0a,0xb4,0xfe,0x16,0x0d,0x0a,0xb4 | $8591
	dc.b	0x09,0xb4,0x0a,0xb4,0xfe,0x0a,0x0e,0x0a | $8599
	dc.b	0xb4,0xfe,0x05,0x0f,0x09,0xb4,0x0a,0xb4 | $85a1
	dc.b	0xfe,0x14,0x0f,0x0a,0xb4,0xfe,0x02,0x12 | $85a9
	dc.b	0x0a,0xb4,0xfe,0x1c,0x13,0x0a,0xb4,0xfe | $85b1
	dc.b	0x16,0x17,0x09,0xb4,0xfe,0x08,0x18,0x0a | $85b9
	dc.b	0xb4,0xfe,0x19,0x18,0x0a,0xb4,0xfe,0x02 | $85c1
	dc.b	0x19,0x0a,0xb4,0x31,0xa4,0x0a,0xb4,0x0a | $85c9
	dc.b	0xb4,0xfe,0x10,0x19,0x0a,0xb4,0x0a,0xb4 | $85d1
	dc.b	0x09,0xb4,0xfe,0x17,0x19,0x09,0xb4,0xfe | $85d9
	dc.b	0x1c,0x19,0x09,0xb4,0x0a,0xb4,0xfe,0x02 | $85e1
	dc.b	0x1a,0x08,0xa4,0x06,0xa4,0x05,0xa4,0x05 | $85e9
	dc.b	0xa4,0x05,0xa4,0x08,0xa4,0x06,0xa4,0x06 | $85f1
	dc.b	0xa4,0x07,0xa4,0x05,0xa4,0x06,0xa4,0x07 | $85f9
	dc.b	0xa4,0x08,0xa4,0x08,0xa4,0x05,0xa4,0x05 | $8601
	dc.b	0xa4,0x05,0xa4,0x07,0xa4,0x05,0xa4,0x05 | $8609
	dc.b	0xa4,0x08,0xa4,0x06,0xa4,0x06,0xa4,0x06 | $8611
	dc.b	0xa4,0x07,0xa4,0x05,0xa4,0x06,0xa4,0x08 | $8619
	dc.b	0xa4,0xfe,0x02,0x1b,0x3e,0xa0,0x3e,0xa0 | $8621
	dc.b	0x3e,0xa0,0x3e,0xa0,0x3e,0xa0,0x3e,0xa0 | $8629
	dc.b	0x3e,0xa0,0x3e,0xa0,0x3e,0xa0,0x3e,0xa0 | $8631
	dc.b	0x3e,0xa0,0x3e,0xa0,0x3e,0xa0,0x3e,0xa0 | $8639
	dc.b	0x3e,0xa0,0x3e,0xa0,0x3e,0xa0,0x3e,0xa0 | $8641
	dc.b	0x3e,0xa0,0x3e,0xa0,0x3e,0xa0,0x3e,0xa0 | $8649
	dc.b	0x3e,0xa0,0x3e,0xa0,0x3e,0xa0,0x3e,0xa0 | $8651
	dc.b	0x3e,0xa0,0x3e,0xa0,0xfe,0x02,0x1c,0x32 | $8659
	dc.b	0xdc,0x32,0xdc,0x03,0xdc,0x04,0xdc,0x00 | $8661
	dc.b	0x8c,0x01,0xdc,0x02,0xdc,0x32,0xdc,0x32 | $8669
	dc.b	0xdc,0x32,0xdc,0x32,0xdc,0x32,0xdc,0x04 | $8671
	dc.b	0xdc,0x01,0xdc,0x02,0xdc,0x32,0xdc,0x03 | $8679
	dc.b	0xdc,0x04,0xdc,0x00,0x8c,0x01,0xdc,0x04 | $8681
	dc.b	0xdc,0x00,0x8c,0x01,0xdc,0x02,0xdc,0x32 | $8689
	dc.b	0xdc,0x32,0xdc,0x03,0xdc,0x04,0xdc,0xfe | $8691
	dc.b	0x02,0x1d,0x00,0x8c,0x00,0x8c,0x00,0x8c | $8699
	dc.b	0x00,0x8c,0x68,0x8b,0x00,0x8c,0x68,0x8b | $86a1
	dc.b	0x00,0x8c,0x00,0x8c,0x00,0x8c,0x68,0x8b | $86a9
	dc.b	0x00,0x8c,0x68,0x8b,0x00,0x8c,0x00,0x8c | $86b1
	dc.b	0x3c,0x88,0x00,0x8c,0x68,0x8b,0x3c,0x88 | $86b9
	dc.b	0x00,0x8c,0x00,0x8c,0x68,0x8b,0x68,0x8b | $86c1
	dc.b	0x00,0x8c,0x3c,0x88,0x00,0x8c,0x68,0x8b | $86c9
	dc.b	0x00,0x8c,0xfe,0x02,0x1e,0x00,0x8c,0x3c | $86d1
	dc.b	0x88,0x00,0x8c,0x68,0x8b,0x00,0x8c,0x68 | $86d9
	dc.b	0x8b,0x00,0x8c,0x00,0x8c,0x3c,0x88,0x00 | $86e1
	dc.b	0x8c,0x68,0x8b,0x00,0x8c,0x00,0x8c,0x68 | $86e9
	dc.b	0x8b,0x3c,0x88,0x00,0x8c,0x68,0x8b,0x00 | $86f1
	dc.b	0x8c,0x68,0x8b,0x00,0x8c,0x68,0x8b,0x00 | $86f9
	dc.b	0x8c,0x3c,0x88,0x00,0x8c,0x00,0x8c,0x00 | $8701
	dc.b	0x8c,0x00,0x8c,0x68,0x8b,0xfe,0x02,0x1f | $8709
	dc.b	0x00,0x8c,0x00,0x8c,0x00,0x8c,0x00,0x8c | $8711
	dc.b	0x00,0x8c,0x00,0x8c,0x3c,0x88,0x00,0x8c | $8719
	dc.b	0x00,0x8c,0x00,0x8c,0x00,0x8c,0x00,0x8c | $8721
	dc.b	0x00,0x8c,0x00,0x8c,0x00,0x8c,0x00,0x8c | $8729
	dc.b	0x00,0x8c,0x00,0x8c,0x00,0x8c,0x00,0x8c | $8731
	dc.b	0x00,0x8c,0x00,0x8c,0x00,0x8c,0x00,0x8c | $8739
	dc.b	0x00,0x8c,0x00,0x8c,0x00,0x8c,0x00,0x8c | $8741
	dc.b	0xff,0x02,0x00,0x3c,0xd0,0x3c,0xd0,0x3c | $8749
	dc.b	0xd0,0xfe,0x1b,0x00,0x3c,0xd0,0x3c,0xd0 | $8751
	dc.b	0x3c,0xd0,0xfe,0x02,0x01,0x3c,0xd0,0x3c | $8759
	dc.b	0xd0,0x3c,0xd0,0xfe,0x1b,0x01,0x3c,0xd0 | $8761
	dc.b	0x3c,0xd0,0x3c,0xd0,0xfe,0x02,0x02,0x5c | $8769
	dc.b	0xd4,0x5c,0xd4,0x5c,0xd4,0xfe,0x1b,0x02 | $8771
	dc.b	0x3c,0xd0,0x3c,0xd0,0x3c,0xd0,0xfe,0x02 | $8779
	dc.b	0x03,0x5e,0xd4,0x5d,0xd4,0x5e,0xd4,0xfe | $8781
	dc.b	0x1b,0x03,0x6e,0xdc,0x3c,0xd0,0x3c,0xd0 | $8789
	dc.b	0xfe,0x02,0x04,0x60,0xd4,0x5f,0xd4,0x60 | $8791
	dc.b	0xd4,0xfe,0x1b,0x04,0x3f,0xd8,0x73,0xdc | $8799
	dc.b	0x6e,0xdc,0xfe,0x02,0x05,0x62,0xd4,0x8b | $87a1
	dc.b	0xd6,0x62,0xd4,0xfe,0x1b,0x05,0x3f,0xd8 | $87a9
	dc.b	0x3f,0xd8,0x3f,0xd8,0xfe,0x02,0x06,0x5d | $87b1
	dc.b	0xd4,0x5e,0xd4,0x5d,0xd4,0xfe,0x1b,0x06 | $87b9
	dc.b	0x3f,0xd8,0x3f,0xd8,0x3f,0xd8,0xfe,0x02 | $87c1
	dc.b	0x07,0x5f,0xd4,0x60,0xd4,0x5f,0xd4,0xfe | $87c9
	dc.b	0x1b,0x07,0x3f,0xd8,0x3f,0xd8,0x3f,0xd8 | $87d1
	dc.b	0xfe,0x02,0x08,0x64,0xd4,0x65,0xd4,0x64 | $87d9
	dc.b	0xd4,0x65,0xd4,0x64,0xd4,0x66,0xd4,0x3c | $87e1
	dc.b	0xd8,0x3c,0xd8,0x6e,0xdc,0x3c,0xd8,0x3c | $87e9
	dc.b	0xd8,0x3c,0xd8,0x3c,0xd8,0x3c,0xd8,0x3c | $87f1
	dc.b	0xd8,0x37,0xd4,0x34,0xd4,0x34,0xd4,0x34 | $87f9
	dc.b	0xd4,0x34,0xd4,0x34,0xd4,0x34,0xd4,0x34 | $8801
	dc.b	0xd4,0x34,0xd4,0x34,0xd4,0x34,0xd4,0x3a | $8809
	dc.b	0xd4,0x3f,0x54,0xfe,0x02,0x09,0x76,0xac | $8811
	dc.b	0x76,0xac,0x76,0xac,0x76,0xac,0x76,0xac | $8819
	dc.b	0x3c,0xd0,0x3c,0xd0,0x72,0xdc,0x3f,0xd8 | $8821
	dc.b	0x73,0xdc,0x3c,0xd0,0x3c,0xd0,0x3c,0xd0 | $8829
	dc.b	0x3c,0xd0,0x3c,0xd0,0x38,0xd4,0x35,0xd4 | $8831
	dc.b	0x35,0xd4,0x35,0xd4,0x35,0xd4,0x35,0xd4 | $8839
	dc.b	0x35,0xd4,0x35,0xd4,0x35,0xd4,0x35,0xd4 | $8841
	dc.b	0x3d,0xd4,0x3b,0x2c,0x40,0x54,0xfe,0x02 | $8849
	dc.b	0x0a,0x76,0xac,0x76,0xac,0x6b,0xa4,0x6c | $8851
	dc.b	0xa4,0x76,0xac,0x3c,0xd0,0x3c,0xd0,0x71 | $8859
	dc.b	0xdc,0x3f,0xd8,0x74,0xdc,0x3c,0x88,0x3c | $8861
	dc.b	0x88,0x41,0xd4,0x42,0xd4,0x42,0xd4,0x39 | $8869
	dc.b	0xfc,0x36,0xfc,0x36,0xfc,0x36,0xfc,0x36 | $8871
	dc.b	0xfc,0x36,0xfc,0x36,0xfc,0x36,0xfc,0x36 | $8879
	dc.b	0xfc,0x36,0xfc,0x3e,0xfc,0x3c,0x2c,0x42 | $8881
	dc.b	0xd4,0xfe,0x02,0x0b,0x69,0xa4,0x76,0xac | $8889
	dc.b	0x6a,0xa4,0x6d,0xa4,0x76,0xac,0x6e,0xdc | $8891
	dc.b	0x3c,0xd0,0x70,0xdc,0x3f,0xd8,0x75,0xdc | $8899
	dc.b	0x3c,0xd0,0x6e,0xdc,0x43,0xd4,0x45,0x2c | $88a1
	dc.b	0x45,0x2c,0x45,0x2c,0x3d,0x28,0x3d,0x28 | $88a9
	dc.b	0x47,0x54,0x48,0x54,0x48,0x54,0x48,0x54 | $88b1
	dc.b	0x48,0x54,0x48,0x54,0x3d,0x28,0x3d,0x28 | $88b9
	dc.b	0x44,0xd4,0x45,0x2c,0xfe,0x02,0x0c,0x3f | $88c1
	dc.b	0xd8,0x67,0xa4,0x3f,0xd8,0x3f,0xd8,0x67 | $88c9
	dc.b	0xa4,0x3f,0xd8,0x6f,0xdc,0x3f,0xd8,0x3f | $88d1
	dc.b	0xd8,0x3f,0xd8,0x6f,0xdc,0x3f,0xd8,0x6f | $88d9
	dc.b	0xdc,0x46,0xcc,0x46,0xcc,0x46,0xcc,0x3d | $88e1
	dc.b	0x28,0x3d,0x28,0x49,0x54,0x3f,0xd8,0x3f | $88e9
	dc.b	0xd8,0x3f,0xd8,0x3f,0xd8,0x3f,0xd8,0x3d | $88f1
	dc.b	0x28,0x3d,0x28,0x3c,0x00,0x46,0xcc,0xfe | $88f9
	dc.b	0x02,0x0d,0x3f,0xd8,0x3f,0xd8,0x3f,0xd8 | $8901
	dc.b	0x3f,0xd8,0x3f,0xd8,0x3f,0xd8,0x3f,0xd8 | $8909
	dc.b	0x3f,0xd8,0x3f,0xd8,0x3f,0xd8,0x3f,0xd8 | $8911
	dc.b	0x3f,0xd8,0x3f,0xd8,0x46,0xcc,0x46,0xcc | $8919
	dc.b	0x46,0xcc,0x3d,0x28,0x3d,0x28,0x49,0x54 | $8921
	dc.b	0x3f,0xd8,0x3f,0xd8,0x3f,0xd8,0x3f,0xd8 | $8929
	dc.b	0x3f,0xd8,0x3d,0x28,0x3d,0x28,0x3c,0x00 | $8931
	dc.b	0x46,0xcc,0xfe,0x02,0x0e,0x59,0x54,0x58 | $8939
	dc.b	0x54,0x59,0x54,0x58,0x54,0x59,0x54,0x58 | $8941
	dc.b	0x54,0x59,0x54,0x58,0x54,0x59,0x54,0x58 | $8949
	dc.b	0x54,0x59,0x54,0x58,0x54,0x59,0x54,0x46 | $8951
	dc.b	0xcc,0x46,0xcc,0x46,0xcc,0x3d,0x28,0x3d | $8959
	dc.b	0x28,0x49,0x54,0x3f,0xd8,0x3f,0xd8,0x3f | $8961
	dc.b	0xd8,0x4f,0x54,0x50,0x54,0x3d,0x28,0x3d | $8969
	dc.b	0x28,0x3c,0x00,0x46,0xcc,0xfe,0x02,0x0f | $8971
	dc.b	0x5b,0x54,0x5a,0x54,0x5b,0x54,0x5a,0x54 | $8979
	dc.b	0x5b,0x54,0x5a,0x54,0x5b,0x54,0x5a,0x54 | $8981
	dc.b	0x5b,0x54,0x5a,0x54,0x5b,0x54,0x5a,0x54 | $8989
	dc.b	0x5b,0x54,0x46,0xcc,0x46,0xcc,0x46,0xcc | $8991
	dc.b	0x3d,0x28,0x3d,0x28,0x4a,0x54,0x4b,0x54 | $8999
	dc.b	0x4c,0x54,0x4d,0x54,0x4e,0x54,0x4e,0x54 | $89a1
	dc.b	0x3d,0x28,0x3d,0x28,0x3c,0x00,0x46,0xcc | $89a9
	dc.b	0xfe,0x0f,0x10,0x3c,0x00,0x3c,0x00,0x51 | $89b1
	dc.b	0xd4,0x52,0x2c,0x52,0x2c,0x53,0xd4,0x77 | $89b9
	dc.b	0xd4,0x77,0xd4,0x77,0xd4,0x77,0xd4,0x77 | $89c1
	dc.b	0xd4,0x52,0x2c,0x52,0x2c,0x54,0xd4,0x3c | $89c9
	dc.b	0x00,0xfe,0x10,0x11,0x57,0xfc,0x77,0xd4 | $89d1
	dc.b	0x77,0xd4,0x77,0xd4,0x77,0xd4,0x77,0xd4 | $89d9
	dc.b	0x77,0xd4,0x77,0xd4,0x77,0xd4,0x77,0xd4 | $89e1
	dc.b	0x77,0xd4,0x56,0xfc,0x55,0xfc,0xff,0x02 | $89e9
	dc.b	0x00,0x3c,0x88,0x3c,0x88,0x3c,0x88,0x3c | $89f1
	dc.b	0x88,0xfe,0x1a,0x00,0x3c,0x88,0x3c,0x88 | $89f9
	dc.b	0x7c,0x94,0x7d,0x94,0xfe,0x02,0x01,0x3c | $8a01
	dc.b	0x88,0x3c,0x88,0x3c,0x88,0x3c,0x88,0xfe | $8a09
	dc.b	0x1a,0x01,0x3c,0x88,0x79,0x8c,0x7e,0x94 | $8a11
	dc.b	0x7f,0x94,0xfe,0x02,0x02,0x3c,0x88,0x3c | $8a19
	dc.b	0x88,0x3c,0x88,0x3c,0x88,0xfe,0x1a,0x02 | $8a21
	dc.b	0x74,0x8c,0x7b,0xc4,0xcd,0x74,0xd7,0x74 | $8a29
	dc.b	0xfe,0x02,0x03,0x3c,0x88,0x3c,0x88,0x3c | $8a31
	dc.b	0x88,0x3c,0x88,0xfe,0x1a,0x03,0x3d,0x70 | $8a39
	dc.b	0x78,0x74,0x80,0x74,0x81,0x74,0xfe,0x02 | $8a41
	dc.b	0x04,0x3c,0x88,0x3c,0x88,0x3c,0x88,0x3c | $8a49
	dc.b	0x88,0xfe,0x1a,0x04,0x3d,0x70,0x85,0x74 | $8a51
	dc.b	0x82,0x74,0x83,0x74,0xfe,0x02,0x05,0x3c | $8a59
	dc.b	0x88,0x3c,0x88,0x3c,0x88,0x3c,0x88,0xfe | $8a61
	dc.b	0x1a,0x05,0x86,0x74,0x87,0x74,0x3d,0x70 | $8a69
	dc.b	0x84,0x3c,0xfe,0x02,0x06,0x3c,0x88,0x3c | $8a71
	dc.b	0x88,0x3c,0x88,0x3c,0x88,0xfe,0x1a,0x06 | $8a79
	dc.b	0x3d,0x70,0x88,0x74,0x89,0x74,0x84,0x3c | $8a81
	dc.b	0xfe,0x02,0x07,0xc6,0x94,0xc7,0x8c,0xc4 | $8a89
	dc.b	0x8c,0xc5,0x94,0xfe,0x1a,0x07,0x90,0x74 | $8a91
	dc.b	0x8a,0x74,0x8b,0x74,0x3d,0x70,0xfe,0x02 | $8a99
	dc.b	0x08,0xcb,0x8c,0xc8,0x74,0xc9,0x74,0xca | $8aa1
	dc.b	0x8c,0xcc,0x8c,0x3c,0x88,0x3c,0x88,0x3c | $8aa9
	dc.b	0x88,0x3c,0x88,0x3c,0x88,0x3c,0x88,0x3c | $8ab1
	dc.b	0x88,0x3c,0x88,0x3c,0x88,0x3c,0x88,0x3c | $8ab9
	dc.b	0x88,0x3c,0x88,0x3c,0x88,0x3c,0x88,0x3c | $8ac1
	dc.b	0x88,0x3c,0x88,0x3c,0x88,0x9d,0x64,0x3d | $8ac9
	dc.b	0x70,0x92,0x74,0x8c,0x74,0x8d,0x74,0x91 | $8ad1
	dc.b	0x74,0xfe,0x02,0x09,0x9d,0x64,0xd0,0x3c | $8ad9
	dc.b	0xd2,0x74,0xd5,0xa4,0xa9,0xdc,0x3f,0xd8 | $8ae1
	dc.b	0x3f,0xd8,0xa9,0xdc,0x3f,0xd8,0x3f,0xd8 | $8ae9
	dc.b	0x3f,0xd8,0xa9,0xdc,0xa9,0xdc,0xa9,0xdc | $8af1
	dc.b	0x3f,0xd8,0xa9,0xdc,0x3f,0xd8,0x3f,0xd8 | $8af9
	dc.b	0xa9,0xdc,0xa9,0xdc,0x3f,0xd8,0xa9,0xdc | $8b01
	dc.b	0x9f,0xa4,0x3d,0x70,0x3d,0x70,0x8e,0x74 | $8b09
	dc.b	0x8f,0x74,0x93,0x74,0xfe,0x02,0x0a,0xcf | $8b11
	dc.b	0xa4,0xd1,0x3c,0xd3,0x74,0xd4,0x74,0xaa | $8b19
	dc.b	0xa4,0xab,0xa4,0xaa,0xa4,0xab,0xa4,0xaa | $8b21
	dc.b	0xa4,0xab,0xa4,0xb0,0xdc,0xb1,0xdc,0xaa | $8b29
	dc.b	0xa4,0xab,0xa4,0xaa,0xa4,0xab,0xa4,0xaa | $8b31
	dc.b	0xa4,0xab,0xa4,0xaa,0xa4,0xab,0xa4,0xaa | $8b39
	dc.b	0xa4,0xab,0xa4,0x9e,0x74,0x3d,0x70,0x84 | $8b41
	dc.b	0x3c,0x98,0x74,0x94,0x74,0x95,0x74,0xfe | $8b49
	dc.b	0x02,0x0b,0xce,0xa4,0xd0,0x3c,0xd1,0x3c | $8b51
	dc.b	0xd6,0xa4,0xa8,0x34,0xa8,0x34,0xae,0xdc | $8b59
	dc.b	0xaf,0xdc,0xac,0xdc,0xad,0xdc,0xb2,0xdc | $8b61
	dc.b	0xb3,0xdc,0xa8,0x34,0xa8,0x34,0xa8,0x34 | $8b69
	dc.b	0xa8,0x34,0xa8,0x34,0xa8,0x34,0xa8,0x34 | $8b71
	dc.b	0xa8,0x34,0xa8,0x34,0xa0,0xa4,0x3d,0x70 | $8b79
	dc.b	0x84,0x3c,0x9c,0x3c,0x9a,0x74,0x96,0x74 | $8b81
	dc.b	0x97,0x74,0xfe,0x02,0x0c,0xa8,0x34,0xa8 | $8b89
	dc.b	0x34,0xa8,0x34,0xa8,0x34,0xa8,0x34,0xa8 | $8b91
	dc.b	0x34,0xb9,0xdc,0x3c,0x88,0x3c,0x88,0x3c | $8b99
	dc.b	0x88,0xb4,0xdc,0xa8,0x34,0xa8,0x34,0xa8 | $8ba1
	dc.b	0x34,0xa8,0x34,0xa8,0x34,0xa8,0x34,0xa8 | $8ba9
	dc.b	0x34,0xa8,0x34,0xa8,0x34,0xa8,0x34,0xa2 | $8bb1
	dc.b	0xa4,0x3d,0x70,0x3d,0x70,0x3d,0x70,0x99 | $8bb9
	dc.b	0x74,0x9b,0x74,0x9c,0x3c,0xfe,0x02,0x0d | $8bc1
	dc.b	0xa8,0x34,0xa8,0x34,0xa8,0x34,0xa8,0x34 | $8bc9
	dc.b	0xb8,0xdc,0xba,0xdc,0xbb,0xdc,0x3c,0x88 | $8bd1
	dc.b	0x3c,0x88,0x3c,0x88,0xb5,0xdc,0xa8,0x34 | $8bd9
	dc.b	0xa8,0x34,0xa8,0x34,0xa8,0x34,0xa8,0x34 | $8be1
	dc.b	0xa8,0x34,0xa8,0x34,0xa8,0x34,0xa8,0x34 | $8be9
	dc.b	0xa8,0x34,0xa1,0xa4,0x3d,0x70,0x3d,0x70 | $8bf1
	dc.b	0x3d,0x70,0x84,0x3c,0x9c,0x3c,0x3d,0xa0 | $8bf9
	dc.b	0xfe,0x02,0x0e,0xa8,0x34,0xbf,0xdc,0xbc | $8c01
	dc.b	0xdc,0xbd,0xdc,0x3c,0x88,0x3c,0x88,0x3c | $8c09
	dc.b	0x88,0x3c,0x88,0x3c,0x88,0x3c,0x88,0xb7 | $8c11
	dc.b	0xdc,0xa8,0x34,0xa8,0x34,0xa8,0x34,0xa8 | $8c19
	dc.b	0x34,0xa8,0x34,0xa8,0x34,0xa8,0x34,0xa8 | $8c21
	dc.b	0x34,0xa8,0x34,0xa8,0x34,0xa3,0xa4,0x3d | $8c29
	dc.b	0x70,0x9c,0x3c,0x3d,0x70,0x84,0x3c,0x3d | $8c31
	dc.b	0x70,0x9c,0x3c,0xfe,0x02,0x0f,0xc2,0x7c | $8c39
	dc.b	0xbe,0xdc,0xc0,0xdc,0xc1,0xdc,0xc0,0xdc | $8c41
	dc.b	0xc1,0xdc,0xc1,0xdc,0xc0,0xdc,0xc0,0xdc | $8c49
	dc.b	0xc1,0xdc,0xc3,0x7c,0xc2,0x7c,0xc3,0x7c | $8c51
	dc.b	0xc2,0x7c,0xc2,0x7c,0xc2,0x7c,0xc3,0x7c | $8c59
	dc.b	0xc3,0x7c,0xc2,0x7c,0xc3,0x7c,0xc2,0x7c | $8c61
	dc.b	0xa4,0xa4,0xa5,0xa4,0xa4,0xa4,0xa5,0xa4 | $8c69
	dc.b	0xa6,0xa4,0xa6,0xa4,0xa7,0xa4,0xff,0x02 | $8c71
	dc.b	0x00,0x3c,0x88,0x3c,0x88,0x3c,0x88,0xfe | $8c79
	dc.b	0x1b,0x00,0x3c,0x88,0x3c,0x88,0x3c,0x88 | $8c81
	dc.b	0xfe,0x02,0x01,0x3c,0x88,0x3c,0x88,0x3c | $8c89
	dc.b	0x88,0xfe,0x1b,0x01,0x3c,0x88,0x3c,0x88 | $8c91
	dc.b	0x3c,0x88,0xfe,0x02,0x02,0x3c,0x88,0x3c | $8c99
	dc.b	0x88,0x3c,0x88,0xfe,0x1b,0x02,0x3c,0x88 | $8ca1
	dc.b	0x3c,0x88,0x3c,0x88,0xfe,0x02,0x03,0x3c | $8ca9
	dc.b	0x88,0x30,0x65,0x31,0x65,0xfe,0x02,0x04 | $8cb1
	dc.b	0x35,0x65,0x32,0x65,0x33,0x65,0xfe,0x02 | $8cb9
	dc.b	0x05,0x3f,0x60,0x36,0x65,0x3f,0x60,0xfe | $8cc1
	dc.b	0x1b,0x03,0x34,0x65,0x37,0x65,0x38,0x65 | $8cc9
	dc.b	0xfe,0x1b,0x04,0x33,0x65,0x32,0x65,0x33 | $8cd1
	dc.b	0x65,0xfe,0x1b,0x05,0x3f,0x60,0x36,0x65 | $8cd9
	dc.b	0x3f,0x60,0xfe,0x02,0x06,0xf8,0x9c,0xf9 | $8ce1
	dc.b	0x9c,0xfa,0x9c,0xfe,0x1b,0x06,0xf9,0x9c | $8ce9
	dc.b	0xfa,0x9c,0xf8,0x9c,0xfe,0x02,0x07,0xfd | $8cf1
	dc.b	0xa4,0x00,0xa5,0xfe,0x1b,0x07,0xfd,0xa4 | $8cf9
	dc.b	0x00,0xa5,0xfe,0x02,0x08,0xfc,0xa4,0xfb | $8d01
	dc.b	0xa4,0x01,0xa5,0xfe,0x10,0x08,0xea,0xa4 | $8d09
	dc.b	0xeb,0xa4,0xee,0xa4,0xfe,0x19,0x08,0xda | $8d11
	dc.b	0x24,0xdd,0x24,0xfc,0xa4,0xfb,0xa4,0x01 | $8d19
	dc.b	0xa5,0xfe,0x0f,0x09,0xe7,0xa4,0xe9,0xa4 | $8d21
	dc.b	0xec,0xa4,0xed,0xa4,0xfe,0x18,0x09,0xd8 | $8d29
	dc.b	0x24,0xd9,0x24,0xdc,0x24,0xdb,0x24,0xfe | $8d31
	dc.b	0x02,0x0a,0xea,0xa4,0xeb,0xa4,0xee,0xa4 | $8d39
	dc.b	0xfe,0x09,0x0a,0xda,0x24,0xdd,0x24,0xfe | $8d41
	dc.b	0x0f,0x0a,0xe6,0xa4,0xe8,0xa4,0xf0,0xa4 | $8d49
	dc.b	0xef,0xa4,0xfe,0x17,0x0a,0xda,0x24,0x3c | $8d51
	dc.b	0x20,0xd9,0x24,0xdc,0x24,0x3c,0x20,0xdd | $8d59
	dc.b	0x24,0xfe,0x02,0x0b,0xe9,0xa4,0xec,0xa4 | $8d61
	dc.b	0xed,0xa4,0xfe,0x08,0x0b,0xd8,0x24,0xd9 | $8d69
	dc.b	0x24,0xdc,0x24,0xdb,0x24,0xfe,0x0f,0x0b | $8d71
	dc.b	0xe5,0xa4,0xe4,0xa4,0xf1,0xa4,0xfe,0x16 | $8d79
	dc.b	0x0b,0xd8,0x24,0xd9,0x24,0x3c,0x20,0xe0 | $8d81
	dc.b	0x24,0xe3,0x24,0x3c,0x20,0xdc,0x24,0xdb | $8d89
	dc.b	0x24,0xfe,0x02,0x0c,0xe8,0xa4,0xf0,0xa4 | $8d91
	dc.b	0xef,0xa4,0xfe,0x07,0x0c,0xda,0x24,0x3c | $8d99
	dc.b	0x20,0xd9,0x24,0xdc,0x24,0x3c,0x20,0xdd | $8da1
	dc.b	0x24,0xfe,0x15,0x0c,0xda,0x24,0x3c,0x20 | $8da9
	dc.b	0xd9,0x24,0x3c,0x20,0xdf,0x24,0xe2,0x24 | $8db1
	dc.b	0x3c,0x20,0xdc,0x24,0x3c,0x20,0xdd,0x24 | $8db9
	dc.b	0xfe,0x02,0x0d,0xe4,0xa4,0xf1,0xa4,0xfe | $8dc1
	dc.b	0x06,0x0d,0xd8,0x24,0xd9,0x24,0x3c,0x20 | $8dc9
	dc.b	0xe0,0x24,0xe3,0x24,0x3c,0x20,0xdc,0x24 | $8dd1
	dc.b	0xdb,0x24,0xfe,0x15,0x0d,0xf2,0x24,0xf4 | $8dd9
	dc.b	0x24,0xf6,0x24,0x3c,0x20,0xde,0x24,0xe1 | $8de1
	dc.b	0x24,0x3c,0x20,0xf7,0x24,0xf5,0x24,0xf3 | $8de9
	dc.b	0x24,0xfe,0x05,0x0e,0xda,0x24,0x3c,0x20 | $8df1
	dc.b	0xd9,0x24,0x3c,0x20,0xdf,0x24,0xe2,0x24 | $8df9
	dc.b	0x3c,0x20,0xdc,0x24,0x3c,0x20,0xdd,0x24 | $8e01
	dc.b	0xfe,0x05,0x0f,0xf2,0x24,0xf4,0x24,0xf6 | $8e09
	dc.b	0x24,0x3c,0x20,0xde,0x24,0xe1,0x24,0x3c | $8e11
	dc.b	0x20,0xf7,0x24,0xf5,0x24,0xf3,0x24,0xfe | $8e19
	dc.b	0x19,0x10,0xea,0xa4,0xeb,0xa4,0xee,0xa4 | $8e21
	dc.b	0xfe,0x18,0x11,0xe7,0xa4,0xe9,0xa4,0xec | $8e29
	dc.b	0xa4,0xed,0xa4,0xfe,0x18,0x12,0xe6,0xa4 | $8e31
	dc.b	0xe8,0xa4,0xf0,0xa4,0xef,0xa4,0xfe,0x18 | $8e39
	dc.b	0x13,0xe5,0xa4,0xe4,0xa4,0xf1,0xa4,0xff | $8e41
	dc.b	0x02,0x00,0x25,0x15,0x22,0x15,0x3c,0x00 | $8e49
	dc.b	0xfe,0x1b,0x00,0x3c,0x88,0x3c,0x88,0x3c | $8e51
	dc.b	0x88,0xfe,0x02,0x01,0x3d,0x10,0x3d,0x10 | $8e59
	dc.b	0x25,0x15,0xfe,0x1b,0x01,0x3c,0x88,0x3c | $8e61
	dc.b	0x88,0x3c,0x88,0xfe,0x02,0x02,0x3d,0x10 | $8e69
	dc.b	0x1c,0x15,0x3d,0x10,0xfe,0x1b,0x02,0x3c | $8e71
	dc.b	0x88,0x3c,0x88,0x3c,0x88,0xfe,0x02,0x03 | $8e79
	dc.b	0x3d,0x10,0x1c,0x15,0x3d,0x10,0xfe,0x1b | $8e81
	dc.b	0x03,0x3c,0x88,0x3c,0x88,0x3c,0x88,0xfe | $8e89
	dc.b	0x02,0x04,0x3d,0x10,0x3d,0x10,0x3d,0x10 | $8e91
	dc.b	0xfe,0x1b,0x04,0x3c,0x88,0x3c,0x88,0x3c | $8e99
	dc.b	0x88,0xfe,0x02,0x05,0x3d,0x10,0x3d,0x10 | $8ea1
	dc.b	0x3d,0x10,0xfe,0x1b,0x05,0x3c,0x88,0x3c | $8ea9
	dc.b	0x88,0x3c,0x88,0xfe,0x02,0x06,0x20,0x15 | $8eb1
	dc.b	0x21,0x15,0x1f,0x15,0xfe,0x1b,0x06,0x3c | $8eb9
	dc.b	0x88,0x30,0x65,0x31,0x65,0xfe,0x02,0x07 | $8ec1
	dc.b	0x8c,0x16,0x23,0x15,0x24,0x15,0xfe,0x1b | $8ec9
	dc.b	0x07,0x35,0x65,0x32,0x65,0x33,0x65,0xfe | $8ed1
	dc.b	0x02,0x08,0x8c,0x16,0x3c,0x10,0x3c,0x10 | $8ed9
	dc.b	0x1b,0x15,0x3d,0x10,0x3d,0x10,0x3c,0x00 | $8ee1
	dc.b	0x3c,0x00,0x3c,0x00,0x3d,0x10,0x02,0x15 | $8ee9
	dc.b	0x03,0x15,0x3c,0x88,0x3c,0x88,0x3c,0x88 | $8ef1
	dc.b	0x3c,0x88,0x3c,0x88,0x3c,0x88,0x3c,0x88 | $8ef9
	dc.b	0x3c,0x88,0x3c,0x88,0x34,0x65,0x34,0x65 | $8f01
	dc.b	0x35,0x65,0x36,0x65,0x3a,0x65,0x36,0x65 | $8f09
	dc.b	0x3f,0x60,0xfe,0x02,0x09,0x8c,0x16,0x3c | $8f11
	dc.b	0x10,0x3c,0x10,0x3c,0x00,0x3d,0x10,0x3d | $8f19
	dc.b	0x10,0x0c,0x15,0x0d,0x15,0x3c,0x00,0x3d | $8f21
	dc.b	0x10,0x04,0x15,0x05,0x15,0x3c,0x88,0x3c | $8f29
	dc.b	0x88,0x3c,0x88,0x3c,0x88,0x3c,0x88,0x3c | $8f31
	dc.b	0x88,0x3c,0x88,0x37,0x65,0x38,0x65,0x33 | $8f39
	dc.b	0x65,0x3f,0x60,0x3a,0x65,0x3f,0x60,0x39 | $8f41
	dc.b	0x65,0x3f,0x60,0x3f,0x60,0xfe,0x02,0x0a | $8f49
	dc.b	0x8c,0x16,0x3c,0x10,0x3c,0x10,0x3c,0x00 | $8f51
	dc.b	0x1c,0x15,0x3d,0x10,0x0e,0x15,0x0f,0x15 | $8f59
	dc.b	0x12,0x15,0x3d,0x10,0x0a,0x15,0x05,0x15 | $8f61
	dc.b	0x3c,0x10,0x3c,0x10,0x3c,0x10,0x3c,0x10 | $8f69
	dc.b	0x3c,0x10,0x3c,0x10,0x3c,0x10,0x3c,0x10 | $8f71
	dc.b	0x3c,0x10,0x3c,0x10,0x3c,0x10,0x3c,0x10 | $8f79
	dc.b	0x3c,0x10,0x3c,0x10,0x3c,0x10,0x3c,0x10 | $8f81
	dc.b	0xfe,0x02,0x0b,0x8c,0x16,0x3c,0x10,0x3c | $8f89
	dc.b	0x10,0x1b,0x15,0x1e,0x15,0x3d,0x10,0x10 | $8f91
	dc.b	0x15,0x11,0x15,0x13,0x15,0x3d,0x10,0x06 | $8f99
	dc.b	0x15,0x05,0x15,0x3d,0x00,0x3f,0xfd,0x3d | $8fa1
	dc.b	0x00,0x3d,0x00,0x3d,0x00,0x3f,0xfd,0x27 | $8fa9
	dc.b	0x15,0x3c,0x10,0x3c,0x10,0x3c,0x10,0x3c | $8fb1
	dc.b	0x10,0x3c,0x10,0x3c,0x10,0x3c,0x10,0x3c | $8fb9
	dc.b	0x10,0x3c,0x10,0xfe,0x02,0x0c,0x8c,0x16 | $8fc1
	dc.b	0x3c,0x10,0x3c,0x10,0x3c,0x00,0x3d,0x10 | $8fc9
	dc.b	0x3d,0x10,0x3c,0x00,0x3c,0x00,0x3c,0x00 | $8fd1
	dc.b	0x3d,0x10,0x0a,0x15,0x05,0x15,0xfe,0x15 | $8fd9
	dc.b	0x0c,0x27,0x15,0x3c,0x10,0x3c,0x10,0x3c | $8fe1
	dc.b	0x10,0x3c,0x10,0x3c,0x10,0x3c,0x10,0x3c | $8fe9
	dc.b	0x10,0x3c,0x10,0xfe,0x02,0x0d,0x8c,0x16 | $8ff1
	dc.b	0x3c,0x10,0x3c,0x10,0x1b,0x15,0x3d,0x10 | $8ff9
	dc.b	0x3d,0x10,0x3c,0x00,0x3c,0x00,0x3c,0x00 | $9001
	dc.b	0x1c,0x15,0x08,0x15,0x09,0x15,0x3e,0x10 | $9009
	dc.b	0x28,0x15,0x29,0x15,0x2a,0x15,0x3e,0x10 | $9011
	dc.b	0x3e,0x10,0x3b,0xfd,0x3c,0xfd,0x27,0x15 | $9019
	dc.b	0x3c,0x10,0x3c,0x10,0x3c,0x10,0x3c,0x10 | $9021
	dc.b	0x3c,0x10,0x3c,0x10,0x3c,0x10,0xfe,0x02 | $9029
	dc.b	0x0e,0x8c,0x16,0x3c,0x10,0x3c,0x10,0x3c | $9031
	dc.b	0x00,0x3d,0x10,0x1c,0x15,0x3c,0x00,0x3c | $9039
	dc.b	0x00,0x3c,0x00,0x1e,0x15,0x07,0x15,0xfe | $9041
	dc.b	0x14,0x0e,0x3d,0xfd,0x3e,0xfd,0x3e,0x10 | $9049
	dc.b	0x27,0x15,0x3c,0x10,0x3c,0x10,0x3c,0x10 | $9051
	dc.b	0x3c,0x10,0x3c,0x10,0x3c,0x10,0xfe,0x02 | $9059
	dc.b	0x0f,0x8c,0x16,0x3c,0x10,0x3c,0x10,0x3c | $9061
	dc.b	0x00,0x3d,0x10,0x1e,0x15,0x14,0x75,0x15 | $9069
	dc.b	0x75,0x3c,0x00,0x0b,0x15,0x3e,0x10,0x28 | $9071
	dc.b	0x15,0x29,0x15,0x2a,0x15,0xfe,0x16,0x0f | $9079
	dc.b	0x2b,0x15,0x3e,0x10,0x27,0x15,0x3c,0x10 | $9081
	dc.b	0x3c,0x10,0x3c,0x10,0x3c,0x10,0x3c,0x10 | $9089
	dc.b	0xfe,0x02,0x10,0x8c,0x16,0x3c,0x10,0x3c | $9091
	dc.b	0x10,0x1b,0x15,0x3d,0x10,0x3d,0x10,0x16 | $9099
	dc.b	0x25,0x17,0x25,0xfe,0x13,0x10,0x2b,0x15 | $90a1
	dc.b	0xfe,0x19,0x10,0x27,0x15,0x3c,0x10,0x3c | $90a9
	dc.b	0x10,0x3c,0x10,0x3c,0x10,0xfe,0x02,0x11 | $90b1
	dc.b	0x8c,0x16,0x3c,0x10,0x3c,0x10,0x3c,0x00 | $90b9
	dc.b	0x3d,0x10,0x3d,0x10,0x18,0x25,0x19,0xbd | $90c1
	dc.b	0x2f,0x15,0xfe,0x18,0x11,0x2b,0x15,0x3e | $90c9
	dc.b	0x10,0x27,0x15,0x3c,0x10,0x3c,0x10,0x3c | $90d1
	dc.b	0x10,0xfe,0x02,0x12,0x8c,0x16,0x3c,0x10 | $90d9
	dc.b	0x3c,0x10,0x3c,0x00,0x1c,0x15,0x3d,0x10 | $90e1
	dc.b	0x1a,0xbd,0xfe,0x17,0x12,0x2b,0x15,0x3e | $90e9
	dc.b	0x10,0x3e,0x10,0x2b,0x15,0x27,0x15,0x3c | $90f1
	dc.b	0x10,0x3c,0x10,0xfe,0x02,0x13,0x8c,0x16 | $90f9
	dc.b	0x3c,0x10,0x3c,0x10,0x3c,0x00,0x1e,0x15 | $9101
	dc.b	0x0b,0x15,0xfe,0x1a,0x13,0x2f,0x15,0x3e | $9109
	dc.b	0x10,0x27,0x15,0x3c,0x10,0xfe,0x02,0x14 | $9111
	dc.b	0x8c,0x16,0x3c,0x10,0x3c,0x10,0x1b,0x15 | $9119
	dc.b	0x0b,0x15,0x2f,0x15,0x28,0x15,0x29,0x15 | $9121
	dc.b	0x2a,0x15,0xfe,0x19,0x14,0x2f,0x15,0x3e | $9129
	dc.b	0x10,0x2b,0x15,0x3e,0x10,0x27,0x15,0xfe | $9131
	dc.b	0x02,0x15,0x8c,0x16,0x3c,0x10,0x26,0x15 | $9139
	dc.b	0xfe,0x0f,0x15,0x2e,0x15,0x2f,0x15,0x2c | $9141
	dc.b	0x15,0x2d,0x15,0xfe,0x1a,0x15,0x2b,0x15 | $9149
	dc.b	0x3e,0x10,0x2b,0x15,0xfe,0x02,0x16,0x8c | $9151
	dc.b	0x16,0x26,0x15,0xfe,0x02,0x17,0x26,0x15 | $9159
	dc.b	0xfe,0x1b,0x18,0x2b,0x15,0xfe,0x1a,0x19 | $9161
	dc.b	0x2b,0x15,0xfe,0x09,0x1a,0x2e,0x15,0x2f | $9169
	dc.b	0x15,0x2c,0x15,0x2d,0x15,0xfe,0x07,0x1d | $9171
	dc.b	0x2f,0x15,0xfe,0x17,0x1d,0x2f,0x15,0xff | $9179
	dc.b	0x02,0x00,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $9181
	dc.b	0xfe,0x1b,0x00,0x3f,0x90,0x3f,0x90,0x3f | $9189
	dc.b	0x90,0xfe,0x02,0x01,0x3f,0x90,0x3f,0x90 | $9191
	dc.b	0x3f,0x90,0xfe,0x1b,0x01,0x3f,0x90,0x3f | $9199
	dc.b	0x90,0x3f,0x90,0xfe,0x02,0x02,0x3f,0x90 | $91a1
	dc.b	0x3f,0x90,0x3f,0x90,0xfe,0x1b,0x02,0x3f | $91a9
	dc.b	0x90,0x3f,0x90,0x3f,0x90,0xfe,0x02,0x03 | $91b1
	dc.b	0x3f,0x90,0x3f,0x90,0x3f,0x90,0xfe,0x1b | $91b9
	dc.b	0x03,0x3f,0x90,0x3f,0x90,0x3f,0x90,0xfe | $91c1
	dc.b	0x02,0x04,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $91c9
	dc.b	0xfe,0x1b,0x04,0x72,0x95,0x69,0x95,0x3f | $91d1
	dc.b	0x90,0xfe,0x02,0x05,0x3f,0x90,0x3f,0x90 | $91d9
	dc.b	0x3f,0x90,0xfe,0x1b,0x05,0x3d,0x90,0x68 | $91e1
	dc.b	0x95,0x3f,0x90,0xfe,0x02,0x06,0x3f,0x90 | $91e9
	dc.b	0x3f,0x90,0x3f,0x90,0xfe,0x1b,0x06,0x67 | $91f1
	dc.b	0x95,0x3f,0x90,0x3f,0x90,0xfe,0x02,0x07 | $91f9
	dc.b	0x3f,0x90,0x3f,0x90,0x3f,0x90,0xfe,0x1b | $9201
	dc.b	0x07,0x3f,0x90,0x3f,0x90,0x3f,0x90,0xfe | $9209
	dc.b	0x02,0x08,0x6c,0x95,0x72,0x95,0x69,0x95 | $9211
	dc.b	0x6d,0x95,0x71,0x95,0x6d,0x95,0x72,0x95 | $9219
	dc.b	0x69,0x95,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $9221
	dc.b	0x3f,0x90,0x3f,0x90,0x3f,0x90,0x65,0x95 | $9229
	dc.b	0x3d,0x90,0x6a,0x95,0x6f,0x95,0x6a,0x95 | $9231
	dc.b	0x6b,0x95,0x6a,0x95,0x66,0x95,0x67,0x95 | $9239
	dc.b	0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $9241
	dc.b	0x3f,0x90,0xfe,0x02,0x09,0x3d,0x90,0x6a | $9249
	dc.b	0x95,0x6f,0x95,0x6f,0x95,0x6a,0x95,0x6b | $9251
	dc.b	0x95,0x66,0x95,0x67,0x95,0x3f,0x90,0x3f | $9259
	dc.b	0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f | $9261
	dc.b	0x90,0x3f,0x90,0x6e,0x95,0x3f,0x90,0x3f | $9269
	dc.b	0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f | $9271
	dc.b	0x90,0x3f,0x90,0x6c,0x95,0x6d,0x95,0x72 | $9279
	dc.b	0x95,0x69,0x95,0x71,0x95,0xfe,0x02,0x0a | $9281
	dc.b	0x6e,0x95,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $9289
	dc.b	0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $9291
	dc.b	0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $9299
	dc.b	0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $92a1
	dc.b	0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $92a9
	dc.b	0x3f,0x90,0x3f,0x90,0x65,0x95,0x66,0x95 | $92b1
	dc.b	0x70,0x95,0x6a,0x95,0x6a,0x95,0x68,0x95 | $92b9
	dc.b	0xfe,0x02,0x0b,0x3f,0x90,0x3f,0x90,0x3f | $92c1
	dc.b	0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f | $92c9
	dc.b	0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f | $92d1
	dc.b	0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f | $92d9
	dc.b	0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f | $92e1
	dc.b	0x90,0x3f,0x90,0x40,0x8d,0x41,0x8d,0x3f | $92e9
	dc.b	0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f | $92f1
	dc.b	0x90,0x3f,0x90,0xfe,0x02,0x0c,0x5d,0x95 | $92f9
	dc.b	0x5e,0x95,0x5f,0x95,0x60,0x95,0x5d,0x95 | $9301
	dc.b	0x61,0x95,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $9309
	dc.b	0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $9311
	dc.b	0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $9319
	dc.b	0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $9321
	dc.b	0x42,0x8d,0x3f,0x90,0x3f,0x90,0x3f,0x90 | $9329
	dc.b	0x3f,0x90,0x3f,0x90,0x3f,0x90,0xfe,0x02 | $9331
	dc.b	0x0d,0x3c,0x90,0x3c,0x90,0x3c,0x90,0x3c | $9339
	dc.b	0x90,0x3c,0x90,0x3c,0x90,0x64,0x95,0x62 | $9341
	dc.b	0x95,0x63,0x95,0x62,0x95,0x63,0x95,0x61 | $9349
	dc.b	0x95,0x5d,0x95,0x5f,0x95,0x5f,0x95,0x60 | $9351
	dc.b	0x95,0x3f,0x90,0x3f,0x90,0x3f,0x90,0x43 | $9359
	dc.b	0x95,0x43,0x95,0x44,0x95,0x45,0x95,0x46 | $9361
	dc.b	0x95,0x3f,0x90,0x3f,0x90,0x3f,0x90,0x3f | $9369
	dc.b	0x90,0xfe,0x07,0x0e,0x54,0xfd,0x53,0xfd | $9371
	dc.b	0x52,0xfd,0x51,0xfd,0x50,0xfd,0x4f,0xfd | $9379
	dc.b	0x4e,0xfd,0x4d,0xfd,0x4c,0xfd,0xfe,0x12 | $9381
	dc.b	0x0e,0x4b,0xf5,0xfe,0x16,0x0e,0x4b,0xf5 | $9389
	dc.b	0xfe,0x1a,0x0e,0x4b,0xf5,0xfe,0x02,0x0f | $9391
	dc.b	0x51,0xfd,0x50,0xfd,0x4f,0xfd,0x4e,0xfd | $9399
	dc.b	0x55,0xfd,0x55,0xfd,0x5a,0x05,0x5b,0x05 | $93a1
	dc.b	0x5c,0x05,0x55,0xfd,0x4d,0xfd,0x4c,0xfd | $93a9
	dc.b	0xfe,0x02,0x10,0x55,0xfd,0x55,0xfd,0x55 | $93b1
	dc.b	0xfd,0x58,0x05,0x59,0x05,0x57,0x05,0x55 | $93b9
	dc.b	0xfd,0x55,0xfd,0x4d,0xfd,0x4c,0xfd,0xfe | $93c1
	dc.b	0x0f,0x10,0x4b,0xf5,0xfe,0x14,0x10,0x4b | $93c9
	dc.b	0xf5,0xfe,0x02,0x11,0x56,0x05,0x57,0x05 | $93d1
	dc.b	0x55,0xfd,0x55,0xfd,0x55,0xfd,0x55,0xfd | $93d9
	dc.b	0x4d,0xfd,0x4c,0xfd,0xfe,0x0c,0x11,0x4b | $93e1
	dc.b	0xf5,0xfe,0x16,0x11,0x4b,0xf5,0xfe,0x19 | $93e9
	dc.b	0x11,0x4b,0xf5,0xfe,0x02,0x12,0x55,0xfd | $93f1
	dc.b	0x55,0xfd,0x55,0xfd,0x55,0xfd,0x4d,0xfd | $93f9
	dc.b	0x4c,0xfd,0xfe,0x1b,0x12,0x4b,0xf5,0xfe | $9401
	dc.b	0x02,0x13,0x55,0xfd,0x55,0xfd,0x4d,0xfd | $9409
	dc.b	0x4c,0xfd,0xfe,0x02,0x14,0x4d,0xfd,0x4c | $9411
	dc.b	0xfd,0xfe,0x06,0x14,0x4a,0xf5,0xfe,0x09 | $9419
	dc.b	0x15,0x4a,0xf5,0xfe,0x0f,0x16,0x4a,0xf5 | $9421
	dc.b	0xfe,0x17,0x16,0x4a,0xf5,0xfe,0x0a,0x1b | $9429
	dc.b	0x48,0xf5,0x49,0xf5,0xfe,0x13,0x1c,0x48 | $9431
	dc.b	0xf5,0x49,0xf5,0xfe,0x18,0x1c,0x48,0xf5 | $9439
	dc.b	0x49,0xf5,0xfe,0x0f,0x1c,0x48,0xf5,0x49 | $9441
	dc.b	0xf5,0xff,0x02,0x00,0x3d,0x18,0x3d,0x18 | $9449
	dc.b	0x3d,0x18,0xfe,0x1b,0x00,0x3d,0x18,0x3d | $9451
	dc.b	0x18,0x3d,0x18,0xfe,0x02,0x01,0x3d,0x18 | $9459
	dc.b	0x3d,0x18,0x3d,0x18,0xfe,0x1b,0x01,0x3d | $9461
	dc.b	0x18,0x7b,0x1d,0x3d,0x18,0xfe,0x02,0x02 | $9469
	dc.b	0x7b,0x1d,0x7c,0x1d,0x7d,0x1d,0xfe,0x1b | $9471
	dc.b	0x02,0x7e,0x1d,0x3d,0x18,0x3d,0x18,0xfe | $9479
	dc.b	0x02,0x03,0x3d,0x18,0x3d,0x18,0x3d,0x18 | $9481
	dc.b	0xfe,0x1b,0x03,0x3d,0x18,0x3d,0x18,0x3d | $9489
	dc.b	0x18,0xfe,0x02,0x04,0x3d,0x18,0x3d,0x18 | $9491
	dc.b	0x7b,0x1d,0xfe,0x1b,0x04,0x80,0x1d,0x3d | $9499
	dc.b	0x18,0x3d,0x18,0xfe,0x02,0x05,0x3d,0x18 | $94a1
	dc.b	0x3d,0x18,0x3d,0x18,0xfe,0x1b,0x05,0x80 | $94a9
	dc.b	0x1d,0x7d,0x1d,0x7e,0x1d,0xfe,0x02,0x06 | $94b1
	dc.b	0x3c,0x00,0x3c,0x00,0xad,0xcd,0xfe,0x1b | $94b9
	dc.b	0x06,0x80,0x1d,0x3d,0x18,0x3d,0x18,0xfe | $94c1
	dc.b	0x02,0x07,0x3c,0x00,0x3c,0x00,0xac,0xcd | $94c9
	dc.b	0xfe,0x1b,0x07,0x3c,0x00,0x3d,0x18,0x3d | $94d1
	dc.b	0x18,0xfe,0x02,0x08,0x3c,0x00,0x3c,0x00 | $94d9
	dc.b	0xac,0xcd,0xac,0xcd,0xac,0xcd,0xac,0xcd | $94e1
	dc.b	0x7c,0x1d,0x7d,0x1d,0x7e,0x1d,0x3d,0x18 | $94e9
	dc.b	0x3d,0x18,0x3d,0x18,0x3d,0x18,0x3d,0x18 | $94f1
	dc.b	0x3d,0x18,0x3d,0x18,0x3d,0x18,0x3d,0x18 | $94f9
	dc.b	0x7f,0x1d,0x80,0x1d,0x3c,0x00,0x3c,0x00 | $9501
	dc.b	0x3c,0x00,0x80,0x1d,0x7f,0x1d,0x80,0x1d | $9509
	dc.b	0x3d,0x18,0x3d,0x18,0xfe,0x02,0x09,0x3c | $9511
	dc.b	0x00,0x3c,0x00,0xac,0xcd,0xac,0xcd,0xac | $9519
	dc.b	0xcd,0xac,0xcd,0x3d,0x18,0x3d,0x18,0x3d | $9521
	dc.b	0x18,0x3d,0x18,0x3d,0x18,0x3d,0x18,0x3d | $9529
	dc.b	0x18,0x3d,0x18,0x7b,0x1d,0x7c,0x1d,0x7d | $9531
	dc.b	0x1d,0x7e,0x1d,0x7f,0x1d,0x80,0x1d,0x7f | $9539
	dc.b	0x1d,0x80,0x1d,0x7f,0x1d,0x3c,0x00,0x7f | $9541
	dc.b	0x1d,0x80,0x1d,0x3d,0x18,0x3d,0x18,0xfe | $9549
	dc.b	0x02,0x0a,0x3c,0x00,0x3c,0x00,0xac,0xcd | $9551
	dc.b	0xac,0xcd,0xac,0xcd,0xac,0xcd,0x3d,0x18 | $9559
	dc.b	0x3d,0x18,0x3d,0x18,0x3d,0x18,0x3d,0x18 | $9561
	dc.b	0x3d,0x18,0x3d,0x18,0x7e,0x1d,0x3d,0x18 | $9569
	dc.b	0x3d,0x18,0x3d,0x18,0x3d,0x18,0x7f,0x1d | $9571
	dc.b	0x80,0x1d,0x7f,0x1d,0x80,0x1d,0x7f,0x1d | $9579
	dc.b	0x3e,0x18,0x7f,0x1d,0x80,0x1d,0x81,0x1d | $9581
	dc.b	0x82,0x1d,0xfe,0x02,0x0b,0x3c,0x00,0x3c | $9589
	dc.b	0x00,0xac,0xcd,0xac,0xcd,0xac,0xcd,0xac | $9591
	dc.b	0xcd,0xa2,0x15,0xa2,0x15,0xa2,0x15,0xa1 | $9599
	dc.b	0x1d,0x3d,0x18,0x3d,0x18,0x3d,0x18,0x3d | $95a1
	dc.b	0x18,0x3d,0x18,0x3d,0x18,0x3d,0x18,0x3d | $95a9
	dc.b	0x18,0x7f,0x1d,0x80,0x1d,0x7f,0x1d,0x80 | $95b1
	dc.b	0x1d,0x3c,0x00,0x3c,0x00,0x81,0x1d,0x82 | $95b9
	dc.b	0x1d,0x85,0x1d,0x86,0x1d,0xfe,0x02,0x0c | $95c1
	dc.b	0x3c,0x00,0x3c,0x00,0xac,0xcd,0xac,0xcd | $95c9
	dc.b	0xac,0xcd,0xac,0xcd,0xa2,0x15,0xa2,0x15 | $95d1
	dc.b	0xa2,0x15,0xa0,0x15,0x3d,0x18,0x9f,0x1d | $95d9
	dc.b	0x9d,0x1d,0x99,0x1d,0x3d,0x18,0x3d,0x18 | $95e1
	dc.b	0x3d,0x18,0x3d,0x18,0x3c,0x00,0x80,0x1d | $95e9
	dc.b	0x3c,0x00,0x80,0x1d,0x7f,0x1d,0x80,0x1d | $95f1
	dc.b	0x87,0x1d,0x88,0x1d,0x89,0x1d,0x8a,0x1d | $95f9
	dc.b	0xfe,0x02,0x0d,0xab,0x15,0xab,0x15,0xab | $9601
	dc.b	0x15,0xab,0x15,0xab,0x15,0xa6,0x15,0xa3 | $9609
	dc.b	0x15,0xa4,0x15,0xa2,0x15,0x9b,0x1d,0x93 | $9611
	dc.b	0xe5,0x3d,0x10,0x93,0xe5,0x9b,0x1d,0x3d | $9619
	dc.b	0x18,0x93,0xe5,0x94,0x1d,0x3d,0x18,0x7f | $9621
	dc.b	0x1d,0x3c,0x00,0x3c,0x00,0x80,0x1d,0x7f | $9629
	dc.b	0x1d,0x80,0x1d,0x8b,0x1d,0x8c,0x1d,0x8d | $9631
	dc.b	0x1d,0x8e,0x1d,0xfe,0x02,0x0e,0x3e,0x58 | $9639
	dc.b	0x3e,0x58,0x3e,0x58,0x3e,0x58,0xa7,0x5d | $9641
	dc.b	0x3e,0x58,0xaa,0x5d,0xa2,0x15,0xa2,0x15 | $9649
	dc.b	0x9c,0x1d,0x93,0xe5,0x93,0xe5,0x93,0xe5 | $9651
	dc.b	0x9c,0x1d,0x3d,0x18,0x93,0xe5,0x96,0x1d | $9659
	dc.b	0x92,0x1d,0x7f,0x1d,0x80,0x1d,0x7f,0x1d | $9661
	dc.b	0x80,0x1d,0x7f,0x1d,0x3c,0x00,0x8f,0x1d | $9669
	dc.b	0x90,0x1d,0x91,0x1d,0x84,0x1d,0xfe,0x02 | $9671
	dc.b	0x0f,0xa9,0x5d,0xa9,0x5d,0xa9,0x5d,0xa9 | $9679
	dc.b	0x5d,0xa8,0x5d,0xa9,0x5d,0xaa,0x5d,0xa2 | $9681
	dc.b	0x15,0xa2,0x15,0x9e,0x1d,0x3d,0x10,0x93 | $9689
	dc.b	0xe5,0x93,0xe5,0x9e,0x1d,0x98,0x25,0x93 | $9691
	dc.b	0xe5,0x97,0x1d,0x3c,0x00,0x7f,0x1d,0x80 | $9699
	dc.b	0x1d,0x7f,0x1d,0x80,0x1d,0x7f,0x1d,0x3c | $96a1
	dc.b	0x00,0x83,0x1d,0x84,0x1d,0x84,0x1d,0x84 | $96a9
	dc.b	0x1d,0xfe,0x02,0x10,0xa9,0x5d,0xa9,0x5d | $96b1
	dc.b	0xa9,0x5d,0xa9,0x5d,0xa8,0x5d,0xa9,0x5d | $96b9
	dc.b	0xaa,0x5d,0xa2,0x15,0xa2,0x15,0x9e,0x1d | $96c1
	dc.b	0x3d,0x10,0x3d,0x10,0x3d,0x10,0x9e,0x1d | $96c9
	dc.b	0x9a,0x25,0x93,0xe5,0x3c,0x00,0x3c,0x00 | $96d1
	dc.b	0x3c,0x00,0x3c,0x00,0x3c,0x00,0x3c,0x00 | $96d9
	dc.b	0x3c,0x00,0x3c,0x00,0x83,0x1d,0x84,0x1d | $96e1
	dc.b	0x84,0x1d,0x84,0x1d,0xfe,0x02,0x11,0x3f | $96e9
	dc.b	0xd8,0x3f,0xd8,0x75,0xdd,0x76,0xdd,0x73 | $96f1
	dc.b	0xdd,0x74,0xdd,0xfe,0x18,0x11,0x77,0xdd | $96f9
	dc.b	0x78,0xdd,0x79,0xdd,0x7a,0xdd,0x3f,0xd8 | $9701
	dc.b	0x3f,0xd8,0xfe,0x02,0x12,0x73,0xdd,0x74 | $9709
	dc.b	0xdd,0xfe,0x1c,0x12,0x77,0xdd,0x78,0xdd | $9711
	dc.b	0xff,0x02,0x00,0x3c,0x88,0x3c,0x88,0x3c | $9719
	dc.b	0x88,0xfe,0x1b,0x00,0x3c,0x88,0x3c,0x88 | $9721
	dc.b	0x3c,0x88,0xfe,0x02,0x01,0x3c,0x88,0x3c | $9729
	dc.b	0x88,0x3c,0x88,0xfe,0x1b,0x01,0x3c,0x88 | $9731
	dc.b	0x3c,0x88,0x3c,0x88,0xfe,0x02,0x02,0xae | $9739
	dc.b	0x95,0xae,0x95,0xae,0x95,0xfe,0x1b,0x02 | $9741
	dc.b	0x3c,0x88,0x3c,0x88,0x3c,0x88,0xfe,0x02 | $9749
	dc.b	0x03,0xaf,0x15,0xaf,0x15,0xaf,0x15,0xfe | $9751
	dc.b	0x1b,0x03,0x3c,0x88,0x3c,0x88,0x3c,0x88 | $9759
	dc.b	0xfe,0x02,0x04,0xaf,0x15,0xaf,0x15,0xaf | $9761
	dc.b	0x15,0xfe,0x1b,0x04,0x3c,0x88,0x3c,0x88 | $9769
	dc.b	0x3c,0x88,0xfe,0x02,0x05,0xaf,0x15,0xaf | $9771
	dc.b	0x15,0xaf,0x15,0xfe,0x1b,0x05,0x3c,0x88 | $9779
	dc.b	0x3c,0x88,0x3c,0x88,0xfe,0x02,0x06,0xb0 | $9781
	dc.b	0x15,0xb0,0x15,0xb0,0x15,0xfe,0x1b,0x06 | $9789
	dc.b	0x3c,0x88,0x3c,0x88,0x3c,0x88,0xfe,0x02 | $9791
	dc.b	0x07,0x3f,0x00,0x3f,0x00,0x3f,0x00,0xfe | $9799
	dc.b	0x1b,0x07,0xc4,0xdd,0xc5,0xdd,0xc6,0xdd | $97a1
	dc.b	0xfe,0x02,0x08,0x3f,0x00,0x3f,0x00,0x3f | $97a9
	dc.b	0x00,0x3f,0x00,0x3f,0x00,0x3f,0x00,0x3f | $97b1
	dc.b	0x00,0x3f,0x00,0x3f,0x00,0x3f,0x00,0x3f | $97b9
	dc.b	0x00,0x3f,0x00,0x3f,0x00,0x3f,0x00,0x3f | $97c1
	dc.b	0x00,0x3f,0x00,0x3f,0x00,0x3f,0x00,0x3c | $97c9
	dc.b	0x88,0x3c,0x88,0x3c,0x88,0x3c,0x88,0x3c | $97d1
	dc.b	0x88,0x3c,0x88,0x3c,0x88,0xcd,0xdd,0xce | $97d9
	dc.b	0xdd,0xcf,0xdd,0xfe,0x02,0x09,0x3f,0x00 | $97e1
	dc.b	0x3f,0x00,0xb1,0x05,0xb2,0x05,0x3f,0x00 | $97e9
	dc.b	0x3f,0x00,0xb1,0x05,0xb2,0x05,0x3f,0x00 | $97f1
	dc.b	0x3f,0x00,0xb1,0x05,0xb2,0x05,0x3f,0x00 | $97f9
	dc.b	0x3f,0x00,0xb1,0x05,0xb2,0x05,0x3f,0x00 | $9801
	dc.b	0x3f,0x00,0x3c,0x88,0x3c,0x88,0xb9,0x8d | $9809
	dc.b	0xb8,0x8d,0xbf,0x8d,0xc0,0x8d,0x3c,0x88 | $9811
	dc.b	0xe4,0xdd,0xe5,0xdd,0xe6,0xdd,0xfe,0x02 | $9819
	dc.b	0x0a,0x3f,0x00,0x3f,0x00 | $9821
table_9826:
	dc.b	0x3c,0x00,0xb3,0x05,0x3f,0x00,0x3f,0x00 | table_9826
	dc.b	0x3c,0x00,0xb3,0x05,0x3f,0x00,0x3f,0x00 | $982e
	dc.b	0x3c,0x00,0xb3,0x05,0x3f,0x00 | $9836
table_983c:
	dc.b	0x3f,0x00,0x3c,0x00,0xb3,0x05,0x3f,0x00 | $983c
	dc.b	0x3f,0x00,0x3c,0x88,0xbb,0x8d,0xba,0x8d | $9844
	dc.b	0xbc,0x8d,0xbe,0x8d,0xc1,0x8d,0xe7,0xdd | $984c
	dc.b	0xe8,0xdd,0xe9,0xdd,0xea,0xdd,0xfe,0x02 | $9854
	dc.b	0x0b,0x3f,0x00,0x3f,0x00,0x3f,0x00,0x3f | $985c
	dc.b	0x00,0x3f,0x00,0x3f,0x00,0x3f,0x00,0x3f | $9864
	dc.b	0x00,0x3f,0x00,0x3f,0x00,0x3f,0x00,0x3f | $986c
	dc.b	0x00,0x3f,0x00,0x3f,0x00,0x3f,0x00,0x3f | $9874
	dc.b	0x00,0x3f,0x00,0x3f,0x00,0x3d,0x88,0x3d | $987c
	dc.b	0x88,0xbd,0x8d,0x3d,0x88,0xe2,0x8d,0x3d | $9884
	dc.b	0x88,0x3d,0x88,0x3d,0x88,0xc3,0xcd,0xc9 | $988c
	dc.b	0x65,0xfe,0x02,0x0c,0xb5,0x05,0xb5,0x05 | $9894
	dc.b	0xb5,0x05,0xb5,0x05,0xb5,0x05,0xb5,0x05 | $989c
	dc.b	0xb5,0x05,0xb5,0x05,0xb5,0x05,0xb5,0x05 | $98a4
	dc.b	0xb5,0x05,0xb5,0x05,0xb5,0x05,0xb5,0x05 | $98ac
	dc.b	0xb5,0x05,0xb5,0x05,0xb5,0x05,0xb4,0x05 | $98b4
	dc.b	0x3c,0x88,0x3c,0x88,0xc4,0xdd,0xc5,0xdd | $98bc
	dc.b	0xc6,0xdd,0xc7,0xdd,0xc8,0xdd,0x3c,0x88 | $98c4
	dc.b	0x3c,0x88,0xca,0x65,0xfe,0x02,0x0d,0xb6 | $98cc
	dc.b	0x05,0xb6,0x05,0xb6,0x05,0xb6,0x05,0xb6 | $98d4
	dc.b	0x05,0xb6,0x05,0xb6,0x05,0xb6,0x05,0xb6 | $98dc
	dc.b	0x05,0xb6,0x05,0xb6,0x05,0xb6,0x05,0xb6 | $98e4
	dc.b	0x05,0xb6,0x05,0xb6,0x05,0xb6,0x05,0xb6 | $98ec
	dc.b	0x05,0xb7,0x05,0x3c,0x88,0x3c,0x88,0xcd | $98f4
	dc.b	0xdd,0xce,0xdd,0xcf,0xdd,0xd0,0xdd,0xe3 | $98fc
	dc.b	0x65,0xd3,0x65,0xd1,0x65,0xcb,0x65,0xfe | $9904
	dc.b	0x02,0x0e,0xe0,0x05,0xe0,0x05,0xe0,0x05 | $990c
	dc.b	0xe0,0x05,0xe0,0x05,0xe0,0x05,0xe0,0x05 | $9914
	dc.b	0xe0,0x05,0xe0,0x05,0xe0,0x05,0xe0,0x05 | $991c
	dc.b	0xe0,0x05,0xe0,0x05,0xe0,0x05,0xe0,0x05 | $9924
	dc.b	0xe0,0x05,0xe0,0x05,0xe1,0x05,0x3c,0x88 | $992c
	dc.b	0x3c,0x88,0x3c,0x88,0x3c,0x88,0x3c,0x88 | $9934
	dc.b	0x3c,0x88,0x3c,0x88,0xd4,0x65,0xd2,0x65 | $993c
	dc.b	0x3c,0x88,0xfe,0x14,0x0f,0xd5,0xfd,0xd6 | $9944
	dc.b	0xfd,0xeb,0xfd,0xeb,0xfd,0xd8,0xfd,0xd9 | $994c
	dc.b	0xfd,0xeb,0xfd,0xeb,0xfd,0xd8,0xfd,0xd9 | $9954
	dc.b	0xfd,0xfe,0x15,0x10,0xd7,0xfd,0xd5,0xfd | $995c
	dc.b	0xd6,0xfd,0xeb,0xfd,0xeb,0xfd,0xd8,0xfd | $9964
	dc.b	0xd9,0xfd,0xeb,0xfd,0xeb,0xfd,0xfe,0x17 | $996c
	dc.b	0x11,0xd7,0xfd,0xda,0xfd,0xdb,0xfd,0xdc | $9974
	dc.b	0xfd,0xdc,0xfd,0xde,0xfd,0xdf,0xfd,0xfe | $997c
	dc.b	0x19,0x12,0xd7,0xfd,0xd5,0xfd,0xd6,0xfd | $9984
	dc.b	0xeb,0xfd,0xeb,0xfd,0xfe,0x1b,0x13,0xd7 | $998c
	dc.b	0xfd,0xda,0xfd,0xdb,0xfd,0xfe,0x1d,0x14 | $9994
	dc.b	0xd7,0xfd,0xff,0x02,0x00,0x3c,0x10,0x3c | $999c
	dc.b	0x10,0x3c,0x10,0xfe,0x1b,0x00,0x3c,0x10 | $99a4
	dc.b	0x3c,0x10,0x3c,0x10,0xfe,0x02,0x01,0x3c | $99ac
	dc.b	0x10,0x3c,0x10,0x3c,0x10,0xfe,0x1b,0x01 | $99b4
	dc.b	0x3c,0x10,0x3c,0x10,0x3c,0x10,0xfe,0x02 | $99bc
	dc.b	0x02,0x3c,0x10,0x3c,0x10,0x3c,0x10,0xfe | $99c4
	dc.b	0x1b,0x02,0x3c,0x10,0x3c,0x10,0x3c,0x10 | $99cc
	dc.b	0xfe,0x02,0x03,0x3c,0x10,0x3c,0x10,0x3c | $99d4
	dc.b	0x10,0xfe,0x1b,0x03,0x3c,0x10,0x3c,0x10 | $99dc
	dc.b	0x3c,0x10,0xfe,0x02,0x04,0x3c,0x10,0x3c | $99e4
	dc.b	0x10,0x3c,0x10,0xfe,0x1b,0x04,0x3c,0x10 | $99ec
	dc.b	0x3c,0x10,0x3c,0x10,0xfe,0x02,0x05,0x3c | $99f4
	dc.b	0x10,0x3c,0x10,0x3c,0x10,0xfe,0x1b,0x05 | $99fc
	dc.b	0x3c,0x10,0x3c,0x10,0x3c,0x10,0xfe,0x02 | $9a04
	dc.b	0x06,0x3c,0x10,0x3c,0x10,0x3c,0x10,0xfe | $9a0c
	dc.b	0x1b,0x06,0x3c,0x10,0x3c,0x10,0x3c,0x10 | $9a14
	dc.b	0xfe,0x02,0x07,0x3c,0x10,0x3c,0x10,0x3c | $9a1c
	dc.b	0x10,0xfe,0x1b,0x07,0x3c,0x10,0x3c,0x10 | $9a24
	dc.b	0x3c,0x10,0xfe,0x02,0x08,0xed,0x95,0xed | $9a2c
	dc.b	0x95,0xed,0x95,0xed,0x95,0xed,0x95,0xed | $9a34
	dc.b	0x95,0xed,0x95,0xed,0x95,0xed,0x95,0xed | $9a3c
	dc.b	0x95,0xed,0x95,0xed,0x95,0xed,0x95,0xed | $9a44
	dc.b	0x95,0xf0,0x95,0xf1,0x95,0xed,0x95,0xed | $9a4c
	dc.b	0x95,0xed,0x95,0xed,0x95,0xed,0x95,0xed | $9a54
	dc.b	0x95,0xed,0x95,0xed,0x95,0xed,0x95,0xed | $9a5c
	dc.b	0x95,0xed,0x95,0xed,0x95,0xfe,0x02,0x09 | $9a64
	dc.b	0xed,0x95,0xed,0x95,0xed,0x95,0xed,0x95 | $9a6c
	dc.b	0xed,0x95,0xed,0x95,0xed,0x95,0xed,0x95 | $9a74
	dc.b	0xed,0x95,0xed,0x95,0xed,0x95,0xed,0x95 | $9a7c
	dc.b	0xed,0x95,0xed,0x95,0xf2,0x95,0xf3,0x95 | $9a84
	dc.b	0xed,0x95,0xed,0x95,0xed,0x95,0xed,0x95 | $9a8c
	dc.b	0xed,0x95,0xed,0x95,0xed,0x95,0xed,0x95 | $9a94
	dc.b	0xed,0x95,0xed,0x95,0xed,0x95,0xed,0x95 | $9a9c
	dc.b	0xfe,0x02,0x0a,0xec,0x95,0xec,0x95,0xec | $9aa4
	dc.b	0x95,0xec,0x95,0xec,0x95,0xec,0x95,0xec | $9aac
	dc.b	0x95,0xec,0x95,0xec,0x95,0xec,0x95,0xec | $9ab4
	dc.b	0x95,0xec,0x95,0xec,0x95,0xef,0x95,0xf4 | $9abc
	dc.b	0x95,0xec,0x95,0xec,0x95,0xec,0x95,0xec | $9ac4
	dc.b	0x95,0xec,0x95,0xec,0x95,0xec,0x95,0xec | $9acc
	dc.b	0x95,0xec,0x95,0xec,0x95,0xec,0x95,0xec | $9ad4
	dc.b	0x95,0xec,0x95,0xfe,0x02,0x0b,0xec,0x95 | $9adc
	dc.b	0xec,0x95,0xec,0x95,0xec,0x95,0xec,0x95 | $9ae4
	dc.b	0xec,0x95,0xf9,0x8d,0xfa,0x8d,0xfd,0x8d | $9aec
	dc.b	0x00,0x8e,0x01,0x8e,0x02,0x8e,0x03,0x8e | $9af4
	dc.b	0xf5,0x95,0xf6,0x95,0x1c,0x8e,0x1d,0x8e | $9afc
	dc.b	0x1e,0x8e,0x1f,0x8e,0x20,0x8e,0x21,0x8e | $9b04
	dc.b	0x22,0x8e,0xec,0x95,0xec,0x95,0xec,0x95 | $9b0c
	dc.b	0xec,0x95,0xec,0x95,0xec,0x95,0xfe,0x02 | $9b14
	dc.b	0x0c,0xec,0x95,0xec,0x95,0xf9,0x8d,0xfa | $9b1c
	dc.b	0x8d,0xfb,0x8d,0xfc,0x8d,0x3f,0x00,0x3f | $9b24
	dc.b	0x00,0x3f,0x00,0x3f,0x00,0x18,0xc6,0x19 | $9b2c
	dc.b	0xc6,0x1a,0xc6,0x1b,0xc6,0x27,0xc6,0x28 | $9b34
	dc.b	0xc6,0x29,0xc6,0x2a,0xc6,0x3f,0x00,0x3f | $9b3c
	dc.b	0x00,0x3f,0x00,0x3f,0x00,0x23,0x8e,0x24 | $9b44
	dc.b	0x8e,0x25,0x8e,0x26,0x8e,0xec,0x95,0xec | $9b4c
	dc.b	0x95,0xfe,0x02,0x0d,0xf7,0x8d,0xf8,0x8d | $9b54
	dc.b	0x06,0x8e,0x07,0x8e,0x08,0x8e,0x09,0x8e | $9b5c
	dc.b	0x14,0xc6,0x15,0xc6,0x16,0xc6,0x17,0xc6 | $9b64
	dc.b	0x17,0xc6,0x17,0xc6,0x17,0xc6,0x17,0xc6 | $9b6c
	dc.b	0x17,0xc6,0x17,0xc6,0x17,0xc6,0x17,0xc6 | $9b74
	dc.b	0x17,0xc6,0x2b,0xc6,0x2c,0xc6,0x2d,0xc6 | $9b7c
	dc.b	0x3f,0x00,0x3f,0x00,0x3f,0x00,0x3f,0x00 | $9b84
	dc.b	0x23,0x8e,0x24,0x8e,0xfe,0x02,0x0e,0x04 | $9b8c
	dc.b	0x8e,0x05,0x8e,0x0c,0x8e,0x0d,0x8e,0x12 | $9b94
	dc.b	0xc6,0x13,0xc6,0x17,0xc6,0x17,0xc6,0x17 | $9b9c
	dc.b	0xc6,0x17,0xc6,0x33,0xc6,0x32,0xc6,0x3c | $9ba4
	dc.b	0xc0,0x3c,0xc0,0x3c,0xc0,0x3c,0xc0,0x30 | $9bac
	dc.b	0xc6,0x31,0xc6,0x17,0xc6,0x17,0xc6,0x17 | $9bb4
	dc.b	0xc6,0x17,0xc6,0x2e,0xc6,0x2f,0xc6,0x3f | $9bbc
	dc.b	0x00,0x3f,0x00,0x3f,0x00,0x3f,0x00,0xfe | $9bc4
	dc.b	0x02,0x0f,0x0a,0x8e,0x0b,0x8e,0x10,0xc6 | $9bcc
	dc.b	0x11,0xc6,0x17,0xc6,0x17,0xc6,0x17,0xc6 | $9bd4
	dc.b	0x17,0xc6,0x33,0xc6,0x32,0xc6,0x3c,0xc0 | $9bdc
	dc.b	0x3c,0xc0,0x3c,0xc0,0x3c,0xc0,0x3c,0xc0 | $9be4
	dc.b	0x3c,0xc0,0x3c,0xc0,0x3c,0xc0,0x30,0xc6 | $9bec
	dc.b	0x31,0xc6,0x17,0xc6,0x17,0xc6,0x17,0xc6 | $9bf4
	dc.b	0x17,0xc6,0x2e,0xc6,0x2f,0xc6,0x3f,0x00 | $9bfc
	dc.b	0x3f,0x00,0xfe,0x02,0x10,0x0e,0xc6,0x0f | $9c04
	dc.b	0xc6,0x3a,0xc6,0x3a,0xc6,0x36,0xb6,0x37 | $9c0c
	dc.b	0xb6,0x3a,0xc6,0x3a,0xc6,0x35,0xb6,0x34 | $9c14
	dc.b	0xb6,0x34,0xb6,0x34,0xb6,0x34,0xb6,0x34 | $9c1c
	dc.b	0xb6,0x34,0xb6,0x34,0xb6,0x34,0xb6,0x34 | $9c24
	dc.b	0xb6,0x34,0xb6,0x35,0xb6,0x3a,0xc6,0x3a | $9c2c
	dc.b	0xc6,0x36,0xb6,0x37,0xb6,0x3a,0xc6,0x3a | $9c34
	dc.b	0xc6,0x3e,0xc6,0x3f,0xc6,0xfe,0x02,0x11 | $9c3c
	dc.b	0x3b,0xc6,0x3b,0xc6,0x3b,0xc6,0x3b,0xc6 | $9c44
	dc.b	0x38,0xb6,0x39,0xb6,0x3b,0xc6,0x3b,0xc6 | $9c4c
	dc.b	0x3b,0xc6,0x3b,0xc6,0x3b,0xc6,0x3b,0xc6 | $9c54
	dc.b	0x3b,0xc6,0x3b,0xc6,0x3b,0xc6,0x3b,0xc6 | $9c5c
	dc.b	0x3b,0xc6,0x3b,0xc6,0x3b,0xc6,0x3b,0xc6 | $9c64
	dc.b	0x3b,0xc6,0x3b,0xc6,0x38,0xb6,0x39,0xb6 | $9c6c
	dc.b	0x3b,0xc6,0x3b,0xc6,0x3b,0xc6,0x3b,0xc6 | $9c74
	dc.b	0xfe,0x02,0x12,0x3c,0xc6,0x3c,0xc6,0x3c | $9c7c
	dc.b	0xc6,0x3c,0xc6,0x3c,0xc6,0x3c,0xc6,0x3c | $9c84
	dc.b	0xc6,0x3c,0xc6,0x3c,0xc6,0x3c,0xc6,0x3c | $9c8c
	dc.b	0xc6,0x3c,0xc6,0x3c,0xc6,0x3c,0xc6,0x3c | $9c94
	dc.b	0xc6,0x3c,0xc6,0x3c,0xc6,0x3c,0xc6,0x3c | $9c9c
	dc.b	0xc6,0x3c,0xc6,0x3c,0xc6,0x3c,0xc6,0x3c | $9ca4
	dc.b	0xc6,0x3c,0xc6,0x3c,0xc6,0x3c,0xc6,0x3c | $9cac
	dc.b	0xc6,0x3c,0xc6,0xff,0x02,0x00,0x3d,0x30 | $9cb4
	dc.b	0x3d,0x30,0x3d,0x30,0xfe,0x1b,0x00,0x3d | $9cbc
	dc.b	0x30,0x3d,0x30,0x3d,0x30,0xfe,0x02,0x01 | $9cc4
	dc.b	0x3d,0x30,0x3d,0x30,0x3d,0x30,0xfe,0x1b | $9ccc
	dc.b	0x01,0x3d,0x30,0x82,0x36,0x3d,0x30,0xfe | $9cd4
	dc.b	0x02,0x02,0x3d,0x30,0x3d,0x30,0x3d,0x30 | $9cdc
	dc.b	0xfe,0x1b,0x02,0x80,0x36,0x81,0x36,0x3d | $9ce4
	dc.b	0x30,0xfe,0x02,0x03,0x3d,0x30,0x81,0x36 | $9cec
	dc.b	0x80,0x36,0xfe,0x1b,0x03,0x82,0x36,0x3d | $9cf4
	dc.b	0x30,0x3d,0x30,0xfe,0x02,0x04,0x3d,0x30 | $9cfc
	dc.b	0x80,0x36,0x81,0x36,0xfe,0x1b,0x04,0x3d | $9d04
	dc.b	0x30,0x61,0x36,0x60,0x36,0xfe,0x02,0x05 | $9d0c
	dc.b	0x82,0x36,0x3d,0x30,0x3d,0x30,0xfe,0x1b | $9d14
	dc.b	0x05,0x64,0x36,0x62,0x36,0x63,0x36,0xfe | $9d1c
	dc.b	0x02,0x06,0x3d,0x30,0x3d,0x30,0x3d,0x30 | $9d24
	dc.b	0xfe,0x1b,0x06,0x65,0x36,0x3e,0x30,0x3e | $9d2c
	dc.b	0x30,0xfe,0x02,0x07,0x3d,0x30,0x82,0x36 | $9d34
	dc.b	0x3d,0x30,0xfe,0x1b,0x07,0x3e,0x30,0x3e | $9d3c
	dc.b	0x30,0x3e,0x30,0xfe,0x02,0x08,0x3d,0x30 | $9d44
	dc.b	0x3d,0x30,0x82,0x36,0x3d,0x30,0x81,0x36 | $9d4c
	dc.b	0x80,0x36,0x81,0x36,0x3d,0x30,0x7d,0x36 | $9d54
	dc.b	0x7c,0x36,0x3d,0x30,0x3d,0x30,0x3d,0x30 | $9d5c
	dc.b	0x82,0x36,0x81,0x36,0x80,0x36,0x82,0x36 | $9d64
	dc.b	0x3d,0x30,0x68,0x4e,0x67,0x36,0x66,0x36 | $9d6c
	dc.b	0x3e,0x78,0x3e,0x78,0x3e,0x78,0x70,0x7e | $9d74
	dc.b	0x3e,0x78,0x3e,0x78,0x3e,0x78,0xfe,0x02 | $9d7c
	dc.b	0x09,0x3d,0x30,0x3d,0x30,0x46,0x4e,0x3d | $9d84
	dc.b	0x30,0x3d,0x30,0x3d,0x30,0x82,0x36,0x3d | $9d8c
	dc.b	0x30,0x7e,0x36,0x7f,0x36,0x3d,0x30,0x82 | $9d94
	dc.b	0x36,0x81,0x36,0x80,0x36,0x80,0x36,0x81 | $9d9c
	dc.b	0x36,0x3d,0x30,0x6a,0x4e,0x69,0x4e,0x6d | $9da4
	dc.b	0x7e,0x6e,0x7e,0x6f,0x7e,0x84,0x7e,0x83 | $9dac
	dc.b	0x7e,0x71,0x7e,0x75,0x7e,0x3e,0x78,0x3e | $9db4
	dc.b	0x78,0xfe,0x02,0x0a,0x3d,0x30,0x3d,0x30 | $9dbc
	dc.b	0x47,0x4e,0x48,0x4e,0x3d,0x30,0x43,0x4e | $9dc4
	dc.b	0x46,0x4e,0x3d,0x30,0x3d,0x30,0x3d,0x30 | $9dcc
	dc.b	0x3d,0x30,0x3d,0x30,0x3d,0x30,0x3d,0x30 | $9dd4
	dc.b	0x82,0x36,0x3d,0x30,0x6a,0x4e,0x69,0x4e | $9ddc
	dc.b	0x3c,0x48,0x3c,0x48,0x3c,0x48,0x3c,0x48 | $9de4
	dc.b	0x3c,0x48,0x3c,0x48,0x72,0x7e,0x73,0x7e | $9dec
	dc.b	0x74,0x7e,0x3e,0x78,0xfe,0x02,0x0b,0x3d | $9df4
	dc.b	0x30,0x46,0x4e,0x47,0x4e,0x49,0x4e,0x44 | $9dfc
	dc.b	0x4e,0x45,0x4e,0x47,0x4e,0x3d,0x30,0x3d | $9e04
	dc.b	0x30,0x3d,0x30,0x3d,0x30,0x3d,0x30,0x3d | $9e0c
	dc.b	0x30,0x3d,0x30,0x3d,0x30,0x3d,0x30,0x6c | $9e14
	dc.b	0x4e,0x3c,0x48,0x3c,0x48,0x3c,0x48,0x3c | $9e1c
	dc.b	0x48,0x3c,0x48,0x3c,0x48,0x3c,0x48,0x3c | $9e24
	dc.b	0x48,0x3c,0x48,0x85,0x7e,0x3e,0x78,0xfe | $9e2c
	dc.b	0x02,0x0c,0x3d,0x30,0x42,0x4e,0x44,0x4e | $9e34
	dc.b	0x4a,0x4e,0x45,0x4e,0x45,0x4e,0x3d,0x30 | $9e3c
	dc.b	0x3d,0x30,0x4d,0x36,0x4c,0x36,0x4b,0xa6 | $9e44
	dc.b	0x0a,0xb4,0x31,0xa4,0x31,0xa4,0x31,0xa4 | $9e4c
	dc.b	0x31,0xa4,0x31,0xa4,0x0a,0xb4,0x31,0xa4 | $9e54
	dc.b	0x31,0xa4,0x4b,0xf5,0x3d,0x70,0x76,0xa6 | $9e5c
	dc.b	0x77,0xa6,0x78,0xa6,0x79,0xa6,0x3e,0x78 | $9e64
	dc.b	0x3e,0x78,0xfe,0x02,0x0d,0x3d,0x30,0x3d | $9e6c
	dc.b	0x30,0x42,0x4e,0x43,0x4e,0x3d,0x30,0x3d | $9e74
	dc.b	0x30,0x50,0x36,0x4f,0x36,0x4e,0x36,0x3e | $9e7c
	dc.b	0x78,0x56,0xa6,0x3d,0x70,0x09,0xb4,0xfe | $9e84
	dc.b	0x18,0x0d,0x09,0xb4,0x3d,0x70,0x09,0xb4 | $9e8c
	dc.b	0x3d,0x70,0x7a,0xa6,0x7b,0xa6,0xfe,0x02 | $9e94
	dc.b	0x0e,0x3d,0x30,0x3d,0x30,0x41,0x4e,0x3d | $9e9c
	dc.b	0x30,0x53,0x36,0x52,0x36,0x51,0x36,0x3e | $9ea4
	dc.b	0x78,0x58,0xa6,0x57,0xa6,0x0a,0xb4,0xfe | $9eac
	dc.b	0x1c,0x0e,0x4b,0xf5,0xfe,0x02,0x0f,0x3d | $9eb4
	dc.b	0x30,0x3d,0x30,0x40,0x4e,0x41,0x4e,0x54 | $9ebc
	dc.b	0xa6,0x5a,0xa6,0x5a,0xa6,0x57,0xa6,0xfe | $9ec4
	dc.b	0x19,0x0f,0x20,0x84,0x21,0x84,0x22,0x84 | $9ecc
	dc.b	0xfe,0x02,0x10,0x4b,0xf5,0x3d,0x70,0x3d | $9ed4
	dc.b	0x70,0x3d,0x70,0x0a,0xb4,0x3d,0x70,0x3d | $9edc
	dc.b	0x70,0x3d,0x70,0x09,0xb4,0xfe,0x19,0x10 | $9ee4
	dc.b	0x1d,0x84,0x1e,0x84,0x1f,0x84,0x0a,0xb4 | $9eec
	dc.b	0x3d,0x70,0xfe,0x04,0x11,0x09,0xb4,0x3d | $9ef4
	dc.b	0x70,0x3d,0x70,0x3d,0x70,0x48,0xf5,0x49 | $9efc
	dc.b	0xf5,0xfe,0x1b,0x11,0x09,0xb4,0xfe,0x05 | $9f04
	dc.b	0x12,0x09,0xb4,0xfe,0x1b,0x12,0x09,0xb4 | $9f0c
	dc.b	0xfe,0x02,0x13,0x09,0xb4,0xfe,0x1c,0x13 | $9f14
	dc.b	0x09,0xb4,0xfe,0x1a,0x14,0x0a,0xb4,0xfe | $9f1c
	dc.b	0x1d,0x15,0x86,0xa6,0xfe,0x1a,0x16,0x0a | $9f24
	dc.b	0xb4,0x3d,0x70,0x3d,0x70,0x87,0xa6,0xfe | $9f2c
	dc.b	0x02,0x17,0x09,0xb4,0xfe,0x19,0x17,0x09 | $9f34
	dc.b	0xb4,0x3d,0x70,0x3d,0x70,0x88,0xa6,0x3e | $9f3c
	dc.b	0x78,0xfe,0x02,0x18,0x3d,0x70,0x0a,0xb4 | $9f44
	dc.b	0x17,0x84,0x18,0x84,0x19,0x84,0x1a,0x84 | $9f4c
	dc.b	0xfe,0x16,0x18,0x09,0xb4,0x3d,0x70,0x3d | $9f54
	dc.b	0x70,0x3d,0x70,0x8a,0xa6,0x89,0xa6,0x3e | $9f5c
	dc.b	0x78,0x3e,0x78,0xfe,0x02,0x19,0x3d,0x70 | $9f64
	dc.b	0x11,0x84,0x12,0x84,0x13,0x84,0x14,0x84 | $9f6c
	dc.b	0x15,0x84,0x16,0x84,0xfe,0x17,0x19,0x0a | $9f74
	dc.b	0xb4,0x3d,0x70,0x88,0xa6,0x3e,0x78,0x3e | $9f7c
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0xfe,0x03,0x1a | $9f84
	dc.b	0x0b,0x84,0x0c,0x84,0x0d,0x84,0x0e,0x84 | $9f8c
	dc.b	0x0f,0x84,0x10,0x84,0x3d,0x70,0x3d,0x70 | $9f94
	dc.b	0x0a,0xb4,0x3d,0x70,0x3d,0x70,0x09,0xb4 | $9f9c
	dc.b	0x3d,0x70,0x3d,0x70,0x3d,0x70,0x0a,0xb4 | $9fa4
	dc.b	0x09,0xb4,0x5b,0xa6,0x5c,0xa6,0x5d,0xa6 | $9fac
	dc.b	0x89,0xa6,0x3e,0x78,0x3e,0x78,0x3e,0x78 | $9fb4
	dc.b	0x3e,0x78,0x3e,0x78,0x3e,0x78,0xfe,0x02 | $9fbc
	dc.b	0x1b,0x4b,0xf5,0x3d,0x70,0x3d,0x70,0x3d | $9fc4
	dc.b	0x70,0x3d,0x70,0x3d,0x70,0x3d,0x70,0x3d | $9fcc
	dc.b	0x70,0x09,0xb4,0x3d,0x70,0x5b,0xa6,0x5c | $9fd4
	dc.b	0xa6,0x5d,0xa6,0x5e,0xa6,0x5b,0xa6,0x5c | $9fdc
	dc.b	0xa6,0x5d,0xa6,0x89,0xa6,0x3e,0x78,0x3e | $9fe4
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $9fec
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $9ff4
	dc.b	0x78,0xfe,0x02,0x1c,0x5d,0xa6,0x89,0xa6 | $9ffc
	dc.b	0x5f,0xa6,0x5d,0xa6,0x5c,0xa6,0x89,0xa6 | $a004
	dc.b	0x5f,0xa6,0x5d,0xa6,0x5c,0xa6,0x89,0xa6 | $a00c
	dc.b	0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78 | $a014
	dc.b	0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78 | $a01c
	dc.b	0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78 | $a024
	dc.b	0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78 | $a02c
	dc.b	0x3e,0x78,0x3e,0x78,0xfe,0x02,0x1d,0x3e | $a034
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $a03c
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $a044
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $a04c
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $a054
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $a05c
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $a064
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0xfe | $a06c
	dc.b	0x02,0x1e,0x3e,0x78,0x3e,0x78,0x3e,0x78 | $a074
	dc.b	0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78 | $a07c
	dc.b	0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78 | $a084
	dc.b	0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78 | $a08c
	dc.b	0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78 | $a094
	dc.b	0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78 | $a09c
	dc.b	0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78 | $a0a4
	dc.b	0x3e,0x78,0xfe,0x02,0x1f,0x3e,0x78,0x3e | $a0ac
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $a0b4
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $a0bc
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $a0c4
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $a0cc
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $a0d4
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0x3e,0x78,0x3e | $a0dc
	dc.b	0x78,0x3e,0x78,0x3e,0x78,0xff | $a0e4
table_a0ea:
	dc.b	0x0c,0x02,0x3f,0x18,0xbd,0x19,0xbe,0x19 | table_a0ea
	dc.b	0x3f,0x18,0x3f,0x18,0xbf,0x19,0xc0,0x19 | $a0f2
	dc.b	0xc1,0x19,0xfe,0x0c,0x03,0x3f,0x18,0xc2 | $a0fa
	dc.b	0x19,0xc3,0x19,0xc4,0x19,0xc5,0x19,0xc6 | $a102
	dc.b	0x19,0xc7,0x19,0xc8,0x19,0xfe,0x0c,0x04 | $a10a
	dc.b	0xc9,0x19,0xca,0x19,0xcb,0x19,0xcc,0x19 | $a112
	dc.b	0xcd,0x19,0xce,0x19,0xcf,0x19,0xfe,0x0c | $a11a
	dc.b	0x05,0xd0,0x19,0xd1,0x19,0xd2,0x19,0xd3 | $a122
	dc.b	0x19,0xd4,0x19,0xd5,0x19,0xd6,0x19,0xd7 | $a12a
	dc.b	0x19,0xfe,0x0c,0x06,0xd8,0x19,0xd9,0x19 | $a132
	dc.b	0xda,0x19,0xdb,0x19,0xdc,0x19,0xdd,0x19 | $a13a
	dc.b	0xde,0x19,0xdf,0x19,0xfe,0x0c,0x07,0xe0 | $a142
	dc.b	0x19,0xe1,0x19,0xe2,0x19,0xe3,0x19,0xe4 | $a14a
	dc.b	0x19,0xe5,0x19,0xe6,0x19,0xe7,0x19,0xfe | $a152
	dc.b	0x0c,0x08,0xe8,0x19,0xe9,0x19,0x3f,0x18 | $a15a
	dc.b	0xea,0x19,0xeb,0x19,0xec,0x19,0xed,0x19 | $a162
	dc.b	0xee,0x19,0xfe,0x0c,0x09,0xef,0x19,0xf0 | $a16a
	dc.b	0x19,0xf1,0x19,0xf2,0x19,0xf3,0x19,0xf4 | $a172
	dc.b	0x19,0xf5,0x19,0xf6,0x19,0xfe,0x0c,0x0a | $a17a
	dc.b	0xf7,0x19,0xf8,0x19,0xf9,0x19,0xfa,0x19 | $a182
	dc.b	0xfb,0x19,0xfc,0x19,0xfd,0x19,0xf6,0x1b | $a18a
	dc.b	0xfe,0x0c,0x0b,0xf7,0x1b,0x00,0x1a,0x01 | $a192
	dc.b	0x1a,0x02,0x1a,0x03,0x1a,0x3f,0x18,0x04 | $a19a
	dc.b	0x1a,0xfe,0x0c,0x0c,0x3f,0x18,0x05,0x1a | $a1a2
	dc.b	0x06,0x1a,0x07,0x1a,0x08,0x1a,0x09,0x1a | $a1aa
	dc.b	0x0a,0x1a,0x0b,0x1a,0xfe,0x0c,0x0d,0x0c | $a1b2
	dc.b	0x1a,0x0d,0x1a,0x0e,0x1a,0x0f,0x1a,0x10 | $a1ba
	dc.b	0x1a,0x11,0x1a,0x12,0x1a,0x13,0x1a,0xfe | $a1c2
	dc.b	0x0c,0x0e,0x14,0x1a,0x15,0x1a,0x16,0x1a | $a1ca
	dc.b	0x17,0x1a,0x18,0x1a,0x19,0x1a,0x1a,0x1a | $a1d2
	dc.b	0x1b,0x1a,0xfe,0x0c,0x0f,0x1c,0x1a,0x1d | $a1da
	dc.b	0x1a,0x1e,0x1a,0x1f,0x1a,0x20,0x1a,0x21 | $a1e2
	dc.b	0x1a,0xfe,0x0c,0x10,0x22,0x1a,0x23,0x1a | $a1ea
	dc.b	0x3f,0x18,0x24,0x1a,0x25,0x1a,0x26,0x1a | $a1f2
	dc.b	0xfe,0x0c,0x11,0x27,0x1a,0x28,0x1a,0x29 | $a1fa
	dc.b	0x1a,0x2a,0x1a,0x2b,0x1a,0x2c,0x1a,0xfe | $a202
	dc.b	0x0c,0x12,0x2d,0x1a,0x2e,0x1a,0x2f,0x1a | $a20a
	dc.b	0x30,0x1a,0x31,0x1a,0x32,0x1a,0x33,0x1a | $a212
	dc.b	0xfe,0x0c,0x13,0x34,0x1a,0x35,0x1a,0x36 | $a21a
	dc.b	0x1a,0x37,0x1a,0x38,0x1a,0x39,0x1a,0x3a | $a222
	dc.b	0x1a,0xfe,0x0c,0x14,0x3b,0x1a,0x3c,0x1a | $a22a
	dc.b	0x3d,0x1a,0x3e,0x1a,0x3f,0x1a,0x40,0x1a | $a232
	dc.b	0x41,0x1a,0xfe,0x0c,0x15,0xac,0x1a,0xad | $a23a
	dc.b	0x1a,0x3f,0x18,0xae,0x1a,0xaf,0x1a,0xb0 | $a242
	dc.b	0x1a,0xfe,0x0c,0x16,0xb1,0x1a,0xb2,0x1a | $a24a
	dc.b	0xf0,0x1b,0xf1,0x1b,0xf2,0x1b,0xfe,0x0c | $a252
	dc.b	0x17,0xf3,0x1b,0xf4,0x1b,0xff | $a25a
table_a260:
	dc.b	0x02,0x1c,0x3c,0x98,0x3c,0x98,0x3c,0x98 | table_a260
	dc.b	0x3c,0x98,0x3c,0x98,0x3c,0x98,0x3c,0x98 | $a268
	dc.b	0x3c,0x98,0x3c,0x98,0x3c,0x88,0xac,0xd8 | $a270
	dc.b	0xad,0xd8,0x3c,0x88,0x3c,0x98,0x3c,0x98 | $a278
	dc.b	0x3c,0x88,0xac,0xd8,0xad,0xd8,0x3c,0x88 | $a280
	dc.b	0x3c,0x98,0xb8,0xe0,0xb9,0xe0,0xba,0xe0 | $a288
	dc.b	0xbb,0xe0,0xbc,0xe0,0xbd,0xe0,0xbe,0xe0 | $a290
	dc.b	0x3f,0x10,0xfe,0x02,0x1d,0x3c,0x98,0x3c | $a298
	dc.b	0x98,0x3c,0x98,0x3c,0x98,0x3c,0x98,0x3c | $a2a0
	dc.b	0x98,0x3c,0x98,0x3c,0x98,0x3c,0x98,0xae | $a2a8
	dc.b	0xd8,0xaf,0x88,0xb0,0x88,0xb1,0xd8,0x3c | $a2b0
	dc.b	0x98,0x3c,0x98,0xae,0xd8,0xaf,0x88,0xb0 | $a2b8
	dc.b	0x88,0xb1,0xd8,0x3c,0x98,0xbf,0xe0,0xc0 | $a2c0
	dc.b	0xe0,0xc1,0xe0,0xc2,0xe0,0xc3,0xe0,0xc4 | $a2c8
	dc.b	0xe0,0xc5,0xe0,0x3f,0x10,0xfe,0x02,0x1e | $a2d0
	dc.b	0x3c,0x98,0x3c,0x98,0x3c,0x98,0x3c,0x98 | $a2d8
	dc.b	0x3c,0x98,0x3c,0x98,0x3c,0x98,0x3c,0x98 | $a2e0
	dc.b	0x3c,0x98,0xb2,0xd8,0xb3,0x88,0xb4,0x88 | $a2e8
	dc.b	0xb5,0xd8,0x3c,0x98,0x3c,0x98,0xb2,0xd8 | $a2f0
	dc.b	0xb3,0x88,0xb4,0x88,0xb5,0xd8,0x3c,0x98 | $a2f8
	dc.b	0x42,0xe2,0x43,0xe2,0x44,0xe2,0x45,0xe2 | $a300
	dc.b	0x46,0xe2,0x47,0xe2,0x48,0xe2,0x3c,0x98 | $a308
	dc.b	0xfe,0x02,0x1f,0x3c,0x98,0x3c,0x98,0x3c | $a310
	dc.b	0x98,0x3c,0x98,0x3c,0x98,0x3c,0x98,0x3c | $a318
	dc.b	0x98,0x3c,0x98,0x3c,0x98,0x3c,0x88,0xb6 | $a320
	dc.b	0xd8,0xb7,0xd8,0x3c,0x88,0x3c,0x98,0x3c | $a328
	dc.b	0x98,0x3c,0x88,0xb6,0xd8,0xb7,0xd8,0x3c | $a330
	dc.b	0x88,0x3c,0x98,0x3f,0x10,0x3f,0x10,0x3f | $a338
	dc.b	0x10,0x3f,0x10,0x3f,0x10,0x3f,0x10,0x3f | $a340
	dc.b	0x10,0x3f,0x10,0xff,0x00 | $a348
	.align	2

random_B006:
	jra	random_B0EE                        	| [$b006: jp   random_B0EE]

key_value_linear_search_B00C:
	jra	key_value_linear_search_B124       	| [$b00c: jp   key_value_linear_search_B124]
table_linear_search_B00F:
	jra	table_linear_search_B148           	| [$b00f: jp   table_linear_search_B148]

clear_player_structure_partial_b012:
	jra	clear_player_structure_partial_b15c	| [$b012: jp   clear_player_structure_partial_b15c]

resume_tasks_b015:
	jra	resume_tasks_b171                             	| [$b015: jp   resume_tasks_b171]

l_b018:
	jra	l_b1ab                             	| [$b018: jp   $B1AB]

fill_rectangle_B01B:
	jra	fill_rectangle_B28E                             	| [$b01b: jp   $B28E]

clear_C7xx_B01E:
	jra	clear_C7xx_B2B2                    	| [$b01e: jp   clear_C7xx_B2B2]
clear_zone_B021:
	jra	clear_zone_B2BD                    	| [$b021: jp   clear_zone_B2BD]

fill_video_and_attribute_memory_B030:
	jra	fill_video_and_attribute_memory_B316	| [$b030: jp   fill_video_and_attribute_memory_B316]

display_text_B039:
	jra	display_text_B357                  	| [$b039: jp   display_text_B357]

display_multicolor_text_B03C:
	jra	display_multicolor_text_B391       	| [$b03c: jp   display_multicolor_text_B391]
display_text_color_2_B03F:
	jra	display_text_color_2_B3CE          	| [$b03f: jp   display_text_color_2_B3CE]

startup_B045:
	jra	startup_B469                       	| [$b045: jp   startup_B469]

periodic_interrupt_B048:
	jra	on_periodic_interrupt_B72F         	| [$b048: jp   on_periodic_interrupt_B72F]

load_iy_with_player_structure_B04B:
	jra	load_iy_with_player_structure_B574 	| [$b04b: jp   load_iy_with_player_structure_B574]


resume_task_B054:
	jra	resume_task_B5CD                	| [$b054: jp   resume_task_B5CD]

schedule_task_to_start_B057:
	jra	schedule_task_to_start_B620                  	| [$b057: jp   schedule_task_to_start_B620]

load_struct_C100_from_A_index_B04E:
	jra	load_struct_C100_from_A_index_B58E 	| [$b04e: jp   load_struct_C100_from_A_index_B58E]

task_yield_B051:
	jra		task_yield_B5A5
	
suspend_this_task_B05A:
	jra	suspend_this_task_B65E                  	| [$b05a: jp   suspend_this_task_B65E]
task_manipulation_B05D:
	jra	task_manipulation_B6AE             	| [$b05d: jp   task_manipulation_B6AE]

set_normal_screen_b060:
	jra	set_normal_screen_bb72                             	| [$b060: jp   $BB72]
check_coin_ports_B069:
	jra	check_coin_ports_BB82              	| [$b069: jp   check_coin_ports_BB82]

play_sound_B072:
	jbsr	osd_sound_start
	rts
	
display_error_text_B075:
	jra	display_error_text_B186            	| [$b075: jp   display_error_text_B186]

l_b084:
	jra	l_e000                             	| [$b084: jp   $E000]
l_b087:
	jra	l_e000                             	| [$b087: jp   $E000]
l_b08a:
	jra	l_e000                             	| [$b08a: jp   $E000]


stop_sound_b0ae:
	jra	stop_sound_BBDF                    	| [$b0ae: jp   stop_sound_BBDF]

is_title_screen_demo_mode_B0B1:
	jra	is_title_screen_demo_mode_B27E     	| [$b0b1: jp   is_title_screen_demo_mode_B27E]

disable_interrupts_B0BD:
	jra		disable_interrupts_BBE2

* > d3: term 1
* > d4: term 2
* > d3.w: product

multiply_de_B0C3:
	move.w	#0xFF,d0
	and.w	d0,d4
	and.w	d0,d3
	* why bother with adapting the algorithm? we have MULU
	mulu	d4,d3
	rts                                    	| [$b0da: ret]

l_b0db:
	clr.b	d0                               	| [$b0db: xor  a]
	move.b	#0x10,d1                        	| [$b0dc: ld   b,$10]
l_b0de:
	asl.b	#1,d6                            	| [$b0de: sla  l]
	roxl.b	#1,d5                           	| [$b0e0: rl   h]
	roxl.b	#1,d0                           	| [$b0e2: rl   a]
	cmp.b	d3,d0                            	| [$b0e4: cp   d]
	jcs	l_b0eb                             	| [$b0e5: jp   c,$B0EB]
	sub.b	d3,d0                            	| [$b0e8: sub  d]
	bset.b	#0,d6                           	| [$b0e9: set  0,l]
l_b0eb:
	subq.b	#1,d1                           	| [...]
	jne	l_b0de                             	| [$b0eb: djnz $B0DE]
	rts                                    	| [$b0ed: ret]


* random method
* < d: seed from timer
* < e: max value (not included)
* > a: value between 0 and e (not included)
* > d
random_B0EE:
	clr.b	d0                               	| [$b0ee: xor  a]  clears a
	move.b	#0x08,d1                        	| [$b0ef: ld   b,$08] b <- $08	| do it 8 times at least
l_b0f1:
	asl.b	#1,d3                            	| [$b0f1: sla  d] d *= 2
	roxl.b	#1,d0                           	| [$b0f3: rl   a] a <- 1 if carry set else 0
	cmp.b	d4,d0                            	| [$b0f5: cp   e] compare a with e
	jcs	l_b0fc                             	| [$b0f6: jp   c,$B0FC] if e >= a skip to djnz, repeat only if a == e
	sub.b	d4,d0                            	| [$b0f9: sub  e] a <- a-e
	bset.b	#0,d3                           	| [$b0fa: set  0,d] d &= 1
l_b0fc:
	subq.b	#1,d1                           	| [...]
	jne	l_b0f1                             	| [$b0fc: djnz $B0F1] repeat 8 times
	rts                                    	| [$b0fe: ret]

* < ix: table like walk_frames_list_AA3B, jump_frames_list_AA4D... 2 value list ending with FF FF
* < hl: frame word
* > a 0 or $FF depending on value in hl & 0x7FFF found in list pointed in ix

check_hl_in_ix_list_B0FF:
* heavily simplified thanks to cmp.b dx,dy (no value change)
l_b101:
	move.b	(0x00,a2),d4                    	| [$b103: ld   e,(ix+$00)] load first value of table e
	move.b	(0x01,a2),d3                    	| [$b106: ld   d,(ix+$01)] load second value of table in d
	move.b	d3,d0                           	| [$b109: ld   a,d]
	and.b	d4,d0                            	| [$b10a: and  e]
	cmp.b	#0xFF,d0                         	| [$b10b: cp   $FF] check if both e and d are $FF
	jeq	l_b122                             	| [$b10d: jp   z,$B122] if so, end of scan
	tst.b	d0                               	| [$b110: and  a] clear carry for sbc operation
	cmp.b	d3,d5
	bne.b	0f
	cmp.b	d4,d6	| did we match de with hl ?
	jeq	l_b11d                             	| [$b113: jp   z,$B11D] if so end, putting FF in a (found)
0:
	addq.w	#2,a2                           	| [$b116: inc  ix] * 2
	jra	l_b101                             	| [$b11a: jp   $B101] next value to scan
l_b11d:
	st.b	d0                                	| [$b11d: ld   a,$FF] found
	jra	l_b123                             	| [$b11f: jp   $B123]
* not found
l_b122:
	clr.b	d0                               	| [$b122: xor  a] a <= 0
l_b123:
	rts                                    	| [$b123: ret]

* another search routine (key value)
* < d3/d4: word to look for
* < ix: table to look into
* > a=0 found
* > if found loads hl with the word after
* the value of de found in ix list

key_value_linear_search_B124:
	moveq	#0x0004,d1                      	| [$b124: ld   bc,$0004] 4
l_b127:
	move.b	(0x00,a2),d6                    	| [$b127: ld   l,(ix+$00)]
	move.b	(0x01,a2),d5                    	| [$b12a: ld   h,(ix+$01)]
	move.b	d6,d0                           	| [$b12d: ld   a,l]
	and.b	d5,d0                            	| [$b12e: and  h]
	cmp.b	#0xFF,d0                         	| [$b12f: cp   $FF]
	jeq	l_b147                             	| [$b131: jp   z,$B147] h=a=$FF => end
	                               	| [$b134: and  a]
	cmp.b	d3,d5
	bne.b	0f
	cmp.b	d4,d6
	jeq	l_b13f                             	| [$b137: jp   z,$B13F]
0:
	add.w	d1,a2                            	| [$b13a: add  ix,bc] add 4 to ix
	jra	l_b127                             	| [$b13c: jp   $B127]
l_b13f:
	move.b	(0x02,a2),d6                    	| [$b13f: ld   l,(ix+$02)]
	move.b	(0x03,a2),d5                    	| [$b142: ld   h,(ix+$03)]
	clr.b	d0                               	| [$b145: ld   a,$00]
l_b147:
	rts                                    	| [$b147: ret]

* < ix: pointer on table (ends with $FF)
* < a: value to look for
* > a = 0 if not found, else a is unchanged

table_linear_search_B148:
	move.b	(0x00,a2),d1                    	| [$b148: ld   b,(ix+$00)]
* (clever way to test b against $FF without changing a probably)
	addq.b	#1,d1                           	| [$b14b: inc  b]
	jeq	l_b15a                             	| [$b14c: jp   z,$B15A] table ends by $FF: if 0 => end
	cmp.b	(a2),d0                     	| [$b14f: cp   (ix+$00)] check if A == (ix)
	jeq	l_b15b                             	| [$b152: jp   z,$B15B] found => exit
	addq.w	#1,a2                           	| [$b155: inc  ix] else keep searching
	jra	table_linear_search_B148           	| [$b157: jp   table_linear_search_B148]
l_b15a:
	clr.b	d0                               	| [$b15a: xor  a] not found: set a to zero
l_b15b:
	rts                                    	| [$b15b: ret]
* same start as load_iy_with_player_structure_B574 except that here we multiply
* and add 7 as offset... it really seems that 2 programmers were competing here...
clear_player_structure_partial_b15c:
	move.b	player_2_attack_flags_C028,d0   	| [$b15c: ld   a,(player_2_attack_flags_C028)]
	move.b	d0,d3                           	| [$b15f: ld   d,a]
	move.b	#0x20,d4                        	| [$b160: ld   e,$20]
	jbsr	multiply_de_B0C3                  	| [$b162: call multiply_de_B0C3]
	lea	task_struct_C100+7,a0                	| [$b165: ld   hl,unknown_C107]
	add.w	d3,a0                            	| [$b168: add  hl,de]
	move.b	#0x19,d1                        	| [$b169: ld   b,$19]
l_b16b:
	clr.b	(a0)+                             	| [$b16b: ld   (hl),$00]
	                           	| [$b16d: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_b16b                             	| [$b16e: djnz $B16B]
	rts                                    	| [$b170: ret]
	
resume_tasks_b171:
	cmp.b	#0x18,d0                         	| [resume_tasks_b171: cp   $18]
	bcs.b	0f
	jbsr	display_error_text_B186           	| [$b173: call nc,display_error_text_B186]
0:
	move.l	a3,-(sp)                        	| [$b176: push iy]
l_b178:
	move.w	d0,-(sp)                        	| [$b178: push af]
	jbsr	resume_task_B5CD               	| [$b179: call resume_task_B5CD]
	move.w	(sp)+,d0                        	| [$b17c: pop  af]
	addq.b	#1,d0                           	| [$b17d: inc  a]
	cmp.b	#0x18,d0                         	| [$b17e: cp   $18]
	jne	l_b178                             	| [$b180: jp   nz,$B178]
	move.l	(sp)+,a3                        	| [$b183: pop  iy]
	rts                                    	| [$b185: ret]

display_error_text_B186:
	move.l	(sp)+,a2                        	| [$b186: pop  ix]
	jbsr	disable_interrupts_BBE2           	| [$b188: call disable_interrupts_BBE2]
	move.w	d0,-(sp)                        	| [$b18b: push af]
	movem.w	d1/d2,-(sp)                    	| [$b18c: push bc]
	move.l	a4,-(sp)                        	| [$b18c: push bc]
	movem.w	d3/d4,-(sp)                    	| [$b18d: push de]
	move.l	a1,-(sp)                        	| [$b18d: push de]

	move.l	a0,-(sp)                        	| [$b18e: push hl]

	move.l	a3,-(sp)                        	| [$b18f: push iy]
	lea	error_text_B1A3(pc),a0             	| [$b191: ld   hl,error_text_B1A3] ERROR
	move.b	#0x98,d3                        	| [$b194: ld   d,$98]
	jbsr	display_text_B357                 	| [$b196: call display_text_B357]
	move.l	(sp)+,a3                        	| [$b199: pop  iy]
	move.l	(sp)+,a0                        	| [$b19b: pop  hl]
	move.l	(sp)+,a1                        	| [$b19c: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$b19c: pop  de]
	move.l	(sp)+,a4                        	| [$b19d: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$b19d: pop  bc]
	move.w	(sp)+,d0                        	| [$b19e: pop  af]
* infinite loop, all registers are preserved, inc. call address
* probably used by the devs as an "assert failed" routine, where they could
* track down abnormal values before it really crashes
l_b19f:
	bsr		osd_break                                    	| [$b19f: nop]
	jra	l_b19f                             	| [$b1a0: jp   $B19F]

error_text_B1A3:
	dc.b	0x0e,0x10,0x0e,0x1b,0x1b,0x18,0x1b,0xff  | "ERROR"
	.align	2
	
l_b1ab:
	move.l	a3,-(sp)                        	| [$b1ab: push iy]
	move.w	d0,-(sp)                        	| [$b1ad: push af]
	lea	unknown_C0C8(pc),a2                	| [$b1ae: ld   ix,unknown_C0C8]
	move.b	players_type_human_or_cpu_flags_C02D,d0	| [$b1b2: ld   a,(players_type_human_or_cpu_flags_C02D)]
	and.b	#0x0C,d0                         	| [$b1b5: and  $0C]
	cmp.b	#0x0C,d0                         	| [$b1b7: cp   $0C]
	jeq	l_b1c4                             	| [$b1b9: jp   z,$B1C4]
	btst.b	#2,d0                           	| [$b1bc: bit  2,a]
	jne	l_b1de                             	| [$b1be: jp   nz,$B1DE]
	jra	l_b1da                             	| [$b1c1: jp   $B1DA]
l_b1c4:
	move.b	player_2_attack_flags_C028,d0   	| [$b1c4: ld   a,(player_2_attack_flags_C028)]
	cmp.b	#0x0A,d0                         	| [$b1c7: cp   $0A]
	jeq	l_b1de                             	| [$b1c9: jp   z,$B1DE]
	cmp.b	#0x0B,d0                         	| [$b1cc: cp   $0B]
	jeq	l_b1da                             	| [$b1ce: jp   z,$B1DA]
	move.w	(sp)+,d0                        	| [$b1d1: pop  af]
	move.w	d0,-(sp)                        	| [$b1d2: push af]
	tst.b	d0                               	| [$b1d3: and  a]
	beq	0f
	jbsr	display_error_text_B186           	| [$b1d4: call nz,display_error_text_B186]
0:
	jra	l_b1de                             	| [$b1d7: jp   $B1DE]
l_b1da:
	lea	unknown_C0D0(pc),a2                	| [$b1da: ld   ix,unknown_C0D0]
l_b1de:
	move.w	(sp)+,d0                        	| [$b1de: pop  af]
	add.b	(0x01,a2),d0                     	| [$b1df: add  a,(ix+$01)]
*daa
	move.b	d0,(0x01,a2)                    	| [$b1e3: ld   (ix+$01),a]
	move.b	(0x00,a2),d0                    	| [$b1e6: ld   a,(ix+$00)]
*adc  a,$00
*daa
	move.b	d0,(0x00,a2)                    	| [$b1ec: ld   (ix+$00),a]
	move.w	#0xC0,d5		             	| [$b1ef: ld   hl,(unknown_C0C0)]
	move.w	#0xC0,d6		             	| [$b1ef: ld   hl,(unknown_C0C0)]
	move.b	d6,d0                           	| [$b1f2: ld   a,l]
	move.b	d5,d6                           	| [$b1f3: ld   l,h]
	move.b	d0,d5                           	| [$b1f4: ld   h,a]
	move.w	(0x00,a2),d1                    	| [$b1f5: ld   b,(ix+$00)]
												| [$b1f8: ld   c,(ix+$01)]
												| [$b1fb: and  a]
	sub.w	d1,a0											| [sbc  hl,bc]
	jcc	l_b20c                             	| [$b1fe: jp   nc,$B20C]
	move.w	#0xC0,d2               	| [$b201: ld   de,unknown_C0C0]
	move.w	#0xC0,d3               	| [$b201: ld   de,unknown_C0C0]

	move.l	a2,a0                        	| [$b204: push ix]
											| [$b206: pop  hl]
	move.w	#0x0003,d1                      	| [$b207: ld   bc,$0003] 3
	jbsr	ldir                              	| [$b20a: ldir]
l_b20c:
	move.b	#0xC0,d5                	| [$b20c: ld   hl,unknown_C0C0]
	move.b	#0xC0,d6                	| [$b20c: ld   hl,unknown_C0C0]
	move.b	#0x98,d3                        	| [$b20f: ld   d,$98]
	move.b	background_and_state_bits_C911,d0	| [$b211: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$b214: res  7,a]
	cmp.b	#0x54,d0                         	| [$b216: cp   $54]
	jeq	l_b227                             	| [$b218: jp   z,$B227]
	cmp.b	#0x53,d0                         	| [$b21b: cp   $53]
	jeq	l_b227                             	| [$b21d: jp   z,$B227]
	jbsr	is_title_screen_demo_mode_B27E    	| [$b220: call is_title_screen_demo_mode_B27E]
	tst.b	d0                               	| [$b223: and  a]
	jeq	l_b27b                             	| [$b224: jp   z,$B27B]
l_b227:
	move.b	#0x14,d1                      	| [$b227: ld   bc,$1402]
	move.b	#0x02,d2                      	| [$b227: ld   bc,$1402]
	jbsr	display_text_color_2_B3CE         	| [$b22a: call display_text_color_2_B3CE]
	move.b	#0x14,d1                      	| [$b22d: ld   bc,$1404]
	move.b	#0x04,d2                      	| [$b22d: ld   bc,$1404]
	move.b	background_and_state_bits_C911,d0	| [$b230: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$b233: res  7,a]
	cmp.b	#0x54,d0                         	| [$b235: cp   $54]
	jeq	l_b248                             	| [$b237: jp   z,$B248]
	cmp.b	#0x53,d0                         	| [$b23a: cp   $53]
	jeq	l_b248                             	| [$b23c: jp   z,$B248]
	jbsr	is_title_screen_demo_mode_B27E    	| [$b23f: call is_title_screen_demo_mode_B27E]
	move.b	#0x14,d1                      	| [$b242: ld   bc,$1404]
	move.b	#0x04,d2                      	| [$b242: ld   bc,$1404]
	cmp.b	#0x02,d0                         	| [$b245: cp   $02]
	beq.b	0f
	rts                                    	| [$b247: ret  nz]
0:
l_b248:
	move.b	#0x98,d3                        	| [$b248: ld   d,$98]
	move.b	#0xC0,d5                	| [$b24a: ld   hl,unknown_C0C8]
	move.b	#0xC8,d6                	| [$b24a: ld   hl,unknown_C0C8]
	jbsr	display_text_color_2_B3CE         	| [$b24d: call display_text_color_2_B3CE]
	move.b	unknown_C032,d0                 	| [$b250: ld   a,(unknown_C032)]
	btst.b	#1,d0                           	| [$b253: bit  1,a]
	jeq	l_b27b                             	| [$b255: jp   z,$B27B]
	move.b	#0x14,d1                      	| [$b258: ld   bc,$1406]
	move.b	#0x06,d2                      	| [$b258: ld   bc,$1406]
	move.b	background_and_state_bits_C911,d0	| [$b25b: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$b25e: res  7,a]
	cmp.b	#0x54,d0                         	| [$b260: cp   $54]
	jeq	l_b273                             	| [$b262: jp   z,$B273]
	cmp.b	#0x53,d0                         	| [$b265: cp   $53]
	jeq	l_b273                             	| [$b267: jp   z,$B273]
	jbsr	is_title_screen_demo_mode_B27E    	| [$b26a: call is_title_screen_demo_mode_B27E]
	move.b	#0x14,d1                      	| [$b26d: ld   bc,$1406]
	move.b	#0x06,d2                      	| [$b26d: ld   bc,$1406]
	cmp.b	#0x02,d0                         	| [$b270: cp   $02]
	beq.b	0f
	rts                                    	| [$b272: ret  nz]
0:
l_b273:
	move.b	#0xC0,d5                	| [$b273: ld   hl,unknown_C0D0]
	move.b	#0xD0,d6                	| [$b273: ld   hl,unknown_C0D0]
	move.b	#0x98,d3                        	| [$b276: ld   d,$98]
	jbsr	display_text_color_2_B3CE         	| [$b278: call display_text_color_2_B3CE]
l_b27b:
	move.l	(sp)+,a3                        	| [$b27b: pop  iy]
	rts                                    	| [$b27d: ret]

is_title_screen_demo_mode_B27E:
	move.b	background_and_state_bits_C911,d0	| [$b27e: ld   a,(background_and_state_bits_C911)]
	bclr.b	#7,d0                           	| [$b281: res  7,a]
	cmp.b	#0x50,d0                         	| [$b283: cp   $50] demo mode?
	jcs	l_b28b                             	| [$b285: jp   c,$B28B]
	clr.b	d0                               	| [$b288: ld   a,$00]
	rts                                    	| [$b28a: ret]
l_b28b:
	move.b	#0x02,d0                        	| [$b28b: ld   a,$02]
	rts                                    	| [$b28d: ret]

* < D1/D2: number of row/colums
* < D3/D4: D=character, E=attribute
* < D5/D6: start coords X,Y
fill_rectangle_B28E:
	movem.w	d1/d2,-(sp)                    	| [$b28e: push bc]

	movem.w	d5/D6,-(sp)                        	| [$b28f: push hl]
	movem.w	d1/d2,-(sp)                    	| [$b290: push bc]
	movem.w	d3/d4,-(sp)                    	| [$b291: push de]
	move.l	a1,-(sp)                        	| [$b291: push de]
	jbsr	compute_screen_address_from_XY_B2F6	| [$b292: call compute_screen_address_from_XY_B2F6]
	move.l	(sp)+,a1                        	| [$b295: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$b295: pop  de]
	movem.w	(sp)+,d1/d2                    	| [$b296: pop  bc]
l_b297:
	movem.w	d1/d2,-(sp)                    	| [$b297: push bc]
	move.w	d0,-(sp)
	move.b	d4,d0                         	| [$b298: ld   (hl),e]
	jbsr	osd_w_videoram
	move.w	#0x400,d1                     	| [$b299: ld   bc,$0400]
	add.w	d1,d6                            	| [$b29c: add  hl,bc]
	move.b	d3,d0                         	| [$b29d: ld   (hl),d]
	jbsr	osd_w_colorram
	move.w	(sp)+,d0
	move.w	#0x03FF,d1                      	| [$b29e: ld   bc,$03FF]
											| [$b2a1: and  a]
	sub.w	d1,d6							| [sbc  hl,bc]
	movem.w	(sp)+,d1/d2                    	| [$b2a4: pop  bc]
	subq.b	#1,d1                           	| [$b2a5: dec  b]
	jne	l_b297                             	| [$b2a6: jp   nz,$B297]
	movem.w	(sp)+,d5/D6                        	| [$b2a9: pop  hl]
	subq.b	#1,d5                           	| [$b2aa: dec  h]
	movem.w	(sp)+,d1/d2                    	| [$b2ab: pop  bc]
	subq.b	#1,d2                           	| [$b2ac: dec  c]
	jne	fill_rectangle_B28E                             	| [$b2ad: jp   nz,$B28E]
	rts                                    	| [$b2b0: ret]
l_b2b1:
	rts                                    	| [$b2b1: ret]

clear_C7xx_B2B2:
	clr.b	d0                               	| [$b2b2: xor  a]
	lea	referee_x_pos_C700,a0          	| [$b2b3: ld   hl,referee_x_pos_C700]
	lea	unknown_C7FB,a4                	| [$b2b6: ld   bc,unknown_C7FB]
	jbsr	fill_zone_with_a_B2CA             	| [$b2b9: call fill_zone_with_a_B2CA]
	rts                                    	| [$b2bc: ret]

* < HL: pointer on zone to clear
* < BC: size
clear_zone_B2BD:
	move.l	(sp)+,a2                        	| [$b2bd: pop  ix] return address in ix
l_b2bf:
	clr.b	(a0)+                             	| [$b2bf: ld   (hl),$00] set to 0
									| [$b2c1: inc  hl] increment hl
	subq.w	#1,d1                           	| [$b2c2: dec  bc] decrement bc counter
											| [$b2c3: ld   a,b] test b=c=0
												| [$b2c4: or   c]
	jne	l_b2bf                             	| [$b2c5: jp   nz,$B2BF] not 0, keep looping
	jra	(a2)      
	

* < a: character to store
* < a0: start address
* < a4: end address (included)
fill_zone_with_a_B2CA:
	addq.w	#1,a4                           	| [$b2ca: inc  bc]
	move.b	d0,d3                           	| [$b2cb: ld   d,a]
l_b2cc:
	move.b	d3,(a0)+                         	| [$b2cc: ld   (hl),d]
	cmp.l	a0,a4										| [$b2cd: inc  hl]
	jne	l_b2cc                             	| [$b2d0: jp   nz,$B2CC]
	rts                                    	| [$b2d8: ret]
	
* < D5/D6: X,Y
* > D6: screen address
compute_screen_address_from_XY_B2F6:
	clr.b	d3                               	| [$b2f6: ld   d,$00]
	move.b	d5,d4                           	| [$b2f8: ld   e,h]
	asl.b	#1,d4                            	| [$b2f9: sla  e]
	roxl.b	#1,d3                           	| [$b2fb: rl   d]
	asl.b	#1,d4                            	| [$b2fd: sla  e]
	roxl.b	#1,d3                           	| [$b2ff: rl   d]
	asl.b	#1,d4                            	| [$b301: sla  e]
	roxl.b	#1,d3                           	| [$b303: rl   d]
	asl.b	#1,d4                            	| [$b305: sla  e]
	roxl.b	#1,d3                           	| [$b307: rl   d]
	asl.b	#1,d4                            	| [$b309: sla  e]
	roxl.b	#1,d3                           	| [$b30b: rl   d] results in DE = H*32
	clr.b	d0                               	| [$b30d: xor  a]
	move.b	d0,d5                           	| [$b30e: ld   h,a]
	lsl.w	#8,d5
	move.b	d6,d5
	
	lsl.w	#8,d3
	move.b	d4,d3
	move.w	#0xD3E0,d6                      	| [$b30f: ld   bc,$D3E0] screen address
	add.w	d5,d6                            	| [$b312: add  hl,bc]

	sub.w	d3,d6							| [sbc  hl,de]
	rts                                    	| [$b315: ret]


* fill video & attribute memory with an uniform value
* < d2: what to set in video memory
* < d1: what to set in attribute memory
*
fill_video_and_attribute_memory_B316:
	move.w	#0xD000,d4                      	| [$b316: ld   hl,$D000]
	move.w	#0xD400,d5                      	| [$b316: ld   hl,$D000]
	move.w	#0x400,d3                      	| [$b31d: ld   de,$0400]
l_b320:
	move.w	d4,d6
	move.b	d2,d0                        	| [$b320: ld   (hl),c]
	jbsr	osd_w_videoram
	move.w	d5,d6
	move.b	d1,d0                    	| [$b324: ld   (ix+$00),b]
	jbsr	osd_w_colorram
	addq.w	#1,d4                           	| [$b327: inc  hl]
	addq.w	#1,d5                           	| [$b328: inc  ix]
	subq.w	#1,d3                           	| [$b32a: dec  de]
	jne	l_b320                             	| [$b32d: jp   nz,$B320]
	rts                                    	| [$b330: ret]

* display text
* <  hl pointer on text
* : format x y text (not in ASCII, tile-index based), ends by $FF
* codes are:
* 0-9: digits
* 10-35: A-Z
* 0x3C: space
* 0xFE: line feed, goto next line
* 0xFF: end

* <  d  color attribute

display_text_B357:

	move.l	a3,-(sp)                        	| [$b357: push iy]
	move.l	a0,a3                        	| [$b359: push hl]
	                        	| [$b35a: pop  iy]
	* a3 points on coords , color, + text
l_b35c:
	* get X
	move.b	(a3)+,d0                    	| [$b35c: ld   a,(iy+$00)]
	move.b	d0,d5                           	| [$b35f: ld   h,a]
											| [$b360: inc  iy]
	* get Y
	move.b	(a3),d0                    	| [$b362: ld   a,(iy+$00)]
	move.b	d0,d6                           	| [$b365: ld   l,a]
	movem.w	d3/d4,-(sp)                    	| [$b366: push de]
	move.l	a1,-(sp)                        	| [$b366: push de]
	jbsr	compute_screen_address_from_XY_B2F6	| [$b367: call compute_screen_address_from_XY_B2F6]
	move.l	(sp)+,a1                        	| [$b36a: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$b36a: pop  de]
l_b36b:
	addq.w	#1,a3                           	| [$b36b: inc  iy]
	move.b	(a3),d0                    	| [$b36d: ld   a,(iy+$00)]
	cmp.b	#0xFF,d0                         	| [$b370: cp   $FF] end of string?
	jeq	l_b38e                             	| [$b372: jp   z,$B38E]
* FE: end of string
	cmp.b	#0xFE,d0                         	| [$b375: cp   $FE]
	jne	l_b37f                             	| [$b377: jp   nz,$B37F]
	addq.w	#1,a3                           	| [$b37a: inc  iy]
	jra	l_b35c                             	| [$b37c: jp   $B35C]
l_b37f:
	jbsr	osd_w_videoram                 	| [$b37f: ld   (hl),a]
											| [$b380: ld   bc,$0400]
	add.w	#0x400,d6                            	| [$b383: add  hl,bc] attribute memory
	move.b	d3,d0
	jbsr	osd_w_colorram                         	| [$b384: ld   (hl),d]
	                      	| [$b385: ld   bc,$0420] next char
	                               	| [$b388: xor  a]
	sub.w	#0x420,d6				| [sbc  hl,bc]
	jra	l_b36b                             	| [$b38b: jp   $B36B]
l_b38e:
	move.l	(sp)+,a3                        	| [$b38e: pop  iy]
	rts                                    	| [$b390: ret]


* display text with possible color change
* <  hl pointer on text
* : format x y text/attribute (not in ASCII, tile-index based), ends by $FF
display_multicolor_text_B391:
	move.l	a3,-(sp)                        	| [$b391: push iy]
	move.l	a0,a3                        	| [$b393: push hl]
	                        	| [$b394: pop  iy]
l_b396:
	move.b	(a3)+,d0                    	| [$b396: ld   a,(iy+$00)]
	move.b	d0,d5                           	| [$b399: ld   h,a]
	                           	| [$b39a: inc  iy]
	move.b	(a3),d0                    	| [$b39c: ld   a,(iy+$00)]
	move.b	d0,d6                           	| [$b39f: ld   l,a]
	jbsr	compute_screen_address_from_XY_B2F6	| [$b3a0: call compute_screen_address_from_XY_B2F6]
l_b3a3:
	addq.w	#1,a3                           	| [$b3a3: inc  iy]
	move.b	(a3),d0                    	| [$b3a5: ld   a,(iy+$00)]
	cmp.b	#0xFF,d0                         	| [$b3a8: cp   $FF]
	jeq	l_b3cb                             	| [$b3aa: jp   z,$B3CB]
	cmp.b	#0xFE,d0                         	| [$b3ad: cp   $FE]
	jne	l_b3b7                             	| [$b3af: jp   nz,$B3B7]
	addq.w	#1,a3                           	| [$b3b2: inc  iy]
	jra	l_b396                             	| [$b3b4: jp   $B396]
l_b3b7:
	jbsr	osd_w_videoram                         	| [$b3b7: ld   (hl),a]
	move.w	#0x400,d1                      	| [$b3b8: ld   bc,$0400]
	add.w	d1,d6                            	| [$b3bb: add  hl,bc]

	addq.w	#1,a3                           	| [$b3bc: inc  iy]
	move.b	(a3),d0                    	| [$b3be: ld   a,(iy+$00)]
	jbsr	osd_w_colorram                  	| [$b3c1: ld   (hl),a]
	move.w	#0x420,d1                      	| [$b3c2: ld   bc,$0420]
	clr.b	d0                               	| [$b3c5: xor  a]
	sub.w	d1,d6							| [sbc  hl,bc]
	jra	l_b3a3                             	| [$b3c8: jp   $B3A3]
l_b3cb:
	move.l	(sp)+,a3                        	| [$b3cb: pop  iy]
	rts                                    	| [$b3cd: ret]

* not sure of what it exactly does. It displays text pointed by A0 at D1/D2
display_text_color_2_B3CE:
	move.l	a0,-(sp)                        	| [$b3ce: push hl]
	movem.w	d3/d4,-(sp)                    	| [$b3cf: push de]
	move.b	d1,d5                           	| [$b3d0: ld   h,b]
	move.b	d2,d6                           	| [$b3d1: ld   l,c]
	jbsr	compute_screen_address_from_XY_B2F6	| [$b3d2: call compute_screen_address_from_XY_B2F6]
	movem.w	(sp)+,d3/d4                    	| [$b3d5: pop  de]
	move.b	#0x03,d1                        	| [$b3d6: ld   b,$03]
	move.l	(sp)+,a3                        	| [$b3d8: pop  iy]
	clr.b	d2                               	| [$b3da: ld   c,$00]
l_b3dc:
	move.b	(a3),d0                    	| [$b3dc: ld   a,(iy+$00)]
	and.b	#0xF0,d0                         	| [$b3df: and  $F0]
	lsr.b	#4,d0                            	| [$b3e1: srl  a] * 4
	tst.b	d0                               	| [$b3e9: and  a]
	jeq	l_b3f2                             	| [$b3ea: jp   z,$B3F2]
	move.b	#0x01,d2                        	| [$b3ed: ld   c,$01]
	jra	l_b3fe                             	| [$b3ef: jp   $B3FE]
l_b3f2:
	addq.b	#1,d2                           	| [$b3f2: inc  c]
	subq.b	#1,d2                           	| [$b3f3: dec  c]
	jne	l_b3fe                             	| [$b3f4: jp   nz,$B3FE]
	subq.b	#1,d1                           	| [$b3f7: dec  b]
	jeq	l_b3fd                             	| [$b3f8: jp   z,$B3FD]
	move.b	#0x3C,d0                        	| [$b3fb: ld   a,$3C]
l_b3fd:
	addq.b	#1,d1                           	| [$b3fd: inc  b]
l_b3fe:
	jbsr	osd_w_videoram                         	| [$b3fe: ld   (hl),a]
	movem.w	d1/d2,-(sp)                    	| [$b3ff: push bc]
	move.w	#0x400,d1                      	| [$b400: ld   bc,$0400]
	add.w	d1,d6                            	| [$b403: add  hl,bc]
	move.w	d0,-(sp)
	move.b	d3,d0
	jbsr	osd_w_colorram                         	| [$b404: ld   (hl),d]
	move.w	(sp)+,d0
	tst.b	d0                               	| [$b405: and  a]
	sub.w	d1,d6							| [sbc  hl,bc]
	move.w	#0x20,d1     	| [$b408: ld   bc,task_address_table_0020]
	clr.b	d0                               	| [$b40b: xor  a]
	sub.w	d1,d6							| [sbc  hl,bc]
	movem.w	(sp)+,d1/d2                    	| [$b40e: pop  bc]
	move.b	(a3),d0                    	| [$b40f: ld   a,(iy+$00)]
	and.b	#0x0F,d0                         	| [$b412: and  $0F]
	jeq	l_b41c                             	| [$b414: jp   z,$B41C]
	move.b	#0x01,d2                        	| [$b417: ld   c,$01]
	jra	l_b428                             	| [$b419: jp   $B428]
l_b41c:
	addq.b	#1,d2                           	| [$b41c: inc  c]
	subq.b	#1,d2                           	| [$b41d: dec  c]
	jne	l_b428                             	| [$b41e: jp   nz,$B428]
	subq.b	#1,d1                           	| [$b421: dec  b]
	jeq	l_b427                             	| [$b422: jp   z,$B427]
	move.b	#0x3C,d0                        	| [$b425: ld   a,$3C]
l_b427:
	addq.b	#1,d1                           	| [$b427: inc  b]
l_b428:
	jbsr	osd_w_videoram                         	| [$b428: ld   (hl),a]
	movem.w	d1/d2,-(sp)                    	| [$b429: push bc]
	move.w	#0x400,d1                      	| [$b42a: ld   bc,$0400]
	add.w	d1,d6                            	| [$b42d: add  hl,bc]
	move.w	d0,-(sp)
	move.b	d3,d0
	jbsr	osd_w_colorram                         	| [$b404: ld   (hl),d]
	move.w	(sp)+,d0
	tst.b	d0                               	| [$b42f: and  a]
	sub.w	d1,d6							| [sbc  hl,bc]
	move.w	#0x0020,d1     	| [$b432: ld   bc,task_address_table_0020]
	clr.b	d0                               	| [$b435: xor  a]
	sub.w	d1,d6							| [sbc  hl,bc]
	movem.w	(sp)+,d1/d2                    	| [$b438: pop  bc]
	addq.w	#1,a3                           	| [$b439: inc  iy]
	subq.b	#1,d1                           	| [$b43b: dec  b]
	jne	l_b3dc                             	| [$b43c: jp   nz,$B3DC]
	rts                                    	| [$b43f: ret]


startup_B469:

	move.b	#0x42,d0                        	| [$b469: ld   a,$42]
	move.b	d0,unknown_CD21                 	| [$b46b: ld   (unknown_CD21),a]
	lea		stack_top_CF00,sp			| ld   sp,stack_top_CF00			| set stack
	jbsr	disable_interrupts_BBE2           	| [$b471: call disable_interrupts_BBE2]
* clear part of RAM
	lea	active_task_bit_table_C000,a0                	| [$b479: ld   hl,active_task_bit_table_C000]
	move.w	#0x0080,d1                      	| [$b47c: ld   bc,$0080] immediate value 128
	jbsr	clear_zone_B2BD                   	| [$b47f: call clear_zone_B2BD]
	jbsr	init_ram_BB41                     	| [$b482: call init_ram_BB41]
	st.b	d0                                	| [$b485: ld   a,$FF]
	move.b	d0,unknown_C02C                 	| [$b487: ld   (unknown_C02C),a]
	jbsr	enable_interrupts_BBE2            	| [$b48a: call enable_interrupts_BBE2]

* this is called by most routines that want to yield control to this mainloop
jump_to_mainloop_B48D:
	lea		stack_top_CF00,sp			| ld   sp,stack_top_CF00			| set stack
	jbsr	enable_interrupts_BBE2            	| [$b490: call enable_interrupts_BBE2]

* main "task" scheduler
* loop until one of the 2 timers/counters is nonzero
* jump at different locations
scheduler_loop_b493:
	lea	unknown_C006,a0                	| [$b493: ld   hl,unknown_C006]
	tst.b	nb_tasks_to_start_C029                 	| [$b496: ld   a,(nb_tasks_to_start_C029)]
											| [$b499: and  a]
	jne	run_a_task_b4a7                             	| [$b49a: jp   nz,$B4A7]

	tst.b	nb_suspended_tasks_C02A                 	| [$b49d: ld   a,(nb_suspended_tasks_C02A)]
											| [$b4a0: and  a]
	jne	resume_a_task_b503                             	| [$b4a1: jp   nz,$B503]
	jra	scheduler_loop_b493                             	| [$b4a4: jp   $B493]

*
* < A0 (HL): task bits structure (always 0xC006)
run_a_task_b4a7:
	clr.b	d0                               	| [$b4a7: xor  a]
	move.b	d0,d3                           	| [$b4a8: ld   d,a]
* check change of bitfield state $C006-$C00B notify bitfield changes
* looks like an event table: each routine can post events by setting
* bits, and the events are acknowledged by bitclears.
* depending on the bits set, we jump to different routines
*
* this is a task scheduler, with stack location change and all!!!
* find a non-zero slot
	move.b	#0x6,d6		| coupling D6 (L) with A0 (HL) to point on 0xC006
	cmp.b	(a0),d0                          	| [$b4a9: cp   (hl)]
	jne	l_b4b8                             	| [$b4aa: jp   nz,$B4B8]
	addq.w	#1,a0
	addq.b	#1,d6                           	| [$b4ad: inc  l]
	cmp.b	(a0),d0                          	| [$b4ae: cp   (hl)]
	jne	l_b4b8                             	| [$b4af: jp   nz,$B4B8]
	addq.w	#1,a0
	addq.b	#1,d6                           	| [$b4b2: inc  l]
	cmp.b	(a0),d0                          	| [$b4b3: cp   (hl)]
	jne	l_b4b8                             	| [$b4b4: jp   nz,$B4B8]
	* if not found pick the last slot (probably replace last running task if any)
	addq.w	#1,a0
	addq.b	#1,d6                           	| [$b4b7: inc  l]
l_b4b8:
	move.b	d6,d0                           	| [$b4b8: ld   a,l]
	subq.b	#0x06,d0                        	| [$b4b9: sub  $06] if first 0, then sub 06 gives 0
	moveq	#0,d4
	move.b	d0,d4                           	| [$b4bb: ld   e,a]
	rol.b	#3,d4                            	| [$b4bc: rlc  e] times 8
	clr.w	d2                               	| [$b4c2: ld   b,$00]
	move.b	(a0),d2                         	| [$b4c4: ld   c,(hl)]
												| [$b4c5: and  a] clear carry
	add.w	d2,d2                           	| [$b4c6: rl   c] times 2 on 16 bits (bc)
												| [$b4c8: rl   b]
	lea	table_B87D(pc),a2                  	| [$b4ca: ld   ix,table_B87D]
	add.w	d2,a2                            	| [$b4ce: add  ix,bc]

	move.b	(0x00,a2),d1                    	| [$b4d0: ld   b,(ix+$00)]
	move.b	(0x01,a2),d0                    	| [$b4d3: ld   a,(ix+$01)]
	add.b	d4,d0                            	| [$b4d6: add  a,e]
	move.b	d0,d4                           	| [$b4d7: ld   e,a]
	move.b	d0,player_2_attack_flags_C028   	| [$b4d8: ld   (player_2_attack_flags_C028),a]
	move.b	d1,d0                           	| [$b4db: ld   a,b]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$b4dc: xor  (hl)]
	* kind of zeroes slot, not of what's done here
	move.b	d0,(a0)                         	| [$b4dd: ld   (hl),a]

	add.w	d4,d4                            	| [$b4de: rlc  e]
	add.w	d4,d4                            	| double (long address)
	                               	| [$b4e0: ld   d,$00]
	lea	task_stack_buffer_table_B825(pc),a3      	| [$b4e2: ld   iy,task_stack_buffer_table_B825]
	add.w	d4,a3                            	| [$b4e6: add  iy,de]
	* switch stack pointer according to routine we jump to!!
	* (seems that they've coded a mini-OS for this game!)
	
	move.l	(a3),a7                    	| [$b4e8: ld   l,(iy+$00)]
										| [$b4eb: ld   h,(iy+$01)]
	
									| [$b4ef: ld   hl,nb_tasks_to_start_C029]
	subq.b	#1,nb_tasks_to_start_C029                         	| [$b4f2: dec  (hl)]
	lea		task_address_table_0020,a3                      	| [$b4f3: ld   iy,$0020] 32
	add.w	d4,a3                            	| [$b4f7: add  iy,de]

	bsr		osd_break
	
	move.l	(a3),a0                    	| [$b4f9: ld   l,(iy+$00)]
										| [$b4fc: ld   h,(iy+$01)]
	jbsr	enable_interrupts_BBE2            	| [$b4ff: call enable_interrupts_BBE2]
* called several times at startup
* $5250
* $53D2
* $544F
* $6491
* $7C5D
* $6D5E
* $B099
* $B09C
* $B09F
*
* then called when screen changes
	* starts the task
	jmp	(a0)                               	| [$b502: jp   (hl)]


resume_a_task_b503:
	jbsr	disable_interrupts_BBE2           	| [$b503: call disable_interrupts_BBE2]
	lea	unknown_C00C(pc),a0                	| [$b506: ld   hl,unknown_C00C]
										| [$b509: ld   iy,unknown_C00C]
	tst.l	(a0)                    	| [$b50d: ld   a,(iy+$00)] check for free slots
										| [$b510: or   (iy+$01)]
										| [$b513: or   (iy+$02)]
										| [$b516: or   (iy+$03)]
	jeq	jump_to_mainloop_B48D              	| [$b519: jp   z,jump_to_mainloop_B48D]
	clr.w	d4
	clr.b	d0                               	| [$b51c: xor  a]
	move.b	d0,d4 
	move.b	#0xC,d6			| lsw of original 0xC00C HL
	* compute free task slot?				| [$b51d: ld   d,a]
	cmp.b	(a0),d0                          	| [$b51e: cp   (hl)]
	jne	l_b52d                             	| [$b51f: jp   nz,$B52D]
	addq.w	#1,a0
	addq.w	#1,d6                           	| [$b522: inc  l]
	* check for 1 in task id
	cmp.b	(a0),d0                          	| [$b523: cp   (hl)]
	jne	l_b52d                             	| [$b524: jp   nz,$B52D]
	* check for 2 in task id
	addq.w	#1,a0
	addq.b	#1,d6                           	| [$b527: inc  l]
	cmp.b	(a0),d0                          	| [$b528: cp   (hl)]
	jne	l_b52d                             	| [$b529: jp   nz,$B52D]
	* has to be that slot
	addq.b	#1,d6                           	| [$b52c: inc  l]
l_b52d:
	move.b	d6,d0                           	| [$b52d: ld   a,l]
	sub.b	#0x0C,d0                         	| [$b52e: sub  $0C]
	move.b	d0,d4                           	| [$b530: ld   e,a]
	rol.b	#3,d4                            	| [$b531: rlc  e] * 3 multiply by 8
	tst.b	d0                               	| [$b537: and  a] clear carry?
	clr.w	d1                               	| [$b538: ld   b,$00]
	* get non-zero slot id
	move.b	(a0),d1                         	| [$b53a: ld   c,(hl)]
	add.w	d1,d1                           	| [$b53b: rl   c]
												| [$b53d: rl   b]
	lea	table_B87D(pc),a2                  	| [$b53f: ld   ix,table_B87D]
	add.w	d1,a2                            	| [$b543: add  ix,bc]*
	* get properties
	move.b	(0x00,a2),d1                    	| [$b545: ld   b,(ix+$00)]
	move.b	(0x01,a2),d0                    	| [$b548: ld   a,(ix+$01)]
	add.b	d4,d0                            	| [$b54b: add  a,e]
	move.b	d0,d4                           	| [$b54c: ld   e,a]
	move.b	d0,player_2_attack_flags_C028   	| [$b54d: ld   (player_2_attack_flags_C028),a]
	move.b	d1,d0                           	| [$b550: ld   a,b]
	move.b	(a0),d7
	eor.b	d7,d0                    	      	| [$b551: xor  (hl)]
	* zero/mask out slot
	move.b	d0,(a0)                         	| [$b552: ld   (hl),a]
	add.w	d4,d4                            	| [$b553: rlc  e]
	add.w	d4,d4                            	| double offset (long needs *4)
												| [$b555: ld   d,$00]
	lea	task_struct_table_B7E5(pc),a0                  	| [$b557: ld   hl,table_B7E5]
	add.w	d4,a0                            	| [$b55a: add  hl,de]
	* a0 = task structure
	* rather offset vs bottom than full address, as it would shift
	* task structure offsets. It's complex enough to avoid it!
	move.l	(a0),a0
	lea		stack_bottom_C400,a1
	add.w	(a0),a1
	
	* sets stack for this task 
	* looks like a mini-os with a task
	* scheduler and all!!!
	move.l	a1,sp

	* switch registers, get back A0 as task structure (not needed)
										| [$b564: ex   de,hl]
										| [$b565: ld   de,$0004] 4
	addq.w	#4,a0                            	| [$b568: add  hl,de]
	* get another task property
	move.b	(a0)+,d1                         	| [$b569: ld   b,(hl)]
									| [$b56a: inc  hl]
	* get another task property (context)
	move.b	(a0),d0                         	| [$b56b: ld   a,(hl)]
	lea	nb_suspended_tasks_C02A(pc),a0                	| [$b56c: ld   hl,nb_suspended_tasks_C02A]
	subq.b	#1,(a0)                         	| [$b56f: dec  (hl)]
	jbsr	enable_interrupts_BBE2            	| [$b570: call enable_interrupts_BBE2]
	* returns with stack properly set: returns to stack & resumes it
	rts                                    	| [$b573: ret]

* load iy with task structure
load_iy_with_player_structure_B574:
	moveq	#0,d0
	move.b	player_2_attack_flags_C028,d0   	| [$b574: ld   a,(player_2_attack_flags_C028)]
	lea	task_struct_C100(pc),a3            	| [$b577: ld   iy,task_struct_C100]
									| [$b57b: ld   b,a]
	* game uses 2x3 right 8-bit rotations with carry, which is equivalent to
	* 5 left 16-bit rotations
	lsl.w	#5,d0                            	| [$b57c: ld   c,$00]
	                            	| [$b57e: and  a]
	                           	| [$b57f: rr   b]
	                           	| [$b581: rr   c]
	                           	| [$b583: rr   b]
	                           	| [$b585: rr   c]
	                           	| [$b587: rr   b]
	                           	| [$b589: rr   c]
	add.w	d0,a3                            	| [$b58b: add  iy,bc]
	rts                                    	| [$b58d: ret]

load_struct_C100_from_A_index_B58E:
	lea	task_struct_C100(pc),a3            	| [$b58e: ld   iy,task_struct_C100]
	moveq	#0,d1
	move.b	d0,d1                           	| [$b592: ld   b,a]
	* copied there and there. D1 = D0*0x20
	lsl.w	#5,d1                            	| [$b593: ld   c,$00]
												| [$b595: and  a]
											| [$b596: rr   b]
											| [$b598: rr   c]
											| [$b59a: rr   b]
											| [$b59c: rr   c]
											| [$b59e: rr   b]
											| [$b5a0: rr   c]
	add.w	d1,a3                            	| [$b5a2: add  iy,bc]
	rts                                    	| [$b5a4: ret]
	
task_yield_B5A5:
	jbsr	disable_interrupts_BBE2           	| [$b5a5: call disable_interrupts_BBE2]
	move.b	player_2_attack_flags_C028,d0   	| [$b5a8: ld   a,(player_2_attack_flags_C028)]
	lea	active_task_bit_table_C000(pc),a0  	| [$b5ab: ld   hl,active_task_bit_table_C000]
	move.b	d0,d2                           	| [$b5ae: ld   c,a]
	clr.w	d1                               	| [$b5af: ld   b,$00]
	moveq	#0,d3                      	| [$b5b1: ld   de,$0000] 0
	and.b	#0x07,d0                         	| [$b5b4: and  $07]
	move.b	d0,d3                           	| [$b5b6: ld   e,a]
	move.b	d2,d0                           	| [$b5b7: ld   a,c]
	and.b	#0xF8,d0                         	| [$b5b8: and  $F8]
	roxr.b	#3,d0                           	| [$b5ba: rra] * 3
	move.b	d0,d1                           	| [$b5bd: ld   c,a]
	add.w	d1,a0                            	| [$b5be: add  hl,bc]

	lea	powers_of_2_table_B875(pc),a2      	| [$b5bf: ld   ix,powers_of_2_table_B875]
	add.w	d3,a2                            	| [$b5c3: add  ix,de]

	move.b	(a2),d0                    	| [$b5c5: ld   a,(ix+$00)]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$b5c8: xor  (hl)]
	move.b	d0,(a0)                         	| [$b5c9: ld   (hl),a]
jump_to_mainloop_B5CA:
	jra	jump_to_mainloop_B48D              	| [$b5ca: jp   jump_to_mainloop_B48D]


* < A: task number
resume_task_B5CD:
	jbsr	disable_interrupts_BBE2           	| [$b5cd: call disable_interrupts_BBE2]
	lea	active_task_bit_table_C000(pc),a0                	| [$b5d0: ld   hl,active_task_bit_table_C000]
	move.b	d0,d2                           	| [$b5d3: ld   c,a]
	moveq	#0,d1                               	| [$b5d4: ld   b,$00]
	moveq	#0,d3                      	| [$b5d6: ld   de,$0000] 0
	and.b	#0x07,d0                         	| [$b5d9: and  $07]
	move.b	d0,d3                           	| [$b5db: ld   e,a]
	move.b	d2,d0                           	| [$b5dc: ld   a,c]
	and.b	#0xF8,d0                         	| [$b5dd: and  $F8]
	roxr.b	#3,d0                           	| [$b5df: rra] * 3
	move.b	d0,d1                           	| [$b5e2: ld   c,a]
	add.w	d1,a0                            	| [$b5e3: add  hl,bc]

	lea	powers_of_2_table_B875(pc),a2      	| [$b5e4: ld   ix,powers_of_2_table_B875]
	add.w	d3,a2                            	| [$b5e8: add  ix,de]

	move.b	(a2),d0                    	| [$b5ea: ld   a,(ix+$00)]
	move.b	d0,d1                           	| [$b5ed: ld   b,a]
	and.b	(a0),d0
	bne.b	0f
	rts                                    	| [$b5ef: ret  z]
0:
	* task found
	* mostly reached when screen changes (ex: highscores => title screen)

	move.b	d1,d0                           	| [$b5f0: ld   a,b]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$b5f1: xor  (hl)]
	move.b	d0,(a0)                         	| [$b5f2: ld   (hl),a]
	move.w	#0x0006,d3                      	| [$b5f3: ld   de,$0006] 6
	add.w	d3,a0                            	| [$b5f6: add  hl,de]
	move.b	d1,d0                           	| [$b5f7: ld   a,b]
	and.b	(a0),d0
	jeq	l_b607                             	| [$b5f9: jp   z,$B607]
	move.b	d1,d0                           	| [$b5fc: ld   a,b]
	move.b	(a0),d7
	eor.b	d7,d0                          	| [$b5fd: xor  (hl)]
	move.b	d0,(a0)                         	| [$b5fe: ld   (hl),a]
	lea	nb_tasks_to_start_C029(pc),a0      	| [$b5ff: ld   hl,nb_tasks_to_start_C029]
	subq.b	#1,(a0)                         	| [$b602: dec  (hl)]
	jbsr	enable_interrupts_BBE2            	| [$b603: call enable_interrupts_BBE2]
	rts                                    	| [$b606: ret]

l_b607:
	add.w	d3,a0                            	| [$b607: add  hl,de]
	move.b	d1,d0                           	| [$b608: ld   a,b]
	and.b	(a0),d0
	jeq	l_b618                             	| [$b60a: jp   z,$B618]
	move.b	d1,d0                           	| [$b60d: ld   a,b]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$b5fd: xor  (hl)]
	move.b	d0,(a0)                         	| [$b60f: ld   (hl),a]
	lea	nb_suspended_tasks_C02A(pc),a0     	| [$b610: ld   hl,nb_suspended_tasks_C02A]
	subq.b	#1,(a0)                         	| [$b613: dec  (hl)]
	jbsr	enable_interrupts_BBE2            	| [$b614: call enable_interrupts_BBE2]
	rts                                    	| [$b617: ret]

l_b618:
	add.w	d3,a0                            	| [$b618: add  hl,de]
	move.b	d1,d0                           	| [$b619: ld   a,b]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$b60e: xor  (hl)]
	move.b	d0,(a0)                         	| [$b61b: ld   (hl),a]
	jbsr	enable_interrupts_BBE2            	| [$b61c: call enable_interrupts_BBE2]
	rts                                    	| [$b61f: ret]

* < A: task index to schedule for start
* changes $C000-$C005 (bitfield 6*8 = 48 bits)
* returns changed bits in $C006-$C00B
* returns 0 if something changed, $FF otherwise
schedule_task_to_start_B620:
	jbsr	disable_interrupts_BBE2           	| [$b620: call disable_interrupts_BBE2]
	lea	active_task_bit_table_C000,a0                	| [$b623: ld   hl,active_task_bit_table_C000]
	move.b	d0,d2                           	| [$b626: ld   c,a]
	clr.w	d1                               	| [$b627: ld   b,$00]
	moveq	#0,d3                      	| [$b629: ld   de,$0000] 0
	and.b	#0x07,d0                         	| [$b62c: and  $07]
	move.b	d0,d3                           	| [$b62e: ld   e,a] A & 7 in E
	move.b	d2,d0                           	| [$b62f: ld   a,c] restore original A
	and.b	#0xF8,d0                         	| [$b630: and  $F8] mask it to get upper part (align on 8)
	roxr.b	#3,d0                           	| [$b632: rra] * 3 divide by 8
	move.b	d0,d1                           	| [$b635: ld   c,a]
	add.w	d1,a0                            	| [$b636: add  hl,bc]
	lea	powers_of_2_table_B875(pc),a2      	| [$b637: ld   ix,powers_of_2_table_B875]
	add.w	d3,a2                            	| [$b63b: add  ix,de]

* get proper power of 2 value in A (single bit value)
	move.b	(a2),d0                    	| [$b63d: ld   a,(ix+$00)]
	move.b	d0,d4                           	| [$b640: ld   e,a]
	and.b	(a0),d0							| [and  (hl)]
	jne	l_b658                             	| [$b642: jp   nz,$B658]
	move.b	d4,d0                           	| [$b645: ld   a,e]
	or.b	(a0),d0                           	| [$b646: or   (hl)]
	move.b	d0,(a0)                         	| [$b647: ld   (hl),a]
	moveq	#0x0006,d1                      	| [$b648: ld   bc,$0006] 6
        * next bitfield
	add.w	d1,a0                            	| [$b64b: add  hl,bc]
	move.b	d4,d0                           	| [$b64c: ld   a,e]
	or.b	(a0),d0                           	| [$b64d: or   (hl)]
	move.b	d0,(a0)                         	| [$b64e: ld   (hl),a]
	lea	nb_tasks_to_start_C029,a0      	| [$b64f: ld   hl,nb_tasks_to_start_C029]
	addq.b	#1,(a0)                         	| [$b652: inc  (hl)] increment timer
	clr.b	d0                               	| [$b653: xor  a]
	jbsr	enable_interrupts_BBE2            	| [$b654: call enable_interrupts_BBE2]
	rts                                    	| [$b657: ret]
l_b658:
	st.b	d0                                	| [$b658: ld   a,$FF]
	jbsr	enable_interrupts_BBE2            	| [$b65a: call enable_interrupts_BBE2]
	rts                                    	| [$b65d: ret]

* < a: time to suspend??
* this can be slower or faster if a computer is playing
* depending on the difficulty level
suspend_this_task_B65E:
	jbsr	disable_interrupts_BBE2           	| [$b65e: call disable_interrupts_BBE2]
	move.w	d0,-(sp)                        	| [$b661: push af]
	move.b	player_2_attack_flags_C028,d0   	| [$b662: ld   a,(player_2_attack_flags_C028)]
	lea	unknown_C012,a0                	| [$b665: ld   hl,unknown_C012]
	move.b	d0,d2                           	| [$b668: ld   c,a]
	clr.w	d1                               	| [$b669: ld   b,$00]
	move.w	#0x0000,d3                      	| [$b66b: ld   de,$0000] 0
	and.b	#0x07,d0                         	| [$b66e: and  $07]
	move.b	d0,d3                           	| [$b670: ld   e,a]
	move.b	d2,d0                           	| [$b671: ld   a,c]
	and.b	#0xF8,d0                         	| [$b672: and  $F8]
	roxr.b	#3,d0                           	| [$b674: rra] * 3
	move.b	d0,d1                           	| [$b677: ld   c,a]
	add.w	d1,a0                            	| [$b678: add  hl,bc]
	lea	powers_of_2_table_B875(pc),a2      	| [$b679: ld   ix,powers_of_2_table_B875]
	add.w	d3,a2                            	| [$b67d: add  ix,de]
	move.b	(a2),d0                    	| [$b67f: ld   a,(ix+$00)]
	or.b	(a0),d0                           	| [$b682: or   (hl)]
	move.b	d0,(a0)                         	| [$b683: ld   (hl),a]
	move.b	player_2_attack_flags_C028,d0   	| [$b684: ld   a,(player_2_attack_flags_C028)]
	* original code starts from C100 and assumes each task struct has 0x20 size
	lea	task_struct_C100,a3                	| [$b687: ld   iy,task_struct_C100]
	move.b	d0,d1                           	| [$b68b: ld   b,a]
	clr.b	d2                               	| [$b68c: ld   c,$00]
	tst.b	d0                               	| [$b68e: and  a]
	* multiply by 32, which bypasses task_struct_table_B7E5 pointer
	* table completely, and is VERY bad practice!
	* since we kept task struct with proper 0x20 size it works, though
	* TODO: optim: lsl.w	#5,d1
	roxr.b	#1,d1                           	| [$b68f: rr   b]
	roxr.b	#1,d2                           	| [$b691: rr   c]
	roxr.b	#1,d1                           	| [$b693: rr   b]
	roxr.b	#1,d2                           	| [$b695: rr   c]
	roxr.b	#1,d1                           	| [$b697: rr   b]
	roxr.b	#1,d2                           	| [$b699: rr   c]
	lsl.w	#8,d1
	move.b	d2,d1
	add.w	d1,a3                            	| [$b69b: add  iy,bc]
	move.w	(sp)+,d0                        	| [$b69d: pop  af]
* writes in task struct + 2: number of frames to wait until next frame
	move.b	d0,(0x02,a3)                    	| [$b69e: ld   (iy+$02),a]
	* get current stack (rather stack offset so we fit in 16 bits) 
	* to store it in the task structure
	                      	                   | [$b6a1: ld   hl,$0000] 0
	move.l	sp,d0                            	| [$b6a4: add  hl,sp]
	sub.l	#stack_bottom_C400,d0
	move.w	d0,(a3)           | [$b6a5: ld   (iy+$00),l]
	                          | [$b6a8: ld   (iy+$01),h]

	
	jra	jump_to_mainloop_B48D              	| [$b6ab: jp   jump_to_mainloop_B48D]

control_screen_flip_BB6F:
	rts
	
* seems to suspend a task but also make up for that and resume...
task_manipulation_B6AE:
	jbsr	disable_interrupts_BBE2           	| [$b6ae: call disable_interrupts_BBE2]
	movem.w	d1/d2,-(sp)                    	| [$b6b1: push bc]
	move.w	d0,-(sp)                        	| [$b6b2: push af]
	lea	active_task_bit_table_C000(pc),a0                	| [$b6b3: ld   hl,active_task_bit_table_C000]
	move.b	d0,d2                           	| [$b6b6: ld   c,a]
	clr.w	d1                               	| [$b6b7: ld   b,$00]
	moveq	#0,d3                      	| [$b6b9: ld   de,$0000] 0
	and.b	#0x07,d0                         	| [$b6bc: and  $07]
	move.b	d0,d3                           	| [$b6be: ld   e,a]
	move.b	d2,d0                           	| [$b6bf: ld   a,c]
	and.b	#0xF8,d0                         	| [$b6c0: and  $F8]
	roxr.b	#3,d0                           	| [$b6c2: rra] * 3
	move.b	d0,d1                           	| [$b6c5: ld   c,a]
	add.w	d1,a0                            	| [$b6c6: add  hl,bc]

	move.l	a0,-(sp)                        	| [$b6c7: push hl]
	lea	powers_of_2_table_B875(pc),a2      	| [$b6c8: ld   ix,powers_of_2_table_B875]
	add.w	d3,a2                            	| [$b6cc: add  ix,de]

	move.b	(a2),d0                    	| [$b6ce: ld   a,(ix+$00)]
	move.b	d0,d1                           	| [$b6d1: ld   b,a]
	and.b	(a0),d0							| [and  (hl)]
	jeq	l_b726                             	| [$b6d3: jp   z,$B726]
											| [$b6d6: ld   de,$0006] 6
	addq.w	#6,a0                            	| [$b6d9: add  hl,de]
	move.b	d1,d0                           	| [$b6da: ld   a,b]
	and.b	(a0),d0							| [and  (hl)]
	jne	l_b726                             	| [$b6dc: jp   nz,$B726]
	move.b	d1,d0                           	| [$b6df: ld   a,b]
												| [$b6e0: ld   de,$000C] 12
	add.w	#0xc,a0                            	| [$b6e3: add  hl,de]

	move.b	d1,d0                           	| [$b6e4: ld   a,b]
	not.b	d0                               	| [$b6e5: cpl]
	and.b	(a0),d0							| [and  (hl)]
	move.b	d0,(a0)                         	| [$b6e7: ld   (hl),a]
	* get pushed hl value in de
	move.l	(sp)+,a1                        	| [$b6e8: pop  de]
	move.w	#0x000C,a0                      	| [$b6e9: ld   hl,$000C]
	* and add 12 to it
	add.l	a1,a0                            	| [$b6ec: add  hl,de]
	move.b	d1,d0                           	| [$b6ed: ld   a,b]
	and.b	(a0),d0							| [and  (hl)]
	jeq	l_b6f9                             	| [$b6ef: jp   z,$B6F9]
	* if condition met, one less task is suspended
	lea	nb_suspended_tasks_C02A(pc),a3     	| [$b6f2: ld   iy,nb_suspended_tasks_C02A]
	subq.b	#1,(0x00,a3)                    	| [$b6f6: dec  (iy+$00)]
l_b6f9:
	move.b	d1,d0                           	| [$b6f9: ld   a,b]
	or.b	(a0),d0                           	| [$b6fa: or   (hl)]
	move.b	d0,(a0)                         	| [$b6fb: ld   (hl),a]
	move.w	(sp)+,d0                        	| [$b6fc: pop  af]
	lea	task_struct_C100(pc),a3                	| [$b6fd: ld   iy,task_struct_C100]
	move.b	d0,d1                           	| [$b701: ld   b,a]
	clr.b	d2                               	| [$b702: ld   c,$00]
	tst.b	d0                               	| [$b704: and  a]
	roxr.b	#1,d1                           	| [$b705: rr   b]
	roxr.b	#1,d2                           	| [$b707: rr   c]
	roxr.b	#1,d1                           	| [$b709: rr   b]
	roxr.b	#1,d2                           	| [$b70b: rr   c]
	roxr.b	#1,d1                           	| [$b70d: rr   b]
	roxr.b	#1,d2                           	| [$b70f: rr   c]
	lsl.w	#8,d1
	move.b	d2,d1
	add.w	d1,a3                            	| [$b711: add  iy,bc]

	move.b	player_2_attack_flags_C028,d0   	| [$b713: ld   a,(player_2_attack_flags_C028)]
	move.b	d0,(0x05,a3)                    	| [$b716: ld   (iy+$05),a]
	movem.w	(sp)+,d1/d2                    	| [$b719: pop  bc]
	move.b	d1,(0x06,a3)                    	| [$b71a: ld   (iy+$06),b]
	lea	nb_suspended_tasks_C02A(pc),a0     	| [$b71d: ld   hl,nb_suspended_tasks_C02A]
	addq.b	#1,(a0)                         	| [$b720: inc  (hl)]
	clr.b	d0                               	| [$b721: xor  a]
	jbsr	enable_interrupts_BBE2            	| [$b722: call enable_interrupts_BBE2]
	rts           

l_b726:
	move.l	(sp)+,a0                        	| [$b726: pop  hl]
	move.w	(sp)+,d0                        	| [$b727: pop  af]
	movem.w	(sp)+,d1/d2                    	| [$b728: pop  bc]
	st.b	d0                                	| [$b729: ld   a,$FF]
	jbsr	enable_interrupts_BBE2            	| [$b72b: call enable_interrupts_BBE2]
	rts                                    	| [$b72e: ret]
	
* main interrupt (vblank) routine, called every 1/60s
on_periodic_interrupt_B72F:
	*jbsr	disable_interrupts_BBE2           	| [$b735: call disable_interrupts_BBE2]
* update sprites into hardware registers TODO
	*lea	referee_x_pos_C700(pc),a0          	| [$b738: ld   hl,referee_x_pos_C700]
	*lea	l_D800,a1                      	| [$b73b: ld   de,$D800]
	*move.w	#0xFC,d1                      	| [$b73e: ld   bc,$00FC]
	*jbsr	ldir                              	| [$b741: ldir]
* increment attack counter
	addq.w	#1,periodic_counter_16bit_C02E	| [$b743: ld   hl,(periodic_counter_16bit_C02E)]
											| [$b746: inc  hl]
											| [$b747: ld   (periodic_counter_16bit_C02E),hl]
	addq.b	#1,periodic_counter_8bit_C02B   	| [$b74a: ld   a,(periodic_counter_8bit_C02B)]
											| [$b74d: inc  a]
											| [$b74e: ld   (periodic_counter_8bit_C02B),a]
	clr.b	d0                               	| [$b751: xor  a]
	jbsr	control_screen_flip_BB6F            	| [$b752: call control_screen_flip_BB6F]
	jbsr	manage_coin_inserted_BA7D         	| [$b755: call manage_coin_inserted_BA7D]
	lea	unknown_C012(pc),a0                	| [$b758: ld   hl,unknown_C012]
	clr.w	d1                      	| [$b75b: ld   bc,$0000] 0  MSB always at zero
	clr.w	d2                      	| [$b75b: ld   bc,$0000] 0
	clr.w	d3                               	| [$b75e: ld   d,$00]
	jbsr	l_b77d                            	| [$b760: call $B77D]
	move.b	#0x08,d2                        	| [$b763: ld   c,$08]
	jbsr	l_b77d                            	| [$b765: call $B77D]
	move.b	#0x10,d2                        	| [$b768: ld   c,$10]
	jbsr	l_b77d                            	| [$b76a: call $B77D]
	move.b	#0x18,d2                        	| [$b76d: ld   c,$18]
	jbsr	l_b77d                            	| [$b76f: call $B77D]
	*jbsr	enable_interrupts_BBE2            	| [$b778: call enable_interrupts_BBE2]
	rts

l_b77d:
	move.b	(a0),d0                         	| [$b77d: ld   a,(hl)]
												| [$b77e: and  a]
	jne	l_b784                             	| [$b77f: jp   nz,$B784]
	addq.w	#1,a0                           	| [$b782: inc  hl]
	rts                                    	| [$b783: ret]
l_b784:
	clr.w	d4                               	| [$b784: ld   e,$00]
l_b786:
	tst.b	d0                               	| [$b786: and  a]
	jne	l_b78c                             	| [$b787: jp   nz,$B78C]
	addq.w	#1,a0                           	| [$b78a: inc  hl]
	rts                                    	| [$b78b: ret]
l_b78c:
	lsr.b	#1,d0                            	| [$b78c: srl  a]
	jcs	l_b795                             	| [$b78e: jp   c,$B795]
	addq.b	#1,d4                           	| [$b791: inc  e]
	jra	l_b786                             	| [$b792: jp   $B786]
l_b795:
	lea	task_struct_C100,a2            	| [$b795: ld   ix,task_struct_C100]
	move.w	d0,-(sp)                        	| [$b799: push af]
	move.b	d2,d0                           	| [$b79a: ld   a,c]
	add.b	d4,d0                            	| [$b79b: add  a,e]
	movem.w	d1/d2,-(sp)                    	| [$b79c: push bc]
	move.b	d0,d1                           	| [$b79d: ld   b,a]
	move.b	d3,d2                           	| [$b79e: ld   c,d]
	tst.b	d0                               	| [$b79f: and  a]
	roxr.b	#1,d1                           	| [$b7a0: rr   b]
	roxr.b	#1,d2                           	| [$b7a2: rr   c]
	roxr.b	#1,d1                           	| [$b7a4: rr   b]
	roxr.b	#1,d2                           	| [$b7a6: rr   c]
	roxr.b	#1,d1                           	| [$b7a8: rr   b]
	roxr.b	#1,d2                           	| [$b7aa: rr   c]
	lsl.w	#8,d1
	move.b	d2,d1
	add.w	d1,a2                            	| [$b7ac: add  ix,bc]
	movem.w	(sp)+,d1/d2                    	| [$b7ae: pop  bc]
* read current frame timeout value
	move.b	(0x02,a2),d0                    	| [$b7af: ld   a,(ix+$02)]
												| [$b7b2: and  a]
	jeq	l_b7e0                             	| [$b7b3: jp   z,$B7E0] zero => skip
	subq.b	#1,d0                           	| [$b7b6: dec  a] decrease frame value
	move.b	d0,(0x02,a2)                    	| [$b7b7: ld   (ix+$02),a] and store it
	jne	l_b7e0                             	| [$b7ba: jp   nz,$B7E0] non-zero => skip
* frame timeout reached (if ix == player 1 or player 2 struct C240 or C260)
* seems that it can be used for other animations or timeouts
* to put a breakpoint that filters player 2 animation: bp B7BD,ix == C260
	move.b	d0,(0x06,a2)                    	| [$b7bd: ld   (ix+$06),a]
	addq.b	#1,nb_suspended_tasks_C02A     	| [$b7c0: ld   ix,nb_suspended_tasks_C02A]
											| [$b7c4: inc  (ix+$00)]
	lea	powers_of_2_table_B875(pc),a2      	| [$b7c7: ld   ix,powers_of_2_table_B875]
	add.w	d4,a2                            	| [$b7cb: add  ix,de]
	move.b	(a2),d0                    	| [$b7cd: ld   a,(ix+$00)]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$b7d0: xor  (hl)]
	move.b	d0,(a0)                         	| [$b7d1: ld   (hl),a]

	move.l	a0,-(sp)                        	| [$b7d2: push hl]
	movem.w	d1/d2,-(sp)                    	| [$b7d3: push bc]
	                        	| [$b7d4: ld   c,$06]
												| [$b7d6: and  a] clear carry
	subq.w	#6,a0						| [sbc  hl,bc] B=0, C=6
	move.b	(a2),d0                    	| [$b7d9: ld   a,(ix+$00)]
	or.b	(a0),d0                           	| [$b7dc: or   (hl)]
	move.b	d0,(a0)                         	| [$b7dd: ld   (hl),a]
	movem.w	(sp)+,d1/d2                    	| [$b7de: pop  bc]
	move.l	(sp)+,a0                        	| [$b7df: pop  hl]
l_b7e0:
	move.w	(sp)+,d0                        	| [$b7e0: pop  af]
	addq.b	#1,d4                           	| [$b7e1: inc  e]
	jra	l_b786                             	| [$b7e2: jp   $B786]

task_struct_table_B7E5:
	.long	task_struct_C100                           	|  $b7e5
	.long	task_struct_C120                           	|  $b7e7
	.long	task_struct_C140                           	|  $b7e9
	.long	task_struct_C160                           	|  $b7eb
	.long	task_struct_C180                           	|  $b7ed
	.long	task_struct_C1A0                           	|  $b7ef
	.long	task_struct_C1C0                           	|  $b7f1
	.long	task_struct_C1E0                           	|  $b7f3
	.long	task_struct_C200                           	|  $b7f5
	.long	task_struct_C220                           	|  $b7f7
	.long	task_struct_C240                           	|  $b7f9
	.long	task_struct_C260                           	|  $b7fb
	.long	task_struct_C280                           	|  $b7fd
	.long	task_struct_C2A0                           	|  $b7ff
	.long	task_struct_C2C0                           	|  $b801
	.long	task_struct_C2E0                           	|  $b803
	.long	task_struct_C300                           	|  $b805
	.long	task_struct_C320                           	|  $b807
	.long	task_struct_C340                           	|  $b809
	.long	task_struct_C360                           	|  $b80b
	.long	task_struct_C380                           	|  $b80d
	.long	task_struct_C3A0                           	|  $b80f
	.long	task_struct_C3C0                           	|  $b811
	.long	task_struct_C3E0                           	|  $b813
	.long	task_struct_C400                           	|  $b815
	* this is probably not reached, and a mistake
	* as this overlaps the stack buffers
	* let it crash loudly if accessed!!!
	.long	-1   | task_struct_C420                           	|  $b817
	.long	-1   | task_struct_C440                           	|  $b819
	.long	-1   | task_struct_C460                           	|  $b81b
	.long	-1   | task_struct_C480                           	|  $b81d
	.long	-1   | task_struct_C4A0                           	|  $b81f
	.long	-1   | task_struct_C4C0                           	|  $b821
	.long	-1   | task_struct_C4E0                           	|  $b823
task_stack_buffer_table_B825:
	.long	stack_buffer_C420                           	|  $b825
	.long	stack_buffer_C440                           	|  $b827
	.long	stack_buffer_C460                           	|  $b829
	.long	stack_buffer_C480                           	|  $b82b
	.long	stack_buffer_C4A0                           	|  $b82d
	.long	stack_buffer_C4C0                           	|  $b82f
	.long	stack_buffer_C4E0                           	|  $b831
	.long	stack_buffer_C500                           	|  $b833
	.long	stack_buffer_C520                           	|  $b835
	.long	stack_buffer_C540                           	|  $b837
	.long	stack_buffer_C560                           	|  $b839
	.long	stack_buffer_C580                           	|  $b83b
	.long	stack_buffer_C5A0                           	|  $b83d
	.long	stack_buffer_C5C0                           	|  $b83f
	.long	stack_buffer_C5E0                           	|  $b841
	.long	stack_buffer_C600                           	|  $b843
	.long	stack_buffer_C620                           	|  $b845
	.long	stack_buffer_C640                           	|  $b847
	.long	stack_buffer_C660                           	|  $b849
	.long	stack_buffer_C680                           	|  $b84b
	.long	stack_buffer_C6A0                           	|  $b84d
	.long	stack_buffer_C6C0                           	|  $b84f
	.long	stack_buffer_C6E0                           	|  $b851
	.long	stack_buffer_C700                           	|  $b853
	.long	-1   | stack_buffer_C720                           	|  $b855
	.long	-1   | stack_buffer_C740                           	|  $b857
	.long	-1   | stack_buffer_C760                           	|  $b859
	.long	-1   | stack_buffer_C780                           	|  $b85b
	.long	-1   | stack_buffer_C7A0                           	|  $b85d
	.long	-1   | stack_buffer_C7C0                           	|  $b85f
	.long	-1   | stack_buffer_C7E0                           	|  $b861
	.long	-1   | stack_buffer_C800                           	|  $b863
	.long	active_task_bit_table_C000                           	|  $b865
	.long	unknown_C008                           	|  $b867
	.long	unknown_C010                           	|  $b869
	.long	unknown_C018                           	|  $b86b
	.long	unknown_C020                           	|  $b86d
	.long	player_2_attack_flags_C028                           	|  $b86f
	.long	dip_switches_copy_C030                          	|  $b871
	.long	unknown_C038                           	|  $b873


powers_of_2_table_B875:
	dc.b	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80 | $b875
table_B87D:
	dc.b	0x00,0x00,0x01,0x00,0x02,0x01,0x01,0x00 | $b87d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b885
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b88d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b895
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $b89d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b8a5
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b8ad
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b8b5
	dc.b	0x20,0x05,0x01,0x00,0x02,0x01,0x01,0x00 | $b8bd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b8c5
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b8cd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b8d5
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $b8dd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b8e5
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b8ed
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b8f5
	dc.b	0x40,0x06,0x01,0x00,0x02,0x01,0x01,0x00 | $b8fd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b905
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b90d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b915
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $b91d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b925
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b92d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b935
	dc.b	0x20,0x05,0x01,0x00,0x02,0x01,0x01,0x00 | $b93d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b945
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b94d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b955
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $b95d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b965
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b96d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b975
	dc.b	0x80,0x07,0x01,0x00,0x02,0x01,0x01,0x00 | $b97d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b985
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b98d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b995
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $b99d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b9a5
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b9ad
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b9b5
	dc.b	0x20,0x05,0x01,0x00,0x02,0x01,0x01,0x00 | $b9bd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b9c5
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b9cd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b9d5
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $b9dd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b9e5
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $b9ed
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $b9f5
	dc.b	0x40,0x06,0x01,0x00,0x02,0x01,0x01,0x00 | $b9fd
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba05
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $ba0d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba15
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $ba1d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba25
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $ba2d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba35
	dc.b	0x20,0x05,0x01,0x00,0x02,0x01,0x01,0x00 | $ba3d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba45
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $ba4d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba55
	dc.b	0x10,0x04,0x01,0x00,0x02,0x01,0x01,0x00 | $ba5d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba65
	dc.b	0x08,0x03,0x01,0x00,0x02,0x01,0x01,0x00 | $ba6d
	dc.b	0x04,0x02,0x01,0x00,0x02,0x01,0x01,0x00 | $ba75

manage_coin_inserted_BA7D:
	* dummy
	rts
	
init_ram_BB41:
* clear video ram
	*lea	l_D000(pc),a0                      	| [$bb44: ld   hl,$D000]
	*lea	l_1000(pc),a4                      	| [$bb47: ld   bc,$1000] immediate value
	*jbsr	clear_zone_B2BD                   	| [$bb4a: call clear_zone_B2BD]
* clear ram
	*lea	active_task_bit_table_C000(pc),a0                	| [$bb4d: ld   hl,active_task_bit_table_C000]
	*move.w	#0x1000,d1                      	| [$bb50: ld   bc,$1000] immediate value
	*jbsr	clear_zone_B2BD                   	| [$bb53: call clear_zone_B2BD]
* init ram with some startup values
	jbsr	init_C040_F6E5                    	| [$bb57: call init_C040_F6E5]
	move.b	#0x02,d0                        	| [$bb5a: ld   a,$02]
	move.b	d0,unknown_C0C0                 	| [$bb5c: ld   (unknown_C0C0),a]
	jbsr	get_dip_switches_BB92             	| [$bb5f: call get_dip_switches_BB92]
	move.b	d0,dip_switches_copy_C030       	| [$bb62: ld   (dip_switches_copy_C030),a]
	clr.b	d0                               	| [$bb65: xor  a]
	jbsr	schedule_task_to_start_B620                 	| [$bb66: call schedule_task_to_start_B620]
	move.b	#0x80,d0                        	| [$bb69: ld   a,$80]
	jbsr	stop_sound_BBDF                   	| [$bb6b: call stop_sound_BBDF]
	rts                                    	| [$bb6e: ret]

set_normal_screen_bb72:
	rts

* read system port
check_coin_ports_BB82:
	movem.w	d1/d2,-(sp)                    	| [$bb82: push bc]                       	| [$bb82: push bc]
*in   a,($80)
	moveq	#0,d0		| temp!!
	not.b	d0                               	| [$bb85: cpl]
* only 4 first bits are used
*	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_COIN1 )
*	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_COIN2 )
*	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_START1 )
*	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_START2 )
	and.b	#0x0F,d0                         	| [$bb86: and  $0F]
	move.b	d0,d1                           	| [$bb88: ld   b,a]
	ror.b	#2,d0                            	| [$bb89: rrca] * 2
	and.b	#0xC0,d0                         	| [$bb8b: and  $C0] coin inserted bits
	or.b	d1,d0                             	| [$bb8d: or   b]
	and.b	#0xCC,d0                         	| [$bb8e: and  $CC]
	movem.w	(sp)+,d1/d2                    	| [$bb90: pop  bc]
	rts                                    	| [$bb91: ret]

get_dip_switches_BB92:
	moveq	#0,d0
	*in   a,($C0)
	not.b	d0                               	| [$bb94: cpl] invert bits (active low logic)
	rts                                    	| [$bb95: ret]

disable_interrupts_BBE2:
	jbsr		osd_disable_vblank_interrupt
	rts
	
enable_interrupts_BBE2:
	jbsr		osd_enable_vblank_interrupt
	rts

stop_sound_BBDF:
	jra	osd_sound_stop	| [$bbe1: ret]


* copy contents of ROM in $C040
init_C040_F6E5:
	move.w	#0x006C,d1                      	| [$f6e5: ld   bc,$006C] 108
	lea	table_F6F1(pc),a0                  	| [$f6e8: ld   hl,table_F6F1]
	lea	unknown_C040,a1                	| [$f6eb: ld   de,unknown_C040]
	jbsr	ldir                              	| [$f6ee: ldir]
	rts                                    	| [$f6f0: ret]
table_F6F1:
	dc.b	0x02,0x00,0x00,0x00,0x00,0x00,0x13,0xb0 | table_F6F1
	dc.b	0x1e,0xb0,0x0c,0xb0,0x14,0xb0,0x22,0xb0 | $f6f9
	dc.b	0x00,0x03,0x01,0x80,0x00,0x00,0x00,0x00 | $f701
	dc.b	0x16,0xb0,0x0a,0xb0,0x1b,0xb0,0x22,0xb0 | $f709
	dc.b	0x3c,0xb0,0x00,0x02,0x01,0x60,0x00,0x00 | $f711
	dc.b	0x00,0x00,0x14,0xb0,0x1e,0xb0,0x17,0xb0 | $f719
	dc.b	0x1d,0xb0,0x0a,0xb0,0x00,0x02,0x01,0x40 | $f721
	dc.b	0x00,0x00,0x00,0x00,0x1b,0xb0,0x0e,0xb0 | $f729
	dc.b	0x12,0xb0,0x14,0xb0,0x18,0xb0,0x00,0x01 | $f731
	dc.b	0x01,0x20,0x00,0x00,0x00,0x00,0x13,0xb0 | $f739
	dc.b	0x18,0xb0,0x17,0xb0,0x22,0xb0,0x3c,0xb0 | $f741
	dc.b	0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00 | $f749
	dc.b	0x2f,0xb0,0x2f,0xb0,0x2f,0xb0,0x2f,0xb0 | $f751
	dc.b	0x2f,0xb0,0x00,0x01 | $f759
	

* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
ldir:
    subq.w    #1,d1
0:
    move.b    (a0)+,(a1)+
    dbf        d1,0b
    clr.w    d1
    rts
